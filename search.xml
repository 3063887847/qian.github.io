<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis快速入门</title>
      <link href="/2024/06/03/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2024/06/03/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1>Mybatis快速入门</h1><p>官网：<a href="https://mybatis.net.cn/index.html">MyBatis中文网</a></p><h2 id="目录结构">目录结构</h2><p><img src="/2024/06/03/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5CSnipaste_2024-06-04_23-31-41.png" alt=""></p><h2 id="创建users表，添加数据">创建users表，添加数据</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">CREATE TABLE `users` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(255) DEFAULT NULL,</span><br><span class="line">  `birthday` date DEFAULT NULL,</span><br><span class="line">   `sex` varchar(2) DEFAULT NULL,</span><br><span class="line">  `home_address` varchar(255) DEFAULT NULL,</span><br><span class="line"> PRIMARY KEY (`id`)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>![](D:\Users\30638\Typora\图片\Snipaste_2024-06-04_16-41-55 - 副本.png)</p><h2 id="导入依赖">导入依赖</h2><p>在pom.xml文件中写入对应jar包的依赖</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!--mysql驱动--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">8.0</span><span class="number">.33</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--mybatis依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">3.5</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--单元测试依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">4.13</span>&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--添加slf4j日志api--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.7</span><span class="number">.30</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--添加logback-classic依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.2</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--添加logback-core依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;logback-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.2</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="导入logback-xml">导入logback.xml</h2><p>导入logback.xml到resource目录下</p><p>配置打印日志</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--    console表示当前日志信息是可以输出到控制台的--&gt;</span><br><span class="line">    &lt;appender name=<span class="string">"Console"</span> class=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">           &lt;pattern&gt;[%level]  %cyan([%thread]) %boldGreen(%logger{<span class="number">15</span>}) - %msg %n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"com.Carter_x"</span> level=<span class="string">"DEBUG"</span> additivity=<span class="string">"false"</span>&gt;</span><br><span class="line">        &lt;appender-ref ref=<span class="string">"Console"</span>/&gt;</span><br><span class="line">    &lt;/logger&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="编写核心配置文件"><strong>编写核心配置文件</strong></h2><p>在resource目录下创建核心配置文件mybatis-config.xml</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=<span class="string">"com.zjf.utils.User"</span> alias=<span class="string">"User"</span>/&gt;<span class="comment">//起别名,在xml文件中可简写resultType="User"</span></span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"development"</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"development"</span>&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">"JDBC"</span>/&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;<span class="comment">//对com.mysql.cj.jdbc.Driver特别说明，这是MySQL Connector/J 8.0及以后版本的驱动类名，相对于早期的com.mysql.jdbc.Driver（主要在5.x版本中使用）：</span></span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql:///batis?useSSL=false&amp;amp;serverTimezone=UTC"</span>/&gt;<span class="comment">//batis数据库名称，&amp;amp; 代表&amp;符号的意思</span></span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"1234"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">    &lt;!--        引入接口文件--&gt;</span><br><span class="line">&lt;!--        &lt;mapper resource=<span class="string">"com/zjf/mapper/UserMapper.xml"</span>/&gt;--&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"com.zjf.mapper"</span>/&gt;<span class="comment">//两种方式，推荐第二种</span></span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="编写User实体类">编写User实体类</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, Date birthday, String sex, String address)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> {</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirthday</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(Date birthday)</span> {</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> {</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> {</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="查询所有">查询所有</h2><h3 id="编写UserMapper接口">编写UserMapper接口</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjf.utils.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="编写UserMapper-xml">编写UserMapper.xml</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.zjf.mapper.UserMapper"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=<span class="string">"userResultMap"</span> type=<span class="string">"com.zjf.utils.User"</span>&gt;</span><br><span class="line">        &lt;result column=<span class="string">"home_address"</span> property=<span class="string">"address"</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;<span class="comment">//column表示数据库中的列名，property表示Java对象中的属性名。这个resultMap的作用是在查询结果集中将"home_address"列的数据映射到User对象的address属性中。</span></span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"selectAll"</span> resultMap=<span class="string">"userResultMap"</span>&gt;</span><br><span class="line">        select * from users</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="数据库字段和实体类字段名不一致怎么处理"><strong>数据库字段和实体类字段名不一致怎么处理</strong></h3><ol><li>起别名(但是如果字段很多表很多就很复杂)</li></ol>   <figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectAll"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">        select id,username,birthday,sex,home_address as homeAddress from users</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>抽取sql片段(确定不灵活,不同的sql语句需要查询不同的字段)</li></ol>   <figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;sql id=<span class="string">"userSql"</span>&gt;</span><br><span class="line">       id,username,birthday,sex,home_address homeAddress</span><br><span class="line">   &lt;/sql&gt;</span><br><span class="line">   &lt;select id=<span class="string">"selectAll"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">       select</span><br><span class="line">           &lt;include refid=<span class="string">"userSql"</span> /&gt;</span><br><span class="line">           from users</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><p>使用resultMap</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">"userResultMap"</span> type=<span class="string">"user"</span>&gt;</span><br><span class="line">        &lt;result column=<span class="string">"home_address"</span> property=<span class="string">"homeAddress"</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=<span class="string">"selectAll"</span> resultMap=<span class="string">"userResultMap"</span>&gt;</span><br><span class="line">        select * from users</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="编写测试代码">编写测试代码</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestselectAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="comment">//加载核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);<span class="comment">//通过Resources.getResourceAsStream(resource)方法加载配置文件，将其转换为输入流</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<span class="comment">//使用SqlSessionFactoryBuilder的build方法，传入输入流，构建SqlSessionFactory对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行sql语句</span></span><br><span class="line">    <span class="comment">//获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = mapper.selectAll();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) {</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="结果">结果</h3><p><img src="/2024/06/03/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5CSnipaste_2024-06-04_18-54-14.png" alt=""></p><h2 id="查询单条数据">查询单条数据</h2><h3 id="编写UserMapper接口-2">编写UserMapper接口</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">User <span class="title function_">selectOne</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="编写UserMapper-xml-2">编写UserMapper.xml</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectOne"</span> resultMap=<span class="string">"userResultMap"</span>&gt;</span><br><span class="line">        select *  from users <span class="type">where</span>  <span class="variable">id</span> <span class="operator">=</span> #{id};</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="编写测试代码-2">编写测试代码</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">TestselectOne</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="comment">//加载核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行sql语句</span></span><br><span class="line">    <span class="comment">//获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User user= mapper.selectOne(<span class="number">2</span>);<span class="comment">//id = 2的user</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="结果-2">结果</h3><p><img src="/2024/06/03/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5CSnipaste_2024-06-04_18-55-29.png" alt=""></p><h2 id="多条件模糊查询">多条件模糊查询</h2><h3 id="方法1-Param注解实现">方法1.@Param注解实现</h3><h4 id="编写UserMapper接口-3">编写UserMapper接口</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectCondition</span><span class="params">(<span class="meta">@Param("username")</span> String username,<span class="meta">@Param("address")</span> String address)</span>;</span><br></pre></td></tr></tbody></table></figure><p>@Param(“username”)指定了方法参数username在SQL语句中的参数名也是username。<br>@Param(“address”)指定了方法参数address在SQL语句中的参数名也是address</p><h4 id="编写UserMapper-xml-3">编写UserMapper.xml</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectCondition"</span> resultMap=<span class="string">"userResultMap"</span>&gt;</span><br><span class="line">    select * from users where username like <span class="title function_">concat</span><span class="params">(<span class="string">"%"</span>,#{username},<span class="string">"%"</span>)</span> and home_address like <span class="title function_">concat</span><span class="params">(<span class="string">"%"</span>,#{address},<span class="string">"%"</span>)</span><span class="comment">//模糊查询，通过concat函数将"%"+"{username}"+ "%"和"%"+"{address}"+ "%"拼接成完整的模糊匹配条件</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><p>​    这里的#{username}和#{address}就是SQL中的占位符，它们对应的值是Java方法调用时传入的@Param注解的参数。MyBatis会将这些参数值绑定到对应的占位符上，而实际的数据库字段名是username和home_address。</p><h4 id="编写测试代码-3">编写测试代码</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">TestselectCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="comment">//加载核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行sql语句</span></span><br><span class="line">    <span class="comment">//获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users= mapper.selectCondition(<span class="string">"张"</span>, <span class="string">"重庆"</span>);</span><br><span class="line">    <span class="keyword">for</span> (User user : users) {</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方法2-创建对象实现">方法2.创建对象实现</h3><h4 id="编写UserMapper接口-4">编写UserMapper接口</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectCondition</span><span class="params">(User user)</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="编写测试代码-4">编写测试代码</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">TestselectCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="comment">//加载核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行sql语句</span></span><br><span class="line">    <span class="comment">//获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">//创建User对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user1.setUsername(<span class="string">"张"</span>);</span><br><span class="line">    user1.setAddress(<span class="string">"重庆"</span>);</span><br><span class="line">    List&lt;User&gt; users= mapper.selectCondition(user1);</span><br><span class="line">    <span class="keyword">for</span> (User user : users) {</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方法3-map方式实现">方法3.map方式实现</h3><h4 id="编写UserMapper接口-5">编写UserMapper接口</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectCondition</span><span class="params">(Map map)</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="编写测试代码-5">编写测试代码</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">TestselectCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="comment">//加载核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行sql语句</span></span><br><span class="line">    <span class="comment">//获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    map.put(<span class="string">"username"</span>,<span class="string">"张"</span>);</span><br><span class="line">    map.put(<span class="string">"address"</span>,<span class="string">"重庆"</span>);</span><br><span class="line">    List&lt;User&gt; users= mapper.selectCondition(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : users) {</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="结果-3">结果</h3><p><img src="/2024/06/03/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5CSnipaste_2024-06-04_20-20-38.png" alt=""></p><h2 id="动态条件查询"><strong>动态条件查询</strong></h2><p>在上面的条件查询中,存在一个问题,如果用户没有传入条件参数,获取传入了某一个几个条件参数,该怎么写sql语句,我们需要让映射文件中的sql语句根据条件参数是否传入生成</p><h3 id="编写UserMapper-xml-4">编写UserMapper.xml</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectCondition"</span> resultMap=<span class="string">"userResultMap"</span>&gt;</span><br><span class="line">    select * from users</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">     &lt;<span class="keyword">if</span> test=<span class="string">"username!=null and username!=''"</span> &gt;</span><br><span class="line">    username like <span class="title function_">concat</span><span class="params">(<span class="string">"%"</span>,#{username},<span class="string">"%"</span>)</span></span><br><span class="line">     &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">     &lt;<span class="keyword">if</span> test=<span class="string">"address!=null and address!=''"</span> &gt;</span><br><span class="line">     and home_address like <span class="title function_">concat</span><span class="params">(<span class="string">"%"</span>,#{address},<span class="string">"%"</span>)</span></span><br><span class="line">     &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="添加">添加</h2><h3 id="编写UserMapper接口-6">编写UserMapper接口</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Integer <span class="title function_">add</span><span class="params">(User user)</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="编写UserMapper-xml-5">编写UserMapper.xml</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"add"</span> &gt;</span><br><span class="line">    insert into <span class="title function_">users</span><span class="params">(username,birthday,sex,home_address)</span> values (#{username},#{birthday},#{sex},#{address})</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="编写测试代码-6">编写测试代码</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">Testadd</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="comment">//加载核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//      SqlSession sqlSession = sqlSessionFactory.openSession(true);设为true代表自动提交事务，则可省略sqlSession.commit()</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user1.setUsername(<span class="string">"夏洛"</span>);</span><br><span class="line">    user1.setAddress(<span class="string">"上海"</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> mapper.add(user1);</span><br><span class="line">        System.out.println(num);<span class="comment">//num值代表数据库发生修改的行数</span></span><br><span class="line">        sqlSession.commit();<span class="comment">//注意提交事务</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="获取对象id">获取对象id</h3><p>当您使用 <code>&lt;insert&gt;</code> 标签定义一个插入操作时，可以通过设置 <code>useGeneratedKeys="true"</code> 和 <code>keyProperty="id"</code> 来自动获取数据库自动生成的键值，通常是自增主键的id</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"add"</span> useGeneratedKeys=<span class="string">"true"</span> keyProperty=<span class="string">"id"</span> &gt;</span><br><span class="line">     insert into <span class="title function_">users</span><span class="params">(username,birthday,sex,home_address)</span> values (#{username},#{birthday},#{sex},#{address})</span><br><span class="line"> &lt;/insert&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="添加测试代码">添加测试代码</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">System.out.println(user1.getId());</span><br></pre></td></tr></tbody></table></figure><h3 id="结果-4">结果</h3><p><img src="/2024/06/03/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5CSnipaste_2024-06-04_22-02-34.png" alt=""></p><p><img src="/2024/06/03/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5CSnipaste_2024-06-04_22-03-05.png" alt=""></p><h2 id="静态-动态修改"><strong>静态/动态修改</strong></h2><h3 id="静态修改">静态修改</h3><h4 id="编写UserMapper接口-7">编写UserMapper接口</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Integer <span class="title function_">update</span><span class="params">(User user)</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="编写UserMapper-xml-6">编写UserMapper.xml</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;update id=<span class="string">"update"</span>&gt;</span><br><span class="line">        update users set username=#{username},birthday=#{birthday},sex=#{sex},home_address=#{address} where id=#{id}</span><br><span class="line">    &lt;/update&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="编写测试代码-7">编写测试代码</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">Testupdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="comment">//加载核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);<span class="comment">//这里设置为true，自动提交事务</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行sql语句</span></span><br><span class="line">    <span class="comment">//获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user1.setId(<span class="number">1</span>);</span><br><span class="line">    user1.setUsername(<span class="string">"袁华"</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> mapper.update(user1);</span><br><span class="line">    System.out.println(num);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="结果-5">结果</h4><p><img src="/2024/06/03/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5CSnipaste_2024-06-04_22-28-00.png" alt=""></p><p>​    对象中设置的属性username成功修改，未设置的属性为null</p><h3 id="动态修改">动态修改</h3><h4 id="编写UserMapper-xml-7">编写UserMapper.xml</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;update id=<span class="string">"update"</span>&gt;</span><br><span class="line"> update Users</span><br><span class="line"> &lt;set&gt;</span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">"username!=null and username!=''"</span>&gt;</span><br><span class="line">        username=#{username}</span><br><span class="line">  &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">     &lt;<span class="keyword">if</span> test=<span class="string">"birthday!=null and birthday!=''"</span>&gt;</span><br><span class="line">        birthday=#{birthday}</span><br><span class="line">     &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">"sex!=null and sex!='' "</span>&gt;</span><br><span class="line">       sex = #{sex},</span><br><span class="line"> &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">"address!=null and address!='' "</span>&gt;</span><br><span class="line">        home_address = #{address}</span><br><span class="line"> &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"> &lt;/set&gt;</span><br><span class="line">     <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #{id};</span><br><span class="line">    &lt;/update&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="结果-6">结果</h4><p><img src="/2024/06/03/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5CSnipaste_2024-06-04_22-38-14.png" alt=""></p><p>只针对对象设置的属性进行修改，未设置的属性不会改变</p><h2 id="删除-批量删除">删除/批量删除</h2><h3 id="删除">删除</h3><h4 id="编写UserMapper接口-8">编写UserMapper接口</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Integer <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="编写UserMapper-xml-8">编写UserMapper.xml</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;delete id=<span class="string">"delete"</span>&gt;</span><br><span class="line">    delete from users where id=#{id}</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="编写测试代码-8">编写测试代码</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">Testdelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="comment">//加载核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行sql语句</span></span><br><span class="line">    <span class="comment">//获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> mapper.delete(<span class="number">2</span>);</span><br><span class="line">    System.out.println(num);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="结果-7">结果</h4><p><img src="/2024/06/03/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5CSnipaste_2024-06-04_22-46-00.png" alt=""></p><h3 id="批量删除">批量删除</h3><h4 id="编写UserMapper接口-9">编写UserMapper接口</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Integer <span class="title function_">deletes</span><span class="params">(<span class="meta">@Param("ids")</span> <span class="type">int</span>[] ids)</span>;<span class="comment">//@Param("ids")为方法参数名,SQL语句中应该使用的名字是",与UserMapper.xmlz中collection保持一致，若不添加@param注解默认参数名为array，添加可增加可读性</span></span><br></pre></td></tr></tbody></table></figure><h4 id="编写UserMapper-xml-9">编写UserMapper.xml</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;delete id=<span class="string">"deletes"</span>&gt;</span><br><span class="line">        delete from users</span><br><span class="line">        where id in</span><br><span class="line">        &lt;foreach collection=<span class="string">"ids"</span> item=<span class="string">"id"</span> separator=<span class="string">","</span> open=<span class="string">"("</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">            #{id}</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></tbody></table></figure><p>foreach----动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）   ，<em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符</p><ul><li>collection=“ids”：指定要遍历的集合，这里命名为ids。</li><li>​    item=“id”：指定遍历时每个元素的变量名，这里命名为id。</li><li>​    separator=“,”：指定遍历完成后各个元素之间的分隔符，这里使用逗号（,）作为分隔符。</li><li>​    open=“(”：指定遍历结果的起始符号，这里使用左括号（(）作为起始符号。</li><li>​    close=“)”：指定遍历结果的结束符号，这里使用右括号（)）作为结束符号。</li></ul><h4 id="编写测试代码-9">编写测试代码</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">Testdeletes</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="comment">//加载核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行sql语句</span></span><br><span class="line">    <span class="comment">//获取UserMapper接口的代理对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">int</span> ids[] = {<span class="number">1</span>,<span class="number">3</span>};</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> mapper.deletes(ids);</span><br><span class="line">    System.out.println(num);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="结果-8">结果</h4><p><img src="/2024/06/03/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5CSnipaste_2024-06-04_22-53-13.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2024/06/03/SpringBoot/"/>
      <url>/2024/06/03/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot</h1><p>视频链接：</p><blockquote><p>【黑马程序员SpringBoot3+Vue3全套视频教程，springboot+vue企业级全栈开发从基础、实战到面试一套通关】<a href="https://www.bilibili.com/video/BV14z4y1N7pg?p=20&amp;vd_source=12bdb5b78bd5d1c45cab173f3aad839b">https://www.bilibili.com/video/BV14z4y1N7pg?p=20&amp;vd_source=12bdb5b78bd5d1c45cab173f3aad839b</a></p></blockquote><h2 id="概述">概述</h2><p>​    SpringBoot 是 Spring 提供的一个子项目，用于快速构建 Spring 应用程序</p><p><img src="/2024/06/03/SpringBoot/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5Cimage-20240614100440678.png" alt="image-20240614100440678"></p><ol><li><p><strong>Spring Framework（核心功能）</strong>：</p><ul><li>提供依赖注入、事务管理、Web应用、数据访问等核心支持。</li></ul></li><li><p><strong>Spring Data（数据存取）</strong>：</p><ul><li>提供一致的方法来访问数据，包括关系型、非关系型、映射化数据等。</li></ul></li><li><p><strong>Spring Security（认证授权）</strong>：</p><ul><li>通过全面且可扩展的认证和授权功能来保护应用程序。</li></ul></li><li><p><strong>Spring AMQP（消息传递集成）</strong>：</p><ul><li>应用于基于AMQP协议的消息传递解决方案的开发。</li></ul></li><li><p><strong>Spring Cloud（服务构建）</strong>：</p><ul><li>提供用于分布式系统中常见模式的工具，适用于构建和管理微服务</li></ul></li><li><p><strong>Spring Boot(项目构建)：</strong></p></li></ol><ul><li>提供了一种有见解的方式来构建Spring应用程序，使其尽可能简单。</li></ul><h2 id="特性">特性</h2><ol><li><p>起步依赖</p><p>​本质上就是一个 Maven 坐标，整合了完成一个功能需要的所有坐标</p></li><li><p>自动配置</p><p>​遵循约定大于配置的原则，当启动应用程序时，一些bean对象会自动注入到IoC容器中，无需手动声明，从而简化了开发</p></li><li><p>其他特性</p><ul><li><p>内嵌的 Tomcat 、 Jetty （无需部署 WAR 文件）</p></li><li><p>外部化配置</p></li><li><p>不需要 XML 配置 (properties/yml)</p></li></ul></li></ol><h2 id="配置文件格式">配置文件格式</h2><ul><li><p><code>application.properties</code></p><p>：这是一个经典的Spring Boot配置文件，使用简单的key=value格式来定义属性。例如：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">server.port=<span class="number">8080</span></span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/mydb</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=<span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><code>application.yml</code>（推荐）</p><p>：这是另一种常见的配置文件格式，使用YAML语法来组织属性。它支持更复杂的数据结构和多行值。，它更加简洁，层次分明，支持列表和复杂对象。例如：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8080</span></span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    org.springframework: INFO</span><br></pre></td></tr></tbody></table></figure></li></ul><p>配置文件优先级：<strong>application.properties</strong>&gt; <strong>application.yml</strong></p><h2 id="YAML-配置书写规则">YAML 配置书写规则</h2><ol><li><strong>缩进表示层级关系</strong>：使用空格进行缩进，不能使用Tab键。</li><li><strong>大小写敏感</strong>：键值对中的键是大小写敏感的。</li><li><strong>使用缩进表示列表</strong>：列表成员使用"-"加一个空格开始。</li><li><strong>键值对</strong>：使用冒号加一个空格（<code>key: value</code>）区分键和值。</li><li><strong>数据类型</strong>：支持字符串、整数、浮点数、布尔值、日期、时间、列表和字典等</li></ol><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一个YAML的注释</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Zhang</span> <span class="string">San</span>  <span class="comment"># 字符串</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">30</span>          <span class="comment"># 整数</span></span><br><span class="line"><span class="attr">married:</span> <span class="literal">true</span>    <span class="comment"># 布尔值</span></span><br><span class="line"><span class="attr">children:</span>       <span class="comment"># 列表</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Li</span> <span class="string">Si</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Wang</span> <span class="string">Wu</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">7</span></span><br><span class="line"><span class="attr">address:</span>        <span class="comment"># 字典</span></span><br><span class="line">  <span class="attr">city:</span> <span class="string">Beijing</span></span><br><span class="line">  <span class="attr">street:</span> <span class="string">Wangfujing</span></span><br></pre></td></tr></tbody></table></figure><h2 id="YAML-配置获取方式">YAML 配置获取方式</h2><p>假设 <code>application.yml</code> 中有以下配置：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">myapp:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">MyApp</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-使用-Value-键名">1. 使用 <code>@Value("${键名}")</code></h3><p><code>@Value</code> 注解允许直接将属性值注入到Spring组件中，通过指定键名来获取对应的配置值。它适合用于获取单个属性值或者少量的属性值。</p><p><strong>示例用法：</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${myapp.name}")</span></span><br><span class="line">    <span class="keyword">private</span> String appName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${myapp.version}")</span></span><br><span class="line">    <span class="keyword">private</span> String appVersion;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayAppInfo</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Application Name: "</span> + appName);</span><br><span class="line">        System.out.println(<span class="string">"Application Version: "</span> + appVersion);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的例子中，<code>@Value("${myapp.name}")</code> 和 <code>@Value("${myapp.version}")</code> 分别获取了 <code>application.yml</code> 中 <code>myapp.name</code> 和 <code>myapp.version</code> 的属性值。</p><h3 id="2-使用-ConfigurationProperties-prefix-前缀">2. 使用 <code>@ConfigurationProperties(prefix="前缀")</code></h3><p><code>@ConfigurationProperties</code> 注解则更适合用于将一组相关的配置属性绑定到一个Java Bean上。它通常用于组织和管理多个配置属性，特别是在配置较复杂的场景下更有用。</p><p><strong>示例用法：</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "myapp")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAppProperties</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters and setters</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayAppInfo</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Application Name: "</span> + name);</span><br><span class="line">        System.out.println(<span class="string">"Application Version: "</span> + version);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>@Value</strong> 适合获取少量的配置值或者动态变化的属性。</li><li><strong>@ConfigurationProperties</strong> 更适合管理和组织大量的配置属性，并且可以通过将它们绑定到一个专门的Java Bean 上来实现类型安全的配置属性访问。</li></ul><h2 id="Mybatis整合">Mybatis整合</h2><p>SpringBoot整合Mybatis，参见链接后端代码实现部分</p><blockquote><p><a href="https://blog.csdn.net/2201_76122930/article/details/139610223?spm=1001.2014.3001.5501">SpringBoot+Vue实现增删改查-CSDN博客</a></p></blockquote><h2 id="Bean管理">Bean管理</h2><h3 id="Bean扫描">Bean扫描</h3><h4 id="1-XML配置方式">1.XML配置方式</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>&lt;context:component-scan&gt;</code> 标签用于指定Spring需要扫描的基础包路径（base-package）。在这个例子中，Spring将扫描 <code>com.itheima</code> 包及其子包，寻找带有特定注解的类，并将它们注册为Spring的Bean。</li></ul><h4 id="2-注解配置方式">2.注解配置方式</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = "com.itheima")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> {</span><br><span class="line">    <span class="comment">// 配置类，可以在这里添加其他配置</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>@ComponentScan(basePackages = "com.itheima")</code> 注解放在配置类（通常是带有 <code>@Configuration</code> 注解的类）上，告诉Spring在 <code>com.itheima</code> 包及其子包中寻找带有特定注解的类，并注册它们为Spring的Bean。</li></ul><h4 id="SpringBootApplication注解">@SpringBootApplication注解</h4><p>SpringBoot 默认扫描启动类所在的包及其子包</p><p><img src="/2024/06/03/SpringBoot/%E5%9B%BE%E7%89%87/image-20240614153201403.png" alt="image-20240614153201403"></p><hr><p><img src="/2024/06/03/SpringBoot/%E5%9B%BE%E7%89%87/image-20240614154914323.png" alt="image-20240614154914323"></p><p><code>@SpringBootApplication</code> 是 Spring Boot 提供的一个组合注解，它包含了以下三个注解的功能：</p><ol><li><code>@SpringBootConfiguration</code>：表明该类是一个配置类，它可以替代 XML 配置文件。它实际上是 <code>@Configuration</code> 注解的一个特殊类型。</li><li><code>@ComponentScan</code>：用于启用组件扫描，寻找带有 <code>@Component</code> 注解的类。如果没有显式地指定 <code>basePackages</code> 参数，它将会扫描当前类所在的包及其子包。</li><li><code>@EnableAutoConfiguration</code>：开启自动配置功能，Spring Boot 将根据项目的依赖性和配置自动配置应用程序。</li></ol><h3 id="Bean注册">Bean注册</h3><p><img src="/2024/06/03/SpringBoot/%E5%9B%BE%E7%89%87/image-20240614161027835.png" alt="image-20240614161027835"></p><p>如果要注册的 bean 对象来自于第三方（不是自定义的），是无法用 @Component 及衍生注解声明 bean 的，通常可以通过以下方式来实现：</p><h4 id="1-使用-Import">1. 使用 <code>@Import</code></h4><ul><li>**** 在配置类中，你可以使用 <code>@Bean</code> 注解来显式地定义一个方法，该方法创建并返回第三方类的实例。如果第三方库提供了专门的配置类，你可以直接导入该配置类来注册 Bean。</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThirdPartyService <span class="title function_">thirdPartyService</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThirdPartyService</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>通过 <code>@Import</code> 注解，你可以导入一个或多个配置类，这些配置类中可以包含 <code>@Bean</code> 注解方法，用于注册第三方 Bean。</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Import(AppConfig.class)</span><span class="comment">//多个配置类导入：@Import(AppConfig1.class，AppConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-实现-ImportSelector-接口">2.实现 <code>ImportSelector</code> 接口</h4><p>如果需要根据条件或其他因素动态地选择性地导入某些配置类或 Bean，可以实现 <code>ImportSelector</code> 接口。这允许你根据运行时的条件来决定哪些配置类应该被导入。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">java解释<span class="keyword">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) {</span><br><span class="line">        <span class="comment">// Return an array of class names to import</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] {ThirdPartyConfig.class.getName()};</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后在主配置类中使用 <code>@Import</code> 导入 <code>MyImportSelector</code> 实现类：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">java解释<span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Import({MyImportSelector.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootRegistApplication</span> {</span><br><span class="line">    <span class="comment">// Application class body</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="注册条件">注册条件</h3><p><img src="/2024/06/03/SpringBoot/%E5%9B%BE%E7%89%87/image-20240614165701026.png" alt="image-20240614165701026"></p><h4 id="1-ConditionalOnProperty">1.<strong>@ConditionalOnProperty</strong></h4><ul><li><strong>说明</strong>：当配置文件中存在指定的属性时，才会声明该 Bean。</li><li><strong>示例</strong>：假设你希望某个 Bean 在配置文件中设置了特定属性 <code>myapp.feature.enabled=true</code> 时才被注册，</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = "myapp.feature.enabled", havingValue = "true")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFeatureBean</span> {</span><br><span class="line">    <span class="comment">// Bean definition</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><code>@ConditionalOnProperty</code> 注解有两个主要的属性：</p><ul><li><code>name</code>：指定要检查的配置属性名。</li><li><code>havingValue</code>：指定配置属性应该具有的值。如果属性的值与 <code>havingValue</code> 指定的值匹配，那么条件成立，Bean 将会被创建。</li></ul><h4 id="2-ConditionalOnMissingBean">2.<strong>@ConditionalOnMissingBean</strong></h4><ul><li><p><strong>说明</strong>：当当前上下文中不存在指定类型的 Bean 时，才会声明该 Bean。</p></li><li><p>示例</p><p>：假设你希望确保在上下文中只有没有特定类型的 Bean 时才注册某个 Bean</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(MyService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFallbackService</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="3-ConditionalOnClass">3.<strong>@ConditionalOnClass</strong></h4><ul><li><p><strong>说明</strong>：当当前环境中存在指定的类时，才会声明该 Bean。</p></li><li><p>示例：假设你的应用程序在运行时需要依赖于某个第三方库的类才能正常工作，<code>ThirdPartyIntegration</code> Bean 只有在类路径中存在 <code>com.example.ThirdPartyClass</code> 类时才会被注册。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(name = "com.example.ThirdPartyClass")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThirdPartyIntegration</span> {</span><br><span class="line">    <span class="comment">// Bean definition</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="自动配置">自动配置</h2><p>遵循约定大约配置的原则，在 boot 程序启动后，起步依赖中的一些 bean 对象会自动注入到 ioc 容器。程序引入 spring-boot-starter-web 起步依赖，启动后，会自动往 ioc 容器中注入 DispatcherServlet</p><p><img src="/2024/06/03/SpringBoot/%E5%9B%BE%E7%89%87/image-20240614171159735.png" alt="image-20240614171159735"></p><h4 id="SpringBoot-自动配置原理">SpringBoot 自动配置原理</h4><p><img src="/2024/06/03/SpringBoot/%E5%9B%BE%E7%89%87/image-20240614171302191.png" alt="image-20240614171302191"></p><h4 id="自定义-starter">自定义 starter</h4><ol><li>自定义 starter  需求：自定义 mybatis 的 starter 需求</li><li>创建 dmybatis-spring-boot-autoconfigure 模块，提供自动配置功能，并自定义配置文件 META-INF/spring/xxx.imports</li><li>创建 dmybatis-spring-boot-starter 模块，在 starter 中引入自动配置模块</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端实战篇</title>
      <link href="/2024/06/03/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%E7%AF%87/"/>
      <url>/2024/06/03/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1>前端实战篇</h1><h2 id="前置知识">前置知识</h2><p>前端技术框架：Vue3+Element-Plus</p><p><a href="https://www.bilibili.com/video/BV1Tt4y1772f/">Java程序员用学前端么？java开发所需的前端技术全教程（HTML/CSS/js/vue2/vue3/react）_哔哩哔哩_bilibili</a>  P1~P38</p><ul><li>HTML ：负责网页的结构（标签 : form/table/a/div/span ）。</li><li>CSS ：负责网页的表现（样式 : color/font/background/width/height ）。</li><li>JavaScript ：负责网页的行为（交互效果）。</li></ul><h2 id="JavaScript-导入导出">JavaScript- 导入导出</h2><h3 id="全部导入">全部导入</h3><p><img src="/2024/06/03/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%E7%AF%87/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5Cimage-20240624101315910.png" alt="image-20240624101315910"></p><h3 id="按需导入">按需导入</h3><ol><li></li></ol><p><img src="/2024/06/03/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%E7%AF%87/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5Cimage-20240624101327495.png" alt="image-20240624101327495"></p><ol start="2"><li></li></ol><p><img src="/2024/06/03/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%E7%AF%87/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5Cimage-20240624101411547.png" alt="image-20240624101411547"></p><h3 id="默认导出">默认导出</h3><p><img src="/2024/06/03/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%E7%AF%87/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5Cimage-20240624101507726.png" alt="image-20240624101507726"></p><p><strong>小技巧：<strong>导入导出的时候，可以使用</strong>as</strong>重命名</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2024/06/03/java%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/06/03/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1>java基础</h1><p>Java开发规范参见<a href="https://developer.aliyun.com/ebook/394/read?spm=a2c6h.26392459.ebook-detail.4.5e6631048vvbux">Java开发手册（嵩山版）免费在线阅读_藏经阁-阿里云开发者社区 (aliyun.com)</a></p><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/index.html">概述 （Java SE 17 &amp; JDK 17） (oracle.com)</a></p><h2 id="注释">注释</h2><ul><li><h5 id="单行注释">单行注释</h5><p>//             快捷键： ctrl + /</p></li><li><h5 id="多行注释">多行注释</h5><p>/*  */       快捷键：ctrl + shift + /</p></li><li><p>文档注释</p><p>/**   */      <a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html">javadoc-Java API 文档生成器 (oracle.com)</a></p><hr></li></ul><h2 id="标识符">标识符</h2><p><em><strong>java中标识符是为方法、变量或其他用户定义项所定义的名称。</strong></em></p><p>标识符由数字(0 ~ 9)和字母(az和AZ)、美元符号($)、下划线(__)以及Unicode字符集中符号大于0xC0的所有符号组合构成(各符号之间没有空格)</p><ul><li><strong>标识符的第一个符号为字母、下划线和美元符号，后面可以是任何字母、数字、美元符号或下划线</strong></li><li><strong>Java区分大小写</strong>，</li><li><strong>不能使用数字开头</strong></li><li><strong>不能使用任何Java关键字作为标识符</strong>，标识符可以包含关键字，但不能与关键字重名</li><li><strong>不能赋予标识符任何标准的方法名</strong></li></ul><hr><p>标识符分为两类，分别为关键字和用户自定义标识符。</p><ol><li><p>关键字是有特殊含义的标识符，如 true、false 表示逻辑的真假。</p></li><li><p>用户自定义标识符是由用户按标识符构成规则生成的非保留字的标识符，如 abc 就是一个标识符。</p></li></ol><h2 id="关键字">关键字</h2><p><em><strong>关键字（或者保留字）是对编译器有特殊意义的固定单词，不能在程序中做其他目的使用。关键字具有专门的意义和用途，和自定义的标识符不同，不能当作一般的标识符来使用</strong></em></p><p>Java 的关键字对 Java 编译器有特殊的意义，它们用来表示一种数据类型，或者表示程序的结构等。保留字是为 Java 预留的关键字，它们虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字</p><hr><p>Java 语言目前定义了 51 个关键字，这些关键字不能作为变量名、类名和方法名来使用。以下对这些关键字进行了分类。</p><ol><li><p>数据类型：boolean、int、long、short、byte、float、double、char、class、interface</p></li><li><p>流程控制：if、else、do、while、for、switch、case、default、break、continue、return、try、catch、finally</p></li><li><p>修饰符：public、protected、private、final、void、static、strict、abstract、transient、synchronized、volatile、native</p></li><li><p>动作：package、import、throw、throws、extends、implements、this、supper、instanceof、new</p></li><li><p>保留字：true、false、null、goto、const</p></li></ol><h2 id="数据类型">数据类型</h2><ul><li><h5 id="强类型语言">强类型语言</h5><p>​要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用</p></li><li><h5 id="弱类型语言">弱类型语言</h5></li><li><h5 id="Java的数据类型分为两类">Java的数据类型分为两类</h5><ul><li>基本数据类型</li><li>引用类型</li></ul></li></ul><p><img src="/2024/06/03/java%E5%9F%BA%E7%A1%80/D:%5CUsers%5C30638%5Cmyblog%5Csource%5Cimages%5Cjava%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8B.png" alt="java语言类型"></p><p>注：    *Long类型要在数字后面加个L</p><p>​   *Float类型要在数字后面加个F</p><p>​           *Boolean类型占一位，即1bit</p><h3 id="字节">字节</h3><ul><li>位(bit)：是计算机内部数据储存的最小单位，11001100是一个八位二进制数</li><li>字节(byte)：是计算机中数据处理的基本单位，习惯上用大写B来表示</li><li>1B(byte，字节) = 8bit(位)</li><li>字符：是指计算机中使用的字母、数字、字和符号</li><li>1bit表示1位</li><li>1Byte表示一个字节 1B = 8b</li><li>1024B = 1KB</li><li>1024KB = 1M</li><li>1024M = 1G</li></ul><h2 id="数据转换">数据转换</h2><h3 id="数据类型的级别-优先级-大小排序：">数据类型的级别/优先级/大小排序：</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">低 --------------------------------------------------&gt; 高</span><br><span class="line"><span class="type">byte</span> -&gt; <span class="type">short</span> -&gt; <span class="type">char</span> -&gt; <span class="type">int</span> -&gt; <span class="type">long</span> -&gt; <span class="type">float</span> -&gt; <span class="type">double</span></span><br></pre></td></tr></tbody></table></figure><h3 id="强制类型转换-优先级高-低">强制类型转换(优先级高 -&gt; 低)</h3><p><strong>强制类型转换</strong>格式：(类型)变量名，比如：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//强制类型转换  (类型)变量名  优先级高 -&gt; 低</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;<span class="comment">//内存溢出问题</span></span><br><span class="line">System.out.println(i);<span class="comment">//128</span></span><br><span class="line">System.out.println(b);<span class="comment">//-128</span></span><br><span class="line"><span class="comment">//由于`byte`数据类型的范围是`-128 ~ 127`，要转换的这个数i超过了`byte`的范围，这也是为什么转换出来的是`-128`</span></span><br></pre></td></tr></tbody></table></figure><h3 id="自动类型转换-优先级低-高">自动类型转换(优先级低 -&gt; 高)</h3><p><strong>自动类型转换</strong>不需要添加任何东西可以直接转换，拿上面的<code>byte b</code>举例：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//自动类型转换  优先级低 -&gt; 高</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> i;</span><br><span class="line">System.out.println(d);<span class="comment">//128.0</span></span><br></pre></td></tr></tbody></table></figure><h2 id="变量">变量</h2><ul><li>局部变量—必须声明和初始化值（方法内）</li><li>实列变量— 不自行初始化，则为变量类型默认值，布尔值默认是false，除了基本类型。其余默认值都是null（类里面方法外面，从属于对象）</li><li>类变量（static）</li></ul><h2 id="常量">常量</h2><ul><li><p>关键词—final</p></li><li><p>常量字符大写</p><p>例：static final double PI = 3.14</p></li></ul><h2 id="运算符">运算符</h2><p><img src="/2024/06/03/java%E5%9F%BA%E7%A1%80/D:%5CUsers%5C30638%5Cmyblog%5Csource%5Cimages%5Cef647d17de5644cb8c0660b9e285bcc1.png" alt=""></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++；<span class="comment">//先赋值，再加1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ++a；<span class="comment">//先加1，再赋值</span></span><br></pre></td></tr></tbody></table></figure><hr><p>Math类：</p><p>幂运算：Math.pow(3,2)  //3*2=9</p><hr><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">""</span>+a+b);<span class="comment">//1020</span></span><br><span class="line">System.out.println(a+b+<span class="string">""</span>);<span class="comment">//30</span></span><br></pre></td></tr></tbody></table></figure><h2 id="包机制">包机制</h2><p>公司域名倒置作为包名</p><p>导入一个包下的所有类 —import com.kuang.base.*;</p><h2 id="用户交互Scanner">用户交互Scanner</h2><p>Next()</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="comment">//创建一个扫描对象，用于接收键盘数据</span></span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">"使用next方式接收："</span>);</span><br><span class="line">    <span class="comment">//判断用户有没有输入字符串</span></span><br><span class="line">    <span class="keyword">if</span> (scanner.hasNext()) {</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        System.out.println(<span class="string">"输出的内容为："</span> + str);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//凡是属于IO流的类如果不关闭会一直占用资源</span></span><br><span class="line">    scanner.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p>nextLine()</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">"使用nextLine方式接收："</span>);</span><br><span class="line">    <span class="comment">//判断用户有没有输入字符串</span></span><br><span class="line">    <span class="keyword">if</span> (scanner.hasNextLine()) {</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"输出的内容为："</span> + str);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//凡是属于IO流的类如果不关闭会一直占用资源</span></span><br><span class="line">    scanner.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>next()<ul><li>一定要读取到有效字符才可以结束输入</li><li>对输入有效字符之前遇到的空白，next()方法会将其去掉</li><li>只有输入有效字符后才将其后面输入的空白作为结束符</li><li>next()不能得到带有空格的字符串</li></ul></li><li>nextLine()<ul><li>以Enter作为结束符，即返回输入回车之前所有的字符</li><li>nextLine()可以获取空白</li></ul></li></ul><blockquote><p>更多Scanner用法参见[Java 基础——Scanner 类](<a href="https://blog.csdn.net/weixin_43004044/article/details/131867601">Java 基础——Scanner 类_java scanner-CSDN博客</a>)</p></blockquote><h2 id="顺序结构">顺序结构</h2><p>按照顺序一行一一行的执行</p><h2 id="选择结构">选择结构</h2><ul><li>if单选择结构----if</li><li>if双选择结构-----if…else</li><li>if多选择结构-----if…else if…else if…else</li><li>嵌套if结构</li><li>switch多选择结构</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (变量或表达式的值) {</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 当变量或表达式的值等于值1时执行的代码</span></span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 跳出 switch 语句</span></span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 当变量或表达式的值等于值2时执行的代码</span></span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 跳出 switch 语句</span></span><br><span class="line">    <span class="keyword">case</span> 值n:</span><br><span class="line">        <span class="comment">// 当变量或表达式的值等于值n时执行的代码</span></span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 跳出 switch 语句</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 当变量或表达式的值与上面任何一个 case 都不匹配时执行的代码</span></span><br><span class="line">        <span class="comment">// default 是可选的</span></span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 这里的 break 也可以省略，因为它是 switch 语句的最后一个语句</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="循环结构">循环结构</h2><ul><li><p>while循环</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) {</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>do while循环</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> {</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i++;</span><br><span class="line">} <span class="keyword">while</span> (i &lt; <span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>for循环</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">    System.out.println(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>增强for循环</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>};</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> number : numbers) {</span><br><span class="line">    System.out.println(number);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="break">break</h2><p><code>break</code> 关键字用于立即退出最内层的循环或者 <code>switch</code> 语句</p></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">for (int i = 0; i &lt; 10; i++) {</span><br><span class="line">    if (i == 5) {</span><br><span class="line">        break; // 当 i 等于 5 时，循环会提前结束</span><br><span class="line">    }</span><br><span class="line">    System.out.println(i);</span><br><span class="line">}</span><br><span class="line">// 输出：0 1 2 3 4</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="continue">continue</h2><p><code>continue</code> 关键字用于跳过当前循环的剩余部分</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">for (int i = 0; i &lt; 10; i++) {</span><br><span class="line">    if (i % 2 == 0) {</span><br><span class="line">        continue; // 跳过偶数</span><br><span class="line">    }</span><br><span class="line">    System.out.println(i);</span><br><span class="line">}</span><br><span class="line">// 输出：1 3 5 7 9</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>标签（Labels）</strong>：在 Java 中，标签可以与 <code>break</code> 和 <code>continue</code> 语句一起使用，用于跳出嵌套循环或者继续下一次迭代。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">outer: <span class="comment">// 标签</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) {</span><br><span class="line">        <span class="keyword">if</span> (i == j) {</span><br><span class="line">            <span class="keyword">continue</span> outer; <span class="comment">// 跳过当前外层循环的迭代</span></span><br><span class="line">        }</span><br><span class="line">        System.out.println(i + <span class="string">", "</span> + j);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="return">return</h2><p><code>return</code> 用于从函数中返回值并结束函数的执行。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">def <span class="title function_">find_first_even</span><span class="params">(numbers)</span>:</span><br><span class="line">    <span class="keyword">for</span> num in numbers:</span><br><span class="line">        <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> num  # 函数在返回第一个偶数后停止执行</span><br><span class="line">    <span class="keyword">return</span> None  # 如果没有偶数，返回 None</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span><span class="params">(find_first_even([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>])</span>)</span><br><span class="line"># 输出 <span class="number">8</span>，因为它是列表中的第一个偶数</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="方法">方法</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">修饰符 返回类型 方法名(参数类型 参数名) {</span><br><span class="line">    // 方法体</span><br><span class="line">    // ...</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="方法重载">方法重载</h3><p>方法重载，指在同一个类中存在多个同名的方法，但它们的参数列表不同。参数列表的不同可以体现在参数的数量、类型或者参数的顺序上。</p><h3 id="方法调用">方法调用</h3><ul><li><h4 id="静态方法（static）">静态方法（static）</h4><p>类名.方法名</p></li><li><h4 id="非静态方法">非静态方法</h4><p>​  实例化这个类----new Student()</p></li></ul><h3 id="形参和实参">形参和实参</h3><p>函数或方法定义时使用的参数称为形参，而在调用函数或方法时提供的参数称为实参。</p><h3 id="值传递和引用传递">值传递和引用传递</h3><p>在 Java 中，所有的参数传递都是按值传递的。这意味着不管是一个原始数据类型还是一个对象，传递的都是一个副本。但是，对于对象来说，这个副本是一个指向对象内存地址的引用，而不是对象本身的副本。因此，尽管 Java 中的对象传递在技术上来说是按值传递的，但是因为传递的是引用，所以它的行为更像是按引用传递。</p><h4 id="原始数据类型（Primitives）：">原始数据类型（Primitives）：</h4><p>Java 中的原始数据类型（如 int、float、double、byte、char 等）在传递给方法时是按值传递的。这意味着传递的是数据值的一个副本，而不是数据的内存地址。在方法内部对这个值的任何修改都不会影响到原始数据。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        changeValue(x);</span><br><span class="line">        System.out.println(x);  <span class="comment">// 输出：10，x 的值没有改变</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeValue</span><span class="params">(<span class="type">int</span> num)</span> {</span><br><span class="line">        num = <span class="number">20</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="对象（Objects）：">对象（Objects）：</h4><p>Java 中的对象传递的是对象引用的副本。这意味着，如果在方法内部改变了引用指向的对象的状态，那么原始对象也会受到影响，因为引用指向的是同一个对象。但是，如果在方法内部改变了引用本身，使其指向一个新的对象，那么原始引用不会改变。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello"</span>);</span><br><span class="line">        changeObject(sb);</span><br><span class="line">        System.out.println(sb);  <span class="comment">// 输出：HelloWorld，sb 对象的内容被改变了</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeObject</span><span class="params">(StringBuilder obj)</span> {</span><br><span class="line">        obj.append(<span class="string">"World"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="可变参数">可变参数</h2><p>在Java中，可变参数通过在参数类型后面加上三个连续的点（…）来表示，这种参数被称为“变长参数”。</p><p>一个方法只能指定一个可变参数，它必须是方法的最后一个参数，任何普通的参数必须在它之前声明</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarArgsExample</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用可变参数的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... numbers)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : numbers) {</span><br><span class="line">            sum += num;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 调用sum方法，传入不同数量的参数</span></span><br><span class="line">        System.out.println(sum());           <span class="comment">// 输出 0</span></span><br><span class="line">        System.out.println(sum(<span class="number">1</span>));          <span class="comment">// 输出 1</span></span><br><span class="line">        System.out.println(sum(<span class="number">1</span>, <span class="number">2</span>));       <span class="comment">// 输出 3</span></span><br><span class="line">        System.out.println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));    <span class="comment">// 输出 6</span></span><br><span class="line">        System.out.println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 输出 10</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="递归">递归</h2><p>递归是一种编程技巧，它允许一个函数或方法调用自身。递归通常用于解决可以分解为多个相似或更小问题的问题，特别是那些具有自然递归结构的问题，如树遍历、图形搜索、排序算法（如快速排序和归并排序）以及一些数学计算（如计算阶乘、斐波那契数列等）。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Factorial</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用递归计算阶乘</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="comment">// 递归基：0! = 1</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 递归调用：n! = n * (n-1)!</span></span><br><span class="line">            <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> factorial(<span class="number">5</span>); <span class="comment">// 计算5的阶乘</span></span><br><span class="line">        System.out.println(<span class="string">"5! = "</span> + result); <span class="comment">// 输出 5! = 120</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="数组">数组</h2><ul><li>数组是相同类型数据的有序集合</li><li>数组元素通过索引访问，数组索引从0开始</li><li>获取数组长度----arrays.length</li><li>数组长度是确定的，不可改变的，如果越界，报错ArrayIndexOutofBounds</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] nums ;<span class="comment">//int nums[]不推荐</span></span><br><span class="line">nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//等同于  int[] nums = new int[10];</span></span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//赋值 </span></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="内存分析">内存分析</h3><p><img src="/2024/06/03/java%E5%9F%BA%E7%A1%80/D:%5CUsers%5C30638%5Cmyblog%5Csource%5Cimages%5Cjava%E5%86%85%E5%AD%98.png" alt=""></p><h2 id="三种初始化">三种初始化</h2><ul><li><p>静态初始化</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>}; <span class="comment">// 静态初始化一个整型数组</span></span><br><span class="line">String[] words = {<span class="string">"Hello"</span>, <span class="string">"World"</span>}; <span class="comment">// 静态初始化一个字符串数组</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>动态初始化</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] dynamicNumbers = <span class="keyword">new</span> <span class="title class_">int</span>[size]; <span class="comment">// 动态初始化一个整型数组</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>默认初始化</p></li></ul><p>默认初始化发生在数组被声明但没有显式地赋予初始值时。在这种情况下，数组中的元素会被自动赋予该数据类型的默认值。</p><ul><li>整型数组的默认值是0。</li><li>浮点型数组的默认值是0.0。</li><li>char类型默认值是 ‘<strong>\u0000</strong>’</li><li>布尔型数组的默认值是false。</li><li>引用类型数组的默认值是null。</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] defaults = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]; <span class="comment">// 默认初始化一个整型数组</span></span><br><span class="line"><span class="comment">// 此时，defaults 数组中的元素自动被初始化为 {0, 0, 0, 0, 0}</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="数组的使用">数组的使用</h2><p>遍历数组</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 使用for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) {</span><br><span class="line">    System.out.println(numbers[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for-each循环 快捷键：numbers.for +enter</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> number : numbers) {</span><br><span class="line">    System.out.println(number);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="多维数组">多维数组</h2><h3 id="声明和初始化">声明和初始化</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个二维整型数组</span></span><br><span class="line"><span class="type">int</span>[][] matrix;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态初始化二维数组</span></span><br><span class="line">matrix = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>]; <span class="comment">// 3行4列的矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态初始化二维数组</span></span><br><span class="line"><span class="type">int</span>[][] staticMatrix = {</span><br><span class="line">    {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>},</span><br><span class="line">    {<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>},</span><br><span class="line">    {<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三维数组的声明和初始化</span></span><br><span class="line"><span class="type">int</span>[][][] threeDimensionalArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>][<span class="number">4</span>]; <span class="comment">// 2个3行4列的矩阵组成的数组</span></span><br></pre></td></tr></tbody></table></figure><h3 id="遍历多维数组">遍历多维数组</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历二维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[i].length; j++) {</span><br><span class="line">        System.out.print(matrix[i][j] + <span class="string">" "</span>);</span><br><span class="line">    }</span><br><span class="line">    System.out.println();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="数组的长度">数组的长度</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length; <span class="comment">// 获取行数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">cols</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length; <span class="comment">// 获取第一列的列数（假设所有行的列数相同）</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Arrays类">Arrays类</h2><h3 id="排序">排序</h3><ul><li><code>static void sort(int[] a)</code>: 对指定的整数数组进行排序。</li><li><code>static void sort(Object[] a)</code>: 根据元素的自然顺序对指定对象数组进行排序。</li><li><code>static &lt;T&gt; void sort(T[] a, Comparator&lt;? super T&gt; c)</code>: 根据指定比较器产生的顺序对指定对象数组进行排序。</li></ul><h3 id="搜索">搜索</h3><h5 id="—通过binarySearch方法对排好序的数组进行二分查找操作">—通过binarySearch方法对<strong>排好序</strong>的数组进行二分查找操作</h5><ul><li><code>static int binarySearch(int[] a, int key)</code>: 在指定的整数数组中搜索指定的值。</li><li><code>static int binarySearch(Object[] a, Object key)</code>: 在指定的对象数组中搜索指定的值。</li><li><code>static int binarySearch(Object[] a, Object key, Comparator&lt;? super T&gt; c)</code>: 根据指定比较器搜索指定对象数组中的指定值。</li></ul><h3 id="填充">填充</h3><ul><li><code>static void fill(int[] a, int val)</code>: 将指定的整数值分配给指定整数数组的每个元素。</li><li><code>static void fill(Object[] a, Object val)</code>: 将指定的对象引用分配给指定对象数组的每个元素。</li><li><code>static void fill(int[] a, int fromIndex, int toIndex, int val) ；</code>指定开始和结束索引的填充</li></ul><h3 id="复制">复制</h3><ul><li><code>static int[] copyOf(int[] original, int newLength)</code>: 复制指定的数组，截断或填充空位（如有必要），以使副本具有指定的长度。</li><li><code>static &lt;T&gt; T[] copyOf(T[] original, int newLength)</code>: 复制指定的数组，截断或填充空位（如有必要），以使副本具有指定的长度。</li></ul><h3 id="比较">比较</h3><ul><li><code>static boolean equals(int[] a, int[] a2)</code>: 如果两个指定的整数数组相等，则返回 <code>true</code>。</li><li><code>static boolean equals(Object[] a, Object[] a2)</code>: 如果两个指定的对象数组相等，则返回 <code>true</code>。</li></ul><h3 id="转换为字符串">转换为字符串</h3><ul><li><code>static String toString(int[] a)</code>: 返回一个表示指定数组内容的字符串。</li><li><code>static String toString(Object[] a)</code>: 返回一个表示指定数组内容的字符串。</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraysExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] numbers = {<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>};</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序数组</span></span><br><span class="line">        Arrays.sort(numbers);</span><br><span class="line">        System.out.println(Arrays.toString(numbers)); <span class="comment">// 输出排序后的数组</span></span><br><span class="line">        <span class="comment">// 结果: [1, 1, 3, 4, 5, 9]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 搜索元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"Index of 5: "</span> + index); <span class="comment">// 输出5的索引</span></span><br><span class="line">             <span class="comment">// 结果: Index of 5: 4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 填充数组</span></span><br><span class="line">        Arrays.fill(numbers, <span class="number">0</span>);</span><br><span class="line">        System.out.println(Arrays.toString(numbers)); <span class="comment">// 输出填充后的数组</span></span><br><span class="line">            <span class="comment">// 结果: [0, 0, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 复制数组</span></span><br><span class="line">        <span class="type">int</span>[] copiedNumbers = Arrays.copyOf(numbers, <span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.toString(copiedNumbers)); <span class="comment">// 输出复制后的数组</span></span><br><span class="line">           <span class="comment">// 结果: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较数组</span></span><br><span class="line">        <span class="type">int</span>[] numbers2 = {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>};</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">areEqual</span> <span class="operator">=</span> Arrays.equals(numbers, numbers2);</span><br><span class="line">        System.out.println(<span class="string">"Are arrays equal? "</span> + areEqual); <span class="comment">// 输出数组比较结果</span></span><br><span class="line">         <span class="comment">// 结果: Are arrays equal? false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="冒泡排序">冒泡排序</h2><h3 id="算法步骤">算法步骤</h3><ol><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个。</li><li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后已经排序好的元素。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h3 id="代码示例">代码示例</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] numbers = {<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">90</span>};</span><br><span class="line">        System.out.println(Arrays.toString(bubbleSort(numbers)));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] bubbleSort(<span class="type">int</span>[] arr) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) {</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) {</span><br><span class="line">                    <span class="comment">// 交换 arr[j] 和 arr[j+1]</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="literal">false</span>){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="稀疏数组">稀疏数组</h2><p><img src="/2024/06/03/java%E5%9F%BA%E7%A1%80/D:%5CUsers%5C30638%5Cmyblog%5Csource%5Cimages%5C%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5.png" alt=""></p><h2 id="面向对象">面向对象</h2><p>面向对象编程的本质就是：以类的方式组织代码，以对象的组织（封装）数据</p><ul><li>抽象</li><li>三大特性<ul><li>封装</li><li>继承</li><li>多态</li></ul></li></ul><h3 id="类与对象的关系：">类与对象的关系：</h3><ul><li>类是对象的模板，对象是类的实例。</li><li>类定义了对象的结构和行为，而对象则实现了这些定义，并具有具体的数据。</li></ul><h2 id="构造器">构造器</h2><h3 id="构造器的特点：">构造器的特点：</h3><ul><li>构造器的名称必须与类名完全相同。</li><li>构造器没有返回类型，也不可以使用 <code>void</code> 关键字。</li><li>构造器在对象创建时自动调用，且只调用一次。</li><li>构造器可以重载，即可以有多个构造器，它们之间在参数数量或类型上有所不同。</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认无参构造器，没有参数，将 `name` 初始化为 “Unknown”，`age` 初始化为 0。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> {</span><br><span class="line">        name = <span class="string">"Unknown"</span>;</span><br><span class="line">        age = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的构造器，用于同时初始化 `name` 和 `age`。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String n, <span class="type">int</span> a)</span> {</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器的重载，用于初始化 `name`，并将 `age` 默认设置为 18。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String n)</span> {</span><br><span class="line">        name = n;</span><br><span class="line">        age = <span class="number">18</span>; <span class="comment">// 默认年龄为18岁</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"My name is "</span> + name + <span class="string">" and I am "</span> + age + <span class="string">" years old."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="注意：一旦定义有参构造，无参构造必须显示定义">注意：一旦定义有参构造，无参构造必须显示定义</h5><h2 id="封装">封装</h2><p>-----高内聚低耦合</p><p>属性私有，方法公有</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 私有属性，外部不能直接访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;     <span class="comment">// 私有属性，外部不能直接访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法，用于获取名字</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法，用于设置名字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法，用于获取年龄</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法，用于设置年龄</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> {</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">0</span>) { <span class="comment">// 在设置年龄前进行校验</span></span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"年龄不能为负数"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="继承">继承</h2><p>快捷键：Ctrl +H---------查看继承关系</p><p>在Java在所有类，都默认直接或间接的继承Object类</p><ul><li>继承本质是对某一批类的抽象</li><li>extends关键词，子类对父类的扩展</li><li>Java中只有单继承，没有多继承</li><li>子类和父类之间，具有“is a”关系</li></ul><h2 id="super详解">super详解</h2><ul><li><code>this</code> 用于引用当前对象，可以用来访问当前对象的属性和方法，也可以用来调用当前类的构造器。</li><li><code>super</code> 用于引用父类，可以用来访问父类的属性和方法，也可以用来调用父类的构造器。</li></ul><p>调用父类构造器，super()必须要在第一行</p><p>相关详细内容参见</p><blockquote><p><a href="https://blog.csdn.net/wwwwwww31311/article/details/113281877">this和super(由浅入深、超详细，建议收藏)_super和this-CSDN博客</a></p></blockquote><h2 id="方法重写">方法重写</h2><p>方法重写是面向对象多态性的一个重要方面，它允许子类以特定的方式实现父类的行为，从而提供更丰富的功能和灵活性。</p><h3 id="方法重写的条件：">方法重写的条件：</h3><ol><li><strong>继承关系</strong>：子类必须继承自父类。</li><li><strong>方法签名</strong>：子类中的方法必须与父类中被重写的方法具有相同的方法名和参数列表（方法签名）。</li><li><strong>返回类型</strong>：子类中的方法的返回类型必须与父类中被重写的方法的返回类型相同，或者是被重写方法返回类型的子类型（covariant return type）。</li><li><strong>访问权限</strong>：子类中方法的访问权限不能比父类中被重写的方法的访问权限更低（例如，如果父类方法是<code>public</code>，子类方法不能是<code>private</code>）。</li><li><strong>静态与非静态</strong>：子类重写的方法必须与父类中被重写的方法具有相同的静态或非静态属性（不能将父类的实例方法重写为静态方法，反之亦然）。</li></ol><p>静态方法-----与方法重写无关</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Animal makes a sound"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> {</span><br><span class="line">    <span class="comment">// 这不是重写，而是方法隐藏</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> {<span class="comment">//静态方法</span></span><br><span class="line">        System.out.println(<span class="string">"Dog barks"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        Animal.makeSound(); <span class="comment">// 输出 "Animal makes a sound"</span></span><br><span class="line">        Dog.makeSound(); <span class="comment">// 输出 "Dog barks"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//方法调用只与左边静态类有关</span></span><br></pre></td></tr></tbody></table></figure><p>非静态方法------重写</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Animal makes a sound"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> {</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//方法重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Dog barks"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myAnimal01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        myAnimal01.makeSound(); <span class="comment">// 输出 "Animal makes a sound"</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        myDog.makeSound(); <span class="comment">// 输出 "Dog barks"</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myAnimal02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        myAnimal02.makeSound(); <span class="comment">// 输出 "Dog barks"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//方法重写，看new的对象</span></span><br></pre></td></tr></tbody></table></figure><h2 id="多态">多态</h2><p>示例1：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Dog</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="type">Animal</span> <span class="variable">myAnimal02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br></pre></td></tr></tbody></table></figure><ul><li>​子类能调用的方法都是自己的或者继承父类的</li><li>​父类可以指向子类类型，但不能调用子类的独有方法;调用子类独有方法，可将父类型强转为子类型</li></ul><p>示例2：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Animal makes a sound"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Dog barks"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Cat meows"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myAnimal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myAnimal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        myAnimal1.makeSound(); <span class="comment">// 输出 "Dog barks"</span></span><br><span class="line">        myAnimal2.makeSound(); <span class="comment">// 输出 "Cat meows"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>myAnimal1 和 myAnimal2 都是 Animal 类型的引用，但它们分别指向了一个 Dog 对象和一个 Cat 对象。当调用 makeSound() 方法时，会根据实际对象的类型来执行相应的方法，这就是运行时多态。</p><h2 id="instanceof和类型转化">instanceof和类型转化</h2><h3 id="instanceof">instanceof</h3><p><code>instanceof</code>是一个关键字，用于检查一个对象是否是一个特定类的实例</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> {}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> {}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> {}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        </span><br><span class="line">        System.out.println(animal1 <span class="keyword">instanceof</span> Animal);  <span class="comment">// true</span></span><br><span class="line">        System.out.println(animal1 <span class="keyword">instanceof</span> Dog);     <span class="comment">// true</span></span><br><span class="line">        System.out.println(animal1 <span class="keyword">instanceof</span> Cat);     <span class="comment">// false</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(animal2 <span class="keyword">instanceof</span> Animal);  <span class="comment">// true</span></span><br><span class="line">        System.out.println(animal2 <span class="keyword">instanceof</span> Dog);     <span class="comment">// false</span></span><br><span class="line">        System.out.println(animal2 <span class="keyword">instanceof</span> Cat);     <span class="comment">// true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="对象的类型转化">对象的类型转化</h3><ol><li><strong>向上转型（Upcasting）</strong>：向上转型是指将一个子类对象转换为其父类类型的过程。由于子类对象可以被看作是父类对象，所以向上转型是安全的，不会导致数据丢失或溢出。在向上转型中，父类引用指向了子类对象。</li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> {}</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> {}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> dog; <span class="comment">// 向上转型</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li><strong>向下转型（Downcasting）</strong>：向下转型是指将一个父类类型的对象转换为其子类类型的过程。向下转型需要显式地进行，使用强制类型转换操作符。由于父类对象并不具备子类特有的属性和行为，所以在向下转型时需要确保对象实际上是子类对象，否则可能会导致<code>ClassCastException</code>异常。</li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> {}</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> {}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal; <span class="comment">// 向下转型，强制转化</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，在进行向下转型时，必须确保对象的实际类型是目标类型，否则会抛出<code>ClassCastException</code>异常。为了避免此类异常，可以使用<code>instanceof</code>运算符来检查对象的类型，再进行向下转型。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Dog) {</span><br><span class="line">    <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal; <span class="comment">// 向下转型</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="static详解">static详解</h2><p><code>static</code>是一个关键字，用于声明类级别的成员，也就是说，被<code>static</code>修饰的成员属于类本身，而不是类的实例。</p><ul><li><strong>静态变量（类变量）</strong>：使用<code>static</code>修饰的变量称为静态变量，也叫类变量。所有该类的对象共享相同的静态变量，它们的值在所有实例之间是共享的。静态变量在类加载时初始化，并且只会被初始化一次。静态变量可以通过类名直接访问，无需创建类的实例。</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> age; <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;<span class="comment">//非静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(Student.age);<span class="comment">//静态变量可以通过类名直接访问</span></span><br><span class="line">        System.out.println(student.score);</span><br><span class="line">        System.out.println(student.age);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>静态方法</strong>：使用<code>static</code>修饰的方法称为静态方法。静态方法可以直接通过类名调用，无需创建类的实例。静态方法只能访问静态变量和调用静态方法，无法访问非静态的实例变量和实例方法。</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> {</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"This is a static method."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        MyClass.staticMethod(); <span class="comment">// 调用静态方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li><strong>静态代码块</strong>：静态代码块在类被加载时执行，仅执行一次。它常用于静态变量的初始化或执行一些静态操作。</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> {</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//代码块（匿名代码块，赋初始值）</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"Static block is executed."</span>); <span class="comment">// 静态代码块</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>静态内部类</strong>：使用<code>static</code>关键字修饰的内部类称为静态内部类。静态内部类与外部类的实例无关，可以直接通过外部类的类名访问，无需先创建外部类的实例。</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> {</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClass</span> {</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> {</span><br><span class="line">            System.out.println(<span class="string">"Static Inner Class."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        OuterClass.<span class="type">StaticInnerClass</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>.StaticInnerClass();</span><br><span class="line">        inner.display(); <span class="comment">// 访问静态内部类</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="抽象类">抽象类</h2><p>关键词：extends</p><ul><li>抽象方法只有方法签名（方法名、返回类型、参数列表），没有具体实现（没有方法体）。</li><li>抽象方法必须在抽象类中声明。</li><li>不能new 这个抽象类，只能靠子类去实现它：约束！</li><li>抽象类可以写非抽象方法，构造器，静态成员</li><li>子类继承抽象类时，必须实现所有的抽象方法，除非子类也是抽象类。</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> {<span class="comment">//抽象类</span></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Zzz..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> {</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//重写抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Dog is eating."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 不能直接实例化抽象类</span></span><br><span class="line">        <span class="comment">// Animal animal = new Animal();</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.eat();</span><br><span class="line">        dog.sleep();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="接口">接口</h2><p><strong>定义</strong>:接口（Interface）是一种定义行为的方式，它是完全抽象的，用来声明方法但不包含方法的实现。 接口使用<code>interface</code>关键字来定义，其中的方法默认都是公共的（public）和抽象的（abstract），即使你不明确写出这些修饰符。</p><ul><li>普通类：只有具体实现</li><li>抽象类：具体实现和规范（抽象方法）都有</li><li>接口：只有规范！自己无法写方法</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="comment">//常量~public static final</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AGE</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>; <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 默认方法的实现</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 静态方法的实现</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 实现接口中的抽象方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>多重继承</strong>: Java不支持类的多重继承，但可以通过实现多个接口来达到类似的效果，从而实现多重继承的功能。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">A</span> ,B{   </span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>接口与抽象类的区别</strong>:</p><ul><li>抽象类可以有构造方法，可以有实例变量，而接口不能有构造方法。</li><li>类只能单继承（extends）一个抽象类，但可以实现多个接口（implements）。</li><li>抽象类可以有抽象方法和非抽象方法，接口中的方法默认都是抽象的（除非是默认方法或静态方法）。</li></ul><h2 id="内部类">内部类</h2><ol><li><p><strong>成员内部类</strong>： 成员内部类是定义在另一个类内部的类。它具有对外部类成员的完全访问权限，并且可以访问外部类的所有成员，包括私有成员。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> outerVar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span> {</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> {</span><br><span class="line">            System.out.println(<span class="string">"Outer variable: "</span> + outerVar);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化成员内部类</span></span><br><span class="line"><span class="type">OuterClass</span> <span class="variable">outerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">OuterClass.<span class="type">InnerClass</span> <span class="variable">innerObj</span> <span class="operator">=</span> outerObj.<span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>静态内部类</strong>： 静态内部类是定义在另一个类内部的静态类。它不依赖于外部类的实例，并且不能直接访问外部类的非静态成员。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> {</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClass</span> {</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> {</span><br><span class="line">            System.out.println(<span class="string">"Static Inner Class"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化静态内部类</span></span><br><span class="line">OuterClass.<span class="type">StaticInnerClass</span> <span class="variable">staticInnerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>.StaticInnerClass();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>局部内部类</strong>： 局部内部类是定义在方法或作用域内部的类。它只在所定义的方法或作用域内可见，并且不能使用访问修饰符 public、protected 或 private。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">LocalInnerClass</span> {</span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> {</span><br><span class="line">                System.out.println(<span class="string">"Local Inner Class"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化局部内部类</span></span><br><span class="line">        <span class="type">LocalInnerClass</span> <span class="variable">localInnerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalInnerClass</span>();</span><br><span class="line">        localInnerObj.display();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>匿名内部类</strong>： 匿名内部类是没有显式名称的内部类，通常用于创建一个临时的类实例，通常是接口或抽象类的实现。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 匿名内部类实现 MyInterface 接口</span></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">anonymousInnerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterface</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> {</span><br><span class="line">                System.out.println(<span class="string">"Anonymous Inner Class"</span>);</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        anonymousInnerObj.display();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="异常">异常</h2><p><img src="/2024/06/03/java%E5%9F%BA%E7%A1%80/D:%5CUsers%5C30638%5Cmyblog%5Csource%5Cimages%5C%E5%BC%82%E5%B8%B8.png" alt="异常体系结构"></p><h2 id="捕获和抛出异常">捕获和抛出异常</h2><p>关键词：try, catch,finally,throw,throws</p><hr><h3 id="try-catch-finally">try-catch-finally</h3><p>用于捕获和处理异常，并在不管是否发生异常的情况下执行清理操作。-----------快捷键：Ctrl +Alt +T</p><h4 id="基本语法">基本语法</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 可能会抛出异常的代码块</span></span><br><span class="line">    <span class="comment">//ExceptionType即上图异常类</span></span><br><span class="line">} <span class="keyword">catch</span> (ExceptionType1 e1) {</span><br><span class="line">    <span class="comment">// 捕获并处理 ExceptionType1 类型的异常</span></span><br><span class="line">} <span class="keyword">catch</span> (ExceptionType2 e2) {</span><br><span class="line">    <span class="comment">// 捕获并处理 ExceptionType2 类型的异常</span></span><br><span class="line">} <span class="keyword">finally</span> {</span><br><span class="line">    <span class="comment">// 无论是否发生异常，都会执行的代码块，用于清理资源或执行其他必要的操作，可不要finally</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//ExceptionType1类型要小于ExceptionType2类型，否则报错</span></span><br></pre></td></tr></tbody></table></figure><h4 id="示例：">示例：</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatchFinallyExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] numbers = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 尝试执行可能会抛出异常的代码</span></span><br><span class="line">            x = numbers[<span class="number">3</span>]; <span class="comment">// 这里会抛出数组越界异常</span></span><br><span class="line">            System.out.println(<span class="string">"This line will not be executed because an exception is thrown."</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) {</span><br><span class="line">            <span class="comment">// 捕获并处理异常</span></span><br><span class="line">            System.out.println(<span class="string">"Caught an exception: "</span> + e.getMessage());</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">// 这段代码无论是否抛出异常都会执行</span></span><br><span class="line">            System.out.println(<span class="string">"This is the finally block, always executed."</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 程序继续执行</span></span><br><span class="line">        System.out.println(<span class="string">"Program continues after try-catch-finally block."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="throw">throw</h3><p>用于显式抛出一个异常。当你在代码中遇到某种错误情况，希望程序停止当前执行流程并传递错误信息时，就可以使用 <code>throw</code> 语句。</p><h4 id="基本语法-2">基本语法</h4><p>Java</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1throw new ExceptionType(message);</span><br></pre></td></tr></tbody></table></figure><ul><li><p><code>ExceptionType</code> 是你想要抛出的异常类型的名称，它必须是 <code>Throwable</code> 类或其子类的实例。</p></li><li><p><code>message</code> 是一个可选的字符串参数，用于描述发生异常的具体情况，可不写。</p></li></ul><h4 id="示例：-2">示例：</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"年龄不能为负数"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IllegalArgumentException e) {</span><br><span class="line">            System.out.println(<span class="string">"捕获到异常: "</span> + e.getMessage());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="throws">throws</h3><p>用于声明方法可能会抛出的一个或多个异常类型。它告知调用者，调用这个方法时可能会遇到某些异常情况，需要调用者负责处理这些潜在的异常。</p><h4 id="基本语法-3">基本语法</h4><p>在方法签名后使用 <code>throws</code> 关键字，后跟一个或多个异常类名，这些类必须是 <code>Throwable</code> 的子类：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> returnType <span class="title function_">methodName</span><span class="params">()</span> <span class="keyword">throws</span> ExceptionType1, ExceptionType2 {</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例">示例</h4><p>Java</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> FileNotFoundException, IOException {</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);    </span><br><span class="line">    <span class="comment">// 假设此处有读取文件的逻辑</span></span><br><span class="line">    br.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="自定义异常">自定义异常</h2><p>自定义异常是指根据特定需求创建的异常类，这些类通常继承自现有的异常类，如 <code>Exception</code> 类或其子类</p><h3 id="1-定义自定义异常类">1. 定义自定义异常类</h3><p>首先，你需要定义一个新的类，让它继承自现有的异常类。最常见的是直接继承 <code>Exception</code> 类或它的子类，比如 <code>RuntimeException</code>。通常，自定义异常类至少包含一个无参构造函数和一个带有详细错误信息的构造函数</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCustomException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> {</span><br><span class="line">    <span class="comment">// 无参构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCustomException</span><span class="params">()</span> {</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带有详细错误信息的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCustomException</span><span class="params">(String message)</span> {</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果需要，还可以添加带有原因 throwable 的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCustomException</span><span class="params">(String message, Throwable cause)</span> {</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-抛出自定义异常">2. 抛出自定义异常</h3><p>在需要的地方，你可以像抛出标准异常一样，使用 <code>throw</code> 关键字抛出自定义异常。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">(String input)</span> <span class="keyword">throws</span> MyCustomException {</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span> || input.isEmpty()) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyCustomException</span>(<span class="string">"输入不能为空"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 其他逻辑...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-捕获和处理自定义异常">3. 捕获和处理自定义异常</h3><p>调用可能抛出自定义异常的方法时，你需要使用 <code>try-catch</code> 语句块来捕获并处理这个异常。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        someMethod(<span class="literal">null</span>);</span><br><span class="line">    } <span class="keyword">catch</span> (MyCustomException e) {</span><br><span class="line">        System.out.println(<span class="string">"捕获到自定义异常: "</span> + e.getMessage());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>黑马在线聊天室(websocket)</title>
      <link href="/2024/06/03/%E9%BB%91%E9%A9%AC%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4(websocket)/"/>
      <url>/2024/06/03/%E9%BB%91%E9%A9%AC%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4(websocket)/</url>
      
        <content type="html"><![CDATA[<h1>黑马在线聊天室(websocket)</h1><h2 id="消息推送常见方式">消息推送常见方式</h2><h3 id="1-轮询方式">1. 轮询方式</h3><ul><li>轮询是一种客户端与服务器之间实时通信的技术手段。<strong>客户端定期发送请求来查询服务器</strong>是否有新数据或事件，并将响应返回给客户端。如果服务器有新的数据或事件，则将其返回给客户端；如果没有，则返回一个空响应。客户端收到响应后，可以处理数据或事件，并根据需要继续发送下一个请求。</li><li>长轮询是一种改进的轮询技术，其主要目的是降低轮询过程中的资源消耗和延迟。长轮询的基本原理是客户端发送一个           HTTP请求给服务器，并保持连接打开，直到服务器有新的数据或事件时才返回响应给客户端。在这期间，服务器会一直保持连接打开，直到超时或有新数据或事件</li></ul><p><img src="/2024/06/03/%E9%BB%91%E9%A9%AC%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4(websocket)/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5Cimage-20240711220227509.png" alt="image-20240711220227509"></p><h3 id="2-SSE（server-sent-event）：服务器发送事件">2. SSE（server-sent event）：服务器发送事件</h3><ul><li><p>SSE在服务器和客户端之间打开一个单向通道</p></li><li><p>服务端响应的不再是一次性的数据包，而是text/event-stream类型的数据流信息</p></li><li><p>服务器有数据变更时将数据流式传输到客户端</p><p><img src="/2024/06/03/%E9%BB%91%E9%A9%AC%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4(websocket)/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5Cimage-20240711222411230.png" alt="image-20240711222411230"></p></li></ul><h3 id="3-websocket">3. websocket</h3><p>WebSocket是一种网络通信协议，提供了一种在单个连接上进行全双工通信的途径。与HTTP不同，WebSocket在客户端和服务器之间建立一个持久的连接，这个连接在任意一方关闭之前都保持打开状态，允许数据在两个方向上实时流动。</p><p><img src="/2024/06/03/%E9%BB%91%E9%A9%AC%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4(websocket)/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5Cimage-20240711222730057.png" alt="image-20240711222730057"></p><ul><li><p>全双工（Full Duplex）：允许数据在两个方向上同时传输。</p></li><li><p>半双工（Half Duplex）：允许数据在两个方向上传输，但是同一个时间段内只允许一个方向上传输。</p><hr></li></ul><h4 id="WebSocket应用场景：">WebSocket应用场景：</h4><ul><li><p>实时游戏</p></li><li><p>聊天应用</p></li><li><p>实时通知服务</p></li><li><p>实时金融市场数据</p></li><li><p>实时协作工具</p><hr></li></ul><h4 id="WebSocket原理解析：">WebSocket原理解析：</h4><p><img src="/2024/06/03/%E9%BB%91%E9%A9%AC%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4(websocket)/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5Cimage-20240711224401167.png" alt="image-20240711224401167"></p><p>在 WebSocket 协议中，建立连接时进行一次“握手”。这个握手过程与HTTP协议类似，但使用的是 WebSocket 协议的特定头部格式。在客户端发送 WebSocket 请求时，其请求头部包括一个特殊的 “Upgrade” 标识，表示希望升级连接为 WebSocket。同时还需要包含一个 “Sec-WebSocket-Key”，它是随机生成的一段字符串，用于在服务器端验证请求的合法性。</p><p>当服务器收到这个 WebSocket 请求时，会进行一次握手确认，响应头部包含一个 “Upgrade” 标识，并指明应用的协议是 WebSocket。响应头部还包含一个 “Sec-WebSocket-Accept”，这是一个根据客户端请求头部 的 “Sec-WebSocket-Key” 计算的特殊字符串。如果服务器验证通过，那么连接就被升级为 WebSocket 协议。</p><p>在建立连接之后，客户端和服务器之间可以进行任意的双向通信。WebSocket 协议支持文本和二进制数据的传输，因此可以在浏览器端实现实时聊天、游戏、文件传输等各种应用。</p><h2 id="客户端【浏览器】API">客户端【浏览器】API</h2><h3 id="websocket对象创建">websocket对象创建</h3><p>​let  ws  =  new WebSocket(URL);</p><p><strong>URL说明：</strong></p><ul><li>格式：协议://ip地址/访问路径</li><li>协议：协议名称为 ws</li></ul><h3 id="websocket对象相关事件">websocket对象相关事件</h3><table><thead><tr><th><strong>事件</strong></th><th><strong>事件处理程序</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>open</td><td>ws.onopen</td><td>连接建立时触发</td></tr><tr><td>message</td><td>ws.onmessage</td><td>客户端接收到服务器发送的数据时触发</td></tr><tr><td>close</td><td>ws.onclose</td><td>连接关闭时触发</td></tr></tbody></table><h3 id="websocket对象提供的方法">websocket对象提供的方法</h3><table><thead><tr><th><strong>方法名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>send()</td><td>通过websocket对象调用该方法发送数据给服务端</td></tr></tbody></table><h3 id="前端发送请求"><strong>前端发送请求</strong></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">  <span class="keyword">async</span> <span class="title function_">init</span>(<span class="params"></span>) {</span><br><span class="line">               <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">"user/getUsername"</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="property">username</span> = res.<span class="property">data</span>;</span><br><span class="line">               })</span><br><span class="line"><span class="comment">//创建webSocket对象</span></span><br><span class="line">           ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">"ws://localhost/chat"</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//给ws绑定事件</span></span><br><span class="line">           ws.<span class="property">onopen</span> = <span class="variable language_">this</span>.<span class="property">onopen</span>;</span><br><span class="line">           <span class="comment">//接收到服务端推送的消息后触发</span></span><br><span class="line">           ws.<span class="property">onmessage</span> = <span class="variable language_">this</span>.<span class="property">onMessage</span>;</span><br><span class="line"></span><br><span class="line">           ws.<span class="property">onclose</span> = <span class="variable language_">this</span>.<span class="property">onClose</span>;</span><br><span class="line">       }</span><br></pre></td></tr></tbody></table></figure><h2 id="服务端-API">服务端 API</h2><p>Tomcat的7.0.5 版本开始支持WebSocket,并且实现了Java WebSocket规范。</p><p>Java WebSocket应用由一系列的Endpoint组成。Endpoint 是一个java对象，代表WebSocket链接的一端，对于服务端，我们可以视为处理具体WebSocket消息的接口。</p><hr><p>我们可以通过两种方式定义Endpoint:</p><ul><li><p>第一种是编程式， 即继承类 javax.websocket.Endpoint并实现其方法。</p></li><li><p>第二种是注解式, 即定义一个POJO, 并添加 @ServerEndpoint相关注解。</p><hr></li></ul><p>Endpoint实例在WebSocket握手时创建，并在客户端与服务端链接过程中有效，最后在链接关闭时结束。在Endpoint接口中明确定义了与其生命周期相关的方法， 规范实现者确保生命周期的各个阶段调用实例的相关方法。生命周期方法如下：</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th><th><strong>注解</strong></th></tr></thead><tbody><tr><td>onOpen()</td><td>当开启一个新的会话时调用，该方法是客户端与服务端握手成功后调用的方法</td><td>@OnOpen</td></tr><tr><td>onClose()</td><td>当会话关闭时调用</td><td>@OnClose</td></tr><tr><td>onError()</td><td>当连接过程异常时调用</td><td>@OnError</td></tr></tbody></table><h3 id="服务端如何接收客户端发送的数据呢？">服务端如何接收客户端发送的数据呢？</h3><ul><li>编程式：通过添加 MessageHandler 消息处理器来接收消息</li><li>注解式：在定义Endpoint时，通过@OnMessage注解指定接收消息的方法</li></ul><h3 id="服务端如何推送数据给客户端呢？">服务端如何推送数据给客户端呢？</h3><p>发送消息则由 RemoteEndpoint 完成， 其实例由 Session 维护。</p><p>发送消息有2种方式发送消息</p><ul><li>通过session.getBasicRemote 获取同步消息发送的实例 ， 然后调用其 sendXxx()方法发送消息</li><li>通过session.getAsyncRemote 获取异步消息发送实例，然后调用其 sendXxx() 方法发送消息</li></ul><h3 id="Endpoint示例">Endpoint示例</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint("/chat")</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatEndpoint</span> {</span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="comment">//连接建立时被调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, EndpointConfig config)</span>{}</span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="comment">//接收到客户端发送的数据时被调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message)</span>{}</span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="comment">//连接关闭时被调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(Session session)</span>{}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ChatEndpoint类通过实现WebSocket协议，用于处理客户端的连接、消息传递和关闭事件。</p><h2 id="在线聊天室实现">在线聊天室实现</h2><h3 id="流程分析">流程分析</h3><p><img src="/2024/06/03/%E9%BB%91%E9%A9%AC%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4(websocket)/%E5%9B%BE%E7%89%87/image-20240712081548349.png" alt="image-20240712081548349"></p><h3 id="消息格式">消息格式</h3><p><img src="/2024/06/03/%E9%BB%91%E9%A9%AC%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4(websocket)/%E5%9B%BE%E7%89%87/image-20240712081436012.png" alt="image-20240712081436012"></p><h3 id="代码实现">代码实现</h3><ol><li><p>引入坐标</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>编写配置类，扫描添加有@ServerEndpoint注解的 Bean</p></li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebsocketConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过在配置类中定义一个 ServerEndpointExporter 的 @Bean 方法，Spring 会自动创建一个 ServerEndpointExporter 实例，并将其加入到 Spring 容器中。Spring框架会在启动时通过这个实例自动扫描项目中所有使用<code>@ServerEndpoint</code>注解的类，并将它们注册为WebSocket端点</p><ol start="3"><li>编写配置类，用于获取 HttpSession 对象</li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetHttpSessionConfig</span> <span class="keyword">extends</span> <span class="title class_">ServerEndpointConfig</span>.Configurator {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyHandshake</span><span class="params">(ServerEndpointConfig sec, HandshakeRequest request, HandshakeResponse response)</span> {</span><br><span class="line">        <span class="comment">//获取HttpSession对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">httpSession</span> <span class="operator">=</span> (HttpSession) request.getHttpSession();</span><br><span class="line">        <span class="comment">//将httpSession对象保存起来</span></span><br><span class="line">        sec.getUserProperties().put(HttpSession.class.getName(),httpSession);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>GetHttpSessionConfig类</code>用于在WebSocket握手过程中获取HTTP会话（<code>HttpSession</code>）对象，并将其保存到用户属性中，以便在WebSocket会话中使用。</p><ol start="4"><li><p><code>ChatEndpoint</code>类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ws;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.itheima.config.GetHttpSessionConfig;</span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.MessageUtils;</span><br><span class="line"><span class="keyword">import</span> com.itheima.ws.pojo.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ChatEndpoint</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO(一句话描述该类的功能)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 黑马程序员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ServerEndpoint(value = "/chat",configurator = GetHttpSessionConfig.class)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatEndpoint</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String,Session&gt; onlineUsers = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpSession httpSession;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立websocket连接后，被调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, EndpointConfig config)</span> {</span><br><span class="line">        <span class="comment">//1，将session进行保存</span></span><br><span class="line">        <span class="built_in">this</span>.httpSession = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> (String) <span class="built_in">this</span>.httpSession.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        onlineUsers.put(user,session);</span><br><span class="line">        <span class="comment">//2，广播消息。需要将登陆的所有的用户推送给所有的用户</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> MessageUtils.getMessage(<span class="literal">true</span>,<span class="literal">null</span>,getFriends());</span><br><span class="line">        broadcastAllUsers(message);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set <span class="title function_">getFriends</span><span class="params">()</span> {</span><br><span class="line">        Set&lt;String&gt; set = onlineUsers.keySet();</span><br><span class="line">        <span class="keyword">return</span> set;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">broadcastAllUsers</span><span class="params">(String message)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//遍历map集合</span></span><br><span class="line">            Set&lt;Map.Entry&lt;String, Session&gt;&gt; entries = onlineUsers.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Session&gt; entry : entries) {</span><br><span class="line">                <span class="comment">//获取到所有用户对应的session对象</span></span><br><span class="line">                <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                <span class="comment">//发送消息</span></span><br><span class="line">                session.getBasicRemote().sendText(message);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="comment">//记录日志</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浏览器发送消息到服务端，该方法被调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 张三  --&gt;  李四</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//将消息推送给指定的用户</span></span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> JSON.parseObject(message, Message.class);</span><br><span class="line">            <span class="comment">//获取 消息接收方的用户名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">toName</span> <span class="operator">=</span> msg.getToName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">mess</span> <span class="operator">=</span> msg.getMessage();</span><br><span class="line">            <span class="comment">//获取消息接收方用户对象的session对象</span></span><br><span class="line">            <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> onlineUsers.get(toName);</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> (String) <span class="built_in">this</span>.httpSession.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg1</span> <span class="operator">=</span> MessageUtils.getMessage(<span class="literal">false</span>, user, mess);</span><br><span class="line">            session.getBasicRemote().sendText(msg1);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="comment">//记录日志</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 断开 websocket 连接时被调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(Session session)</span> {</span><br><span class="line">        <span class="comment">//1,从onlineUsers中剔除当前用户的session对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> (String) <span class="built_in">this</span>.httpSession.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        onlineUsers.remove(user);</span><br><span class="line">        <span class="comment">//2,通知其他所有的用户，当前用户下线了</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> MessageUtils.getMessage(<span class="literal">true</span>,<span class="literal">null</span>,getFriends());</span><br><span class="line">        broadcastAllUsers(message);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p><code>@ServerEndpoint(value = "/chat", configurator = GetHttpSessionConfig.class)</code> 这行代码声明了一个 WebSocket 端点，客户端可以通过 <code>/chat</code> 路径与之建立连接，并且在握手阶段使用 <code>GetHttpSessionConfig</code> 类来进行自定义配置。</p><p>该类是Spring Boot应用中的一个WebSocket端点，它用于处理聊天功能。主要功能包括：</p><ul><li>在用户建立WebSocket连接时保存用户信息和会话对象。</li><li>当用户发送消息时，将消息转发给指定的接收用户。</li><li>当用户断开连接时，从在线用户列表中移除用户并通知其他用户。</li><li>使用<code>GetHttpSessionConfig</code>配置器来获取HTTP会话中的用户信息。</li></ul><hr><p><strong>userController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.Result;</span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登陆</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 提交的用户数据，包含用户名和密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping("/login")</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span> {</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        <span class="keyword">if</span>(user != <span class="literal">null</span> &amp;&amp; <span class="string">"123"</span>.equals(user.getPassword())) {</span><br><span class="line">            result.setFlag(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//将数据存储到session对象中</span></span><br><span class="line">            session.setAttribute(<span class="string">"user"</span>,user.getUsername());</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            result.setFlag(<span class="literal">false</span>);</span><br><span class="line">            result.setMessage(<span class="string">"登陆失败"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/getUsername")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">(HttpSession session)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Result</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Result</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 用来封装http请求的响应数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 黑马程序员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>User</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 接收登录请求的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 黑马程序员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>MessageUtils</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.itheima.ws.pojo.ResultMessage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MessageUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 封装json格式消息的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 黑马程序员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageUtils</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessage</span><span class="params">(<span class="type">boolean</span> isSystemMessage,String fromName, Object message)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="type">ResultMessage</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResultMessage</span>();</span><br><span class="line">        result.setSystem(isSystemMessage);</span><br><span class="line">        result.setMessage(message);</span><br><span class="line">        <span class="keyword">if</span>(fromName != <span class="literal">null</span>) {</span><br><span class="line">            result.setFromName(fromName);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(result);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Message</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ws.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 用于封装浏览器发送给服务端的消息数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 黑马程序员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> {</span><br><span class="line">    <span class="keyword">private</span> String toName;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>ResultMessage</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ws.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ResultMessage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 用来封装服务端给浏览器发送的消息数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 黑马程序员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultMessage</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isSystem;</span><br><span class="line">    <span class="keyword">private</span> String fromName;</span><br><span class="line">    <span class="keyword">private</span> Object message;<span class="comment">//如果是系统消息是数组</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot后端实战篇</title>
      <link href="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/"/>
      <url>/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1>Springboot后端实战篇</h1><h2 id="注册">注册</h2><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5Cimage-20240614223823594.png" alt="image-20240614223823594"></p><h3 id="引入Spring-Validation依赖">引入Spring Validation依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="导入Md5Util工具类">导入Md5Util工具类</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Md5Util</span> {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的密码字符串组合，用来将字节转换成 16 进制表示的字符,apache校验下载的文件的正确性用的就是默认的这个组合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">char</span> hexDigits[] = {<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>};</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">MessageDigest</span> <span class="variable">messagedigest</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            messagedigest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (NoSuchAlgorithmException nsaex) {</span><br><span class="line">            System.err.println(Md5Util.class.getName() + <span class="string">"初始化失败，MessageDigest不支持MD5Util。"</span>);</span><br><span class="line">            nsaex.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成字符串的md5校验值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMD5String</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="keyword">return</span> getMD5String(s.getBytes());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断字符串的md5校验码是否与一个已知的md5码相匹配</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password  要校验的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> md5PwdStr 已知的md5校验码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkPassword</span><span class="params">(String password, String md5PwdStr)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> getMD5String(password);</span><br><span class="line">        <span class="keyword">return</span> s.equals(md5PwdStr);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMD5String</span><span class="params">(<span class="type">byte</span>[] bytes)</span> {</span><br><span class="line">        messagedigest.update(bytes);</span><br><span class="line">        <span class="keyword">return</span> bufferToHex(messagedigest.digest());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">bufferToHex</span><span class="params">(<span class="type">byte</span> bytes[])</span> {</span><br><span class="line">        <span class="keyword">return</span> bufferToHex(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">bufferToHex</span><span class="params">(<span class="type">byte</span> bytes[], <span class="type">int</span> m, <span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringbuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">2</span> * n);</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> m + n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> m; l &lt; k; l++) {</span><br><span class="line">            appendHexPair(bytes[l], stringbuffer);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> stringbuffer.toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">appendHexPair</span><span class="params">(<span class="type">byte</span> bt, StringBuffer stringbuffer)</span> {</span><br><span class="line">        <span class="type">char</span> <span class="variable">c0</span> <span class="operator">=</span> hexDigits[(bt &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>];<span class="comment">// 取字节中高 4 位的数字转换, &gt;&gt;&gt;</span></span><br><span class="line">        <span class="comment">// 为逻辑右移，将符号位一起右移,此处未发现两种符号有何不同</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> hexDigits[bt &amp; <span class="number">0xf</span>];<span class="comment">// 取字节中低 4 位的数字转换</span></span><br><span class="line">        stringbuffer.append(c0);</span><br><span class="line">        stringbuffer.append(c1);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="三层架构">三层架构</h3><p><strong>UserController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.controller;</span><br><span class="line"><span class="comment">// 导入必要的包</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Validated</span><span class="comment">// @Validated: 这个注解表示这个控制器中的方法参数将会进行校验。</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userservice;</span><br><span class="line">     <span class="comment">// @Pattern: 这个注解用于校验方法参数是否符合正则表达式的规则。正则表达式"^\S{5,16}$"，用户名和密码的长度为5~16位非空字符</span></span><br><span class="line">    <span class="meta">@PostMapping("/register")</span>   </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">register</span><span class="params">(<span class="meta">@Pattern(regexp = "^\\S{5,16}$")</span> String username, <span class="meta">@Pattern(regexp = "^\\S{5,16}$")</span> String password)</span> {</span><br><span class="line">      <span class="keyword">if</span> (userService.findByUserName(username) != <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// 如果用户名已存在，返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">"用户名已存在"</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// 如果用户名不存在，调用userService的register方法注册新用户</span></span><br><span class="line">        userService.register(username, password);</span><br><span class="line">        <span class="comment">// 注册成功，返回成功信息</span></span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>UserServiceImpl</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjf.utils.Md5Util;</span><br><span class="line"><span class="comment">// 导入必要的包</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String username, String password)</span> {</span><br><span class="line">        <span class="comment">//// 使用Md5Util工具类对密码进行MD5加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">md5String</span> <span class="operator">=</span> Md5Util.getMD5String(password);</span><br><span class="line">        userMapper.insertUser(username,md5String);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findByUserName</span><span class="params">(String username)</span> {</span><br><span class="line">        <span class="keyword">return</span> userMapper.findByUserName(username);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>UserMappper</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line">    <span class="meta">@Insert("insert into user(username,password,create_time,update_time)" +</span></span><br><span class="line"><span class="meta">            " values(#{username},#{password},now(),now())")</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(String username, String password)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select("select * from user where username=#{username}")</span></span><br><span class="line">    User <span class="title function_">findByUserName</span><span class="params">(String username)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="知识要点">知识要点</h3><h4 id="Md5加密">Md5加密</h4><ol><li><p>导入Md5Utils工具类</p></li><li><p>将输入的密码使用Md5Util类进行MD5加密生成md5String</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String username, String password)</span> {</span><br><span class="line">       <span class="comment">//加密</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">md5String</span> <span class="operator">=</span> Md5Util.getMD5String(password);</span><br><span class="line">       userMapper.insertUser(username,md5String);</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure></li></ol><hr><h4 id="参数校验">参数校验</h4><p>使用 Spring Validation, 对注册接口的参数进行合法性校验</p><ol><li><p>引入 Spring Validation 起步依赖</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在参数前面添加 @Pattern 注解</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">register(<span class="meta">@Pattern(regexp = "^\\S{5,16}$")</span> String username, <span class="meta">@Pattern(regexp = "^\\S{5,16}$")</span> String password) </span><br></pre></td></tr></tbody></table></figure></li><li><p>在 Controller 类上添加 @Validated 注解</p></li><li><p>在全局异常处理器中处理参数校验失败的异常</p><p>​当用户名和密码的长度不满足5~16位非空字符时，参数校验失败，服务器抛出错误，“status”: 500, “error”: “Internal Server Error”,表示服务器遇到了一个内部错误。此时提供一个全局的异常处理机制。当应用程序中的任何控制器方法抛出异常时，<code>handleException</code> 方法会被调用。它会打印异常的堆栈跟踪信息，并返回一个包含错误信息的 <code>Result</code> 对象给客户端。这种方式有助于统一异常处理逻辑，提高代码的可维护性。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.exception;</span><br><span class="line"><span class="comment">//导入必要的包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @RestControllerAdvice: 这是一个Spring框架的注解，用于标记一个类作为全局的异常处理类。</span></span><br><span class="line"><span class="comment">// 这个类会处理所有控制器（@Controller或@RestController）中抛出的异常，并将异常处理结果以JSON或其他序列化形式返回给客户端。</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> {</span><br><span class="line"><span class="comment">// @ExceptionHandler(Exception.class): 这个方法级别的注解用于指定这个方法将会处理Exception.class类型的异常。</span></span><br><span class="line">    <span class="comment">// 在这里，它指定了这个方法将处理所有的异常，因为Exception是所有异常类的基类。</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handleException</span><span class="params">(Exception e)</span>{</span><br><span class="line">        e.printStackTrace();   <span class="comment">// 打印异常的堆栈跟踪信息到控制台，这通常用于开发过程中的调试。</span></span><br><span class="line">        <span class="keyword">return</span> Result.error(StringUtils.hasLength(e.getMessage())? e.getMessage() : <span class="string">"操作失败"</span>);</span><br><span class="line">          <span class="comment">// 使用StringUtils.hasLength(e.getMessage())来检查异常是否有消息内容，如果有，则将异常消息作为错误信息返回。</span></span><br><span class="line">        <span class="comment">// 如果没有，则返回一个默认的字符串"操作失败"。</span></span><br><span class="line">        <span class="comment">// 这里的Result是一个自定义的响应实体类，它包含了处理异常后的结果。</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><hr><h2 id="登录">登录</h2><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240615090941613.png" alt="image-20240615090941613"></p><h3 id="引入jwt依赖">引入jwt依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="导入工具类jwtUtil">导入工具类jwtUtil</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="string">"itheima"</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//接收业务数据,生成token并返回</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">genToken</span><span class="params">(Map&lt;String, Object&gt; claims)</span> {</span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                .withClaim(<span class="string">"claims"</span>, claims)</span><br><span class="line">                .withExpiresAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> ))</span><br><span class="line">                .sign(Algorithm.HMAC256(KEY));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//接收token,验证token,并返回业务数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">parseToken</span><span class="params">(String token)</span> {</span><br><span class="line">        <span class="keyword">return</span> JWT.require(Algorithm.HMAC256(KEY))</span><br><span class="line">                .build()</span><br><span class="line">                .verify(token)</span><br><span class="line">                .getClaim(<span class="string">"claims"</span>)</span><br><span class="line">                .asMap();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="编写UserController">编写UserController</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping("/login")</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@Pattern(regexp = "^\\S{5,16}$")</span> String username, </span></span><br><span class="line"><span class="params">    <span class="meta">@Pattern(regexp = "^\\S{5,6}$")</span> String password)</span> {</span><br><span class="line">    <span class="comment">// 根据用户名查询用户信息</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.findByUserName(username);</span><br><span class="line">    <span class="comment">// 判断该用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (loginUser == <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// 如果用户不存在，返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">"用户名错误"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断密码是否正确，loginUser对象中的password是密文</span></span><br><span class="line">    <span class="keyword">if</span> (Md5Util.getMD5String(password).equals(loginUser.getPassword())) {</span><br><span class="line">        <span class="comment">// 如果密码正确，登录成功</span></span><br><span class="line">        <span class="comment">// 创建一个包含用户ID和用户名的声明映射</span></span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        claims.put(<span class="string">"id"</span>, loginUser.getId());</span><br><span class="line">        claims.put(<span class="string">"username"</span>, loginUser.getUsername());</span><br><span class="line">        <span class="comment">// 使用JwtUtil工具类生成一个JWT令牌，将声明映射作为载荷</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.genToken(claims);</span><br><span class="line">        <span class="comment">// 返回成功结果，包含生成的JWT令牌</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(token);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 如果密码错误，返回错误信息</span></span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">"密码错误"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="登录拦截器">登录拦截器</h3><h4 id="LoginInterceptor">LoginInterceptor</h4><p><code>LoginInterceptor</code>是一个用于验证用户是否登录的拦截器。它通过检查HTTP请求中的JWT来验证用户的身份，如果JWT有效，则允许请求继续；如果JWT无效，则拒绝请求。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Map&lt;String, Object&gt; claims = JwtUtil.parseToken(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 如果令牌验证成功，返回true，继续执行后续的请求处理</span></span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">             <span class="comment">// 如果解析令牌时出现异常，说明令牌可能无效或过期</span></span><br><span class="line">            <span class="comment">// 设置响应状态码为401，</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="WebConfig">WebConfig</h4><p>WebConfig是一个配置类，用于注册一个登录拦截器（LoginInterceptor）。通过实现Spring MVC的WebMvcConfigurer接口，并重写addInterceptors方法，将登录拦截器添加到拦截器注册表中。在拦截器的配置中，指定了不拦截登录接口和注册接口的路径，即对路径为/user/login和/user/register的请求不进行拦截</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjf.interceptors.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.zjf.interceptors.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginInterceptor loginInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> {</span><br><span class="line">        <span class="comment">//登录接口和注册接口不拦截</span></span><br><span class="line">        registry.addInterceptor(loginInterceptor).excludePathPatterns(<span class="string">"/user/login"</span>,<span class="string">"/user/register"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="知识要点-2">知识要点</h3><h4 id="JWT"><strong>JWT</strong></h4><p>JSON Web Token（JWT）是一种开放标准（RFC 7519），用于在各方之间安全地传输信息作为 JSON 对象。JWT 可以通过数字签名进行验证，因此是一种非常安全的方式，通常用于在身份验证（Authentication）和信息交换（Information Exchange）方面。</p><p><strong>JWT 结构</strong></p><p>JWT 由三部分组成，通过点（.）分隔：</p><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240615112525158.png" alt="image-20240615112525158"></p><ol><li><strong>Header（头部）</strong>: 包含了令牌的元数据信息，例如算法（HS256、RS256、HMAC256）、令牌类型（JWT）等。</li><li><strong>Payload（负载）</strong>: 包含了被加密的数据，例如用户的身份信息或其他声明。</li><li><strong>Signature（签名）</strong>: 使用头部指定的算法和密钥对头部和负载进行签名，确保数据的完整性和认证。</li></ol><p>这三部分通过Base64 URL编码后连接在一起，形成最终的JWT令牌。</p><p><strong>JWT 使用</strong></p><p>JWT 的主要使用场景是在客户端和服务器之间安全地传递信息，特别是在身份验证过程中。一般的流程如下：</p><ol><li><p><strong>认证流程</strong>:</p><ul><li>用户向服务器提供用户名和密码进行身份验证。</li><li>服务器验证用户的身份，并生成包含用户信息的JWT。</li><li>服务器将生成的JWT返回给客户端。</li></ul></li><li><p><strong>请求认证</strong>:</p><ul><li><p>客户端在以后的请求中将JWT放置在请求头部的Authorization字段中，通常格式为 <code>Authorization: Bearer &lt;token&gt;</code>。</p></li><li><p>服务器接收到请求后，解析JWT并验证签名的有效性。</p></li><li><p>如果验证成功，服务器处理请求；如果验证失败或者JWT过期，服务器拒绝请求。</p><hr></li></ul></li></ol><h4 id="拦截器"><strong>拦截器</strong></h4><p>拦截器（Interceptor）是一种动态拦截方法调用的机制，在SpringMVC中动态拦截控制器方法的执行，是java中<a href="https://so.csdn.net/so/search?q=AOP&amp;spm=1001.2101.3001.7020">AOP</a>思想的运用。</p><ol><li><strong>创建拦截器</strong></li></ol><p>在Spring框架中，拦截器是通过实现<code>HandlerInterceptor</code>接口来创建的。这个接口定义了三个方法，分别对应请求处理的不同阶段：</p><ul><li><p><code>preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)</code>：这个方法在请求实际处理之前被调用。在这个方法中，可以执行一些前置处理，如身份验证、权限检查等。如果这个方法返回<code>true</code>，则请求会继续执行；如果返回<code>false</code>，则请求将被终止。</p></li><li><p><code>postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</code>：这个方法在请求实际处理之后，但在视图渲染之前被调用。在这个方法中，可以对模型的属性进行修改，或者添加额外的模型数据。</p></li><li><p><code>afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</code>：这个方法在整个请求完成后被调用，即在视图渲染之后。在这个方法中，可以执行一些清理工作，如释放资源、记录日志等。</p></li></ul><ol start="2"><li><p><strong>配置拦截器</strong></p><p>创建一个配置类，实现<code>WebMvcConfigurer</code>接口，并重写<code>addInterceptors</code>方法。在这个方法中，你可以使用<code>InterceptorRegistry</code>来注册你的拦截器，并指定拦截器应该作用的路径或者排除的路径。</p></li><li><p><strong>注册拦截器</strong></p><p>在<code>addInterceptors</code>方法中，使用<code>InterceptorRegistry</code>的<code>addInterceptor</code>方法来注册你的拦截器。然后，你可以使用<code>addPathPatterns</code>来指定拦截器应该拦截哪些路径，或者使用<code>excludePathPatterns</code>来指定拦截器不应该拦截哪些路径。</p></li></ol><h2 id="获取用户详细信息">获取用户详细信息</h2><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240617151915415.png" alt="image-20240617151915415"></p><h3 id="编写UserController-2">编写UserController</h3><p>注意：/userInfo接口不携带参数username，token令牌中存放了用户的id和usern，通过携带token令牌，获取username。<code>@RequestHeader</code>注解用于将请求头中的信息绑定到控制器方法参数上。当你在方法参数前面加上<code>@RequestHeader</code>注解，并指定<code>name</code>属性时，Spring会自动将请求中名为<code>Authorization</code>的头部的值赋给该参数。当HTTP请求到达服务器并调用这个方法时，Spring会查找请求头中名为<code>Authorization</code>的字段，并将其值作为字符串参数<code>authorizationHeader</code>传递给方法。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/userInfo")</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">userInfo</span><span class="params">(<span class="meta">@RequestHeader(name = "Authorization")</span> String token)</span>{</span><br><span class="line">    <span class="comment">// 使用JwtUtil工具类来解析传递的JWT字符串，获取其中的负载（Payload）</span></span><br><span class="line">    Map&lt;String, Object&gt; map = JwtUtil.parseToken(token);</span><br><span class="line">    <span class="comment">// 从解析出来的负载中获取用户的用户名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span>(String) map.get(<span class="string">"username"</span>);</span><br><span class="line">    <span class="comment">// 使用userService的findByUserName方法根据用户名查询用户的信息</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findByUserName(username);</span><br><span class="line">    <span class="comment">// 如果查询到用户，则将用户信息封装在Result对象中返回，表示请求成功</span></span><br><span class="line">    <span class="keyword">return</span> Result.success(user);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>测试结果</strong></p><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240617154357256.png" alt="image-20240617154357256"></p><p>​在测试结果中，用户的密码password同样也响应给客户端。密码通常是敏感信息，不应该在网络请求的响应中返回给客户端。这可能导致用户隐私泄露的问题。在设计和实现时，应实现将密码等敏感信息从序列化的过程中排除出去。</p><p>​<code>@JsonIgnore</code>是Jackson库中的一个注解，它用于在将Java对象序列化为JSON格式时忽略特定的属性。当你想要隐藏某些敏感信息或不希望这些信息被客户端看到时，比如密码、加密密钥等。在Java类的某个字段或方法上添加<code>@JsonIgnore</code>注解，Jackson在序列化过程中就会跳过这个字段或方法，不会将其包含在生成的JSON中。</p><p>​在本例中User类的password字段上加上**@JsonIgnore**，实现在被序列化成 JSON 时，<code>password</code> 字段将会被忽略，不会出现在生成的 JSON 中。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br></pre></td></tr></tbody></table></figure><p><strong>测试结果</strong></p><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240617155435964.png" alt="image-20240617155435964"></p><h3 id="ThreadLocal">ThreadLocal</h3><p><code>ThreadLocal</code>，即线程本地变量，提供线程局部变量。如果你创建了一个<code>ThreadLocal</code>变量，那么访问这个变量的每个线程都会有这个变量的一个本地拷贝，多个线程操作这个变量的时候，实际是在操作自己本地内存里面的变量，从而起到<strong>线程隔离</strong>的作用，避免了并发场景下的<a href="https://so.csdn.net/so/search?q=%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98&amp;spm=1001.2101.3001.7020">线程安全问题</a>。</p><ul><li>用来存取数据 : set()/get()</li><li>使用 ThreadLocal 存储的数据 , 线程安全</li><li>用完记得调用 remove 方法释放</li></ul><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240617160823649.png" alt="image-20240617160823649"></p><p>​在之前的代码中，我们使用**@RequestHeader**注解获取请求头中名为<code>Authorization</code>的头部的值，并使用JwtUtil工具类来解析token，获取其中的username。如果存在多个这样的接口，相应的会重复编写这串代码。通过拦截器中通一的解析token实现代码的复用</p><p><strong>导入ThreadLocal 工具类</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ThreadLocal 工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings("all")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalUtil</span> {</span><br><span class="line">    <span class="comment">//提供ThreadLocal对象,</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ThreadLocal</span> <span class="variable">THREAD_LOCAL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据键获取值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">get</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> (T) THREAD_LOCAL.get();</span><br><span class="line">    }</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//存储键值对</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(Object value)</span>{</span><br><span class="line">        THREAD_LOCAL.set(value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除ThreadLocal 防止内存泄漏</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span>{</span><br><span class="line">        THREAD_LOCAL.remove();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>在登录拦截器中实现线程局部变量</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>{</span><br><span class="line">    <span class="comment">// preHandle方法在请求处理之前调用（即在Controller方法之前）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 使用JwtUtil工具类解析令牌，获取其中的负载</span></span><br><span class="line">            Map&lt;String, Object&gt; claims = JwtUtil.parseToken(token);</span><br><span class="line">            <span class="comment">// 将解析出的负载存储到线程局部变量中，以便在后续的请求处理中可以使用</span></span><br><span class="line">            ThreadLocalUtil.set(claims);</span><br><span class="line">            <span class="comment">// 如果令牌验证成功，返回true，继续执行后续的请求处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="comment">// 如果解析令牌时出现异常，说明令牌可能无效或过期</span></span><br><span class="line">            <span class="comment">// 设置响应状态码为401</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="comment">// 返回false，不再继续执行后续的请求处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// afterCompletion方法在请求处理完成后调用（即在Controller方法之后）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="comment">// 清理线程局部变量，避免内存泄漏</span></span><br><span class="line">        ThreadLocalUtil.remove();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>修改/userInfo接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/userInfo")</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">userInfo</span><span class="params">()</span>{</span><br><span class="line">    Map&lt;String, Object&gt; map = ThreadLocalUtil.get();  <span class="comment">// 使用ThreadLocalUtil工具类从线程局部变量中获取存储的数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) map.get(<span class="string">"username"</span>);    <span class="comment">// 从获取的数据中提取用户名</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findByUserName(username);    <span class="comment">// 使用findByUserName方法根据用户名查询用户的信息</span></span><br><span class="line">    <span class="keyword">return</span> Result.success(user);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="更新用户基本信息">更新用户基本信息</h2><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240617195754402.png" alt="image-20240617195754402"></p><h3 id="三层架构-2">三层架构</h3><h4 id="UserController">UserController</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping("/update")</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> {</span><br><span class="line">    userService.update(user);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="UserServiceImpl">UserServiceImpl</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span> {</span><br><span class="line">    user.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    userMapper.update(user);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="UserMapper">UserMapper</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Update("update user set nickname = #{nickname},email = #{email},update_time = #{updateTime} where id = #{id}")</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="参数校验-2">参数校验</h3><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240617200259478.png" alt="image-20240617200259478"></p><p>对上述的更新用户基本信息update代码进行参数校验，不同与之前注册时对属性的参数，update方法传入的参数是一个User对象</p><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240617203311920.png" alt="image-20240617203311920"></p><p><strong>实体参数校验</strong></p><ol><li>实体类的成员变量上添加注解<ul><li>@NotNull</li><li>@NotEmpty</li><li>@Email</li></ul></li><li>接口方法的实体参数上添加 @Validated 注解</li></ol><h2 id="更新用户头像">更新用户头像</h2><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240618110700127.png" alt="image-20240618110700127"></p><h3 id="三层架构-3">三层架构</h3><p><strong>UserController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PatchMapping("/updateAvatar")</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateAvatar</span><span class="params">(<span class="meta">@RequestParam</span> <span class="meta">@URL</span> String avatarUrl)</span>{</span><br><span class="line">    userService.updateAvatar(avatarUrl);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>UserServiceImpl</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAvatar</span><span class="params">(String avatarUrl)</span> {</span><br><span class="line">    Map&lt;String, Object&gt; map = ThreadLocalUtil.get();<span class="comment">//ThreadLocalUtil中获取一个Map对象</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> (Integer) map.get(<span class="string">"id"</span>);<span class="comment">//从Map对象中获取用户id</span></span><br><span class="line">    userMapper.updateAvatar(avatarUrl,id);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>UserMapper</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Update("update user set user_pic = #{userPic},update_time = NOW() where id = #{id}")</span><span class="comment">//update_time字段更新为当前时间，使NOW()函数获取</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateAvatar</span><span class="params">(String userPic,Integer id)</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="知识要点-3">知识要点</h3><h4 id="参数校验-3"><strong>参数校验</strong></h4><p>@URL注解，通常用于参数验证，表示该参数必须是一个合法的URL格式。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateAvatar</span><span class="params">(<span class="meta">@RequestParam</span> <span class="meta">@URL</span> String avatarUrl)</span></span><br></pre></td></tr></tbody></table></figure><h4 id="PatchMapping"><code>@PatchMapping</code></h4><p><code>@PatchMapping</code> 注解用于将 <a href="https://so.csdn.net/so/search?q=HTTP&amp;spm=1001.2101.3001.7020">HTTP</a> PATCH 请求映射到指定的处理方法。HTTP PATCH 方法通常用于更新资源的部分内容，而不是替换整个资源。<code>@PatchMapping</code> 用于部分更新资源，而 <code>@PutMapping</code> 用于替换整个资源。<code>@PatchMapping</code> 请求仅包含要更新的部分内容，而 <code>@PutMapping</code> 请求包含完整的资源表述。</p><h2 id="更新用户密码">更新用户密码</h2><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240618154824407.png" alt="image-20240618154824407"></p><h3 id="三层架构-4">三层架构</h3><p><strong>Usercontroller</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PatchMapping("/updatePwd")</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updatePwd</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; params)</span>{</span><br><span class="line">    <span class="comment">// 从请求体中获取旧密码、新密码和确认密码。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">oldPwd</span> <span class="operator">=</span> params.get(<span class="string">"old_pwd"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">newPwd</span> <span class="operator">=</span> params.get(<span class="string">"new_pwd"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">re_pwd</span> <span class="operator">=</span> params.get(<span class="string">"re_pwd"</span>);</span><br><span class="line">    <span class="comment">// 判断这三个密码参数是否为空，如果为空，返回错误信息。</span></span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.hasLength(oldPwd)||!StringUtils.hasLength(newPwd)||!StringUtils.hasLength(re_pwd)){</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">"参数错误"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 从ThreadLocal中获取用户名，这通常在用户登录时设置。</span></span><br><span class="line">    Map&lt;String,Object&gt; map= ThreadLocalUtil.get();</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) map.get(<span class="string">"username"</span>);</span><br><span class="line">    <span class="comment">// 使用用户名查询当前登录的用户信息。</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.findByUserName(username);</span><br><span class="line">    <span class="comment">// 比较传入的旧密码的MD5值是否与数据库中的一致，不一致则返回错误信息。</span></span><br><span class="line">    <span class="keyword">if</span>(!Md5Util.getMD5String(oldPwd).equals(loginUser.getPassword())){</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">"旧密码错误"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 检查新密码是否与旧密码相同，如果相同则返回错误信息。</span></span><br><span class="line">    <span class="keyword">if</span>(Md5Util.getMD5String(newPwd).equals(loginUser.getPassword())){</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">"新密码不能与旧密码一致"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 检查新密码和确认密码是否相同，不同则返回错误信息。</span></span><br><span class="line">    <span class="keyword">if</span>(!newPwd.equals(re_pwd)){</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">"两次密码不一致"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 如果所有检查都通过，调用userService的updatePwd方法更新密码。</span></span><br><span class="line">    userService.updatePwd(newPwd);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>UserService</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePwd</span><span class="params">(String newPwd)</span> {</span><br><span class="line">    Map&lt;String, Object&gt; map = ThreadLocalUtil.get();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> (Integer) map.get(<span class="string">"id"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">md5String</span> <span class="operator">=</span> Md5Util.getMD5String(newPwd);<span class="comment">//对新密码进行MD5加密</span></span><br><span class="line">    userMapper.updatePwd(md5String,id);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>UserMapper</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Update("update user set password = #{newPwd},update_time = now() where id = #{id}")</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updatePwd</span><span class="params">(String newPwd, Integer id)</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="新增文章分类">新增文章分类</h2><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240619091431586.png" alt="image-20240619091431586"></p><h3 id="三层架构-5">三层架构</h3><p><strong>CategoryController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/category")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> Category category)</span>{</span><br><span class="line">        categoryService.add(category);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>CategoryServiceImpl</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CategoryService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Category category)</span> {</span><br><span class="line">        Map&lt;String,Object&gt; map = ThreadLocalUtil.get();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> (Integer) map.get(<span class="string">"id"</span>);<span class="comment">//获取当前用户id值</span></span><br><span class="line">        category.setCreateTime(LocalDateTime.now());</span><br><span class="line">        category.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        category.setCreateUser(id);<span class="comment">//将当前用户id值赋给创建分类用户Create_User字段</span></span><br><span class="line">        categoryMapper.add(category);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>CategoryMapper</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> {</span><br><span class="line">    <span class="meta">@Insert("insert into category(category_name, category_alias, create_user, create_time, update_time)" +</span></span><br><span class="line"><span class="meta">            " VALUE(#{categoryName},#{categoryAlias},#{createUser},#{createTime},#{updateTime})")</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Category category)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="知识要点-4">知识要点</h3><p><strong>参数校验</strong></p><p>未进行控制层的参数校验之前，测试时如果传入categoryName或categoryName为空，系统会在SQL层抛出错误，通过参数校验，实现controller层抛出错误</p><p>1.在Category实体类 categoryName， categoryName字段上添加@NotEmpty注解</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="keyword">private</span> String categoryName;<span class="comment">//分类名称</span></span><br><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="keyword">private</span> String  categoryName;<span class="comment">//分类别名</span></span><br></pre></td></tr></tbody></table></figure><p>2.在控制层对应方法参数前加上@Validated注解</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> Category category)</span></span><br></pre></td></tr></tbody></table></figure><h2 id="文章分类列表">文章分类列表</h2><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240619093838445.png" alt="image-20240619093838445"></p><h3 id="三层架构-6">三层架构</h3><p><strong>CategoryController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">()</span>{</span><br><span class="line">    List&lt;Category&gt; cs = categoryService.list();</span><br><span class="line">    <span class="keyword">return</span> Result.success(cs);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>CategoryServiceImpl</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Category&gt; <span class="title function_">list</span><span class="params">()</span> {</span><br><span class="line">    Map&lt;String,Object&gt; map = ThreadLocalUtil.get();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> (Integer) map.get(<span class="string">"id"</span>);<span class="comment">//获取当前用户id</span></span><br><span class="line">    <span class="keyword">return</span> categoryMapper.list(id);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>CategoryMapper</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Select("select * from category where create_user = #{id}")</span></span><br><span class="line"> List&lt;Category&gt; <span class="title function_">list</span><span class="params">(Integer id)</span>;<span class="comment">//id是user表id，也就是category表的create_user</span></span><br></pre></td></tr></tbody></table></figure><h3 id="知识要点-5">知识要点</h3><p><strong>@JsonFormat注解</strong></p><p>用于格式化Java对象中的日期和时间属性，当这个对象被转换为JSON字符串时，会按照指定的格式来格式化日期和时间</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> LocalDateTime createTime;<span class="comment">//创建时间</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;<span class="comment">//更新时间</span></span><br></pre></td></tr></tbody></table></figure><p><strong>测试结果：</strong></p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"categoryName"</span><span class="punctuation">:</span> <span class="string">"美食"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"categoryAlias"</span><span class="punctuation">:</span> <span class="string">"ms"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"createUser"</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"createTime"</span><span class="punctuation">:</span> <span class="string">"2024-06-18T17:29:26"</span><span class="punctuation">,</span><span class="comment">//未使用注解</span></span><br><span class="line"><span class="attr">"updateTime"</span><span class="punctuation">:</span> <span class="string">"2024-06-18 17:29:26"</span><span class="comment">//使用了@JsonFrmat注解</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h2 id="获取文章分类详情">获取文章分类详情</h2><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240619100801212.png" alt="image-20240619100801212"></p><h3 id="三层架构-7">三层架构</h3><p><strong>CategoryController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/detail")</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Category&gt; <span class="title function_">detail</span><span class="params">(Integer id)</span>{<span class="comment">//参数id使category表的id</span></span><br><span class="line">    <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.detail(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(category);<span class="comment">//返会category对象</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>CategoryServiceImpl</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Category <span class="title function_">detail</span><span class="params">(Integer id)</span> {</span><br><span class="line">    <span class="keyword">return</span> categoryMapper.findById(id);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>CategoryMapper</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Select("select * from category where id = #{id}")</span></span><br><span class="line">Category <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="更新文章分类">更新文章分类</h2><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240619102814168.png" alt="image-20240619102814168"></p><h3 id="三层架构-8">三层架构</h3><p><strong>CategoryController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(Category.Update.class)</span> Category category)</span>{<span class="comment">//@Validated参数校验</span></span><br><span class="line">    categoryService.update(category);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br></pre></td></tr></tbody></table></figure><p><strong>CategoryServiceImpl</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Category category)</span> {</span><br><span class="line">    category.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    categoryMapper.update(category);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>CategoryMapper</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Update("update category set category_name=#{categoryName},category_alias=#{categoryAlias},update_time=#{updateTime} where id=#{id}")</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Category category)</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="知识要点-6">知识要点</h3><h4 id="参数校验-4">参数校验</h4><p>更新文章分类参数说明：</p><table><thead><tr><th>参数名称</th><th>说明</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>主键ID</td><td>number</td><td>是</td><td></td></tr><tr><td>categoryName</td><td>分类名称</td><td>string</td><td>是</td><td></td></tr><tr><td>categoryAlias</td><td>分类别名</td><td>string</td><td>是</td><td></td></tr></tbody></table><p>id、categoryName、categoryAlias均为必须，故在实体类Category类的相关字段上添加相应注解</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> Integer id;<span class="comment">//主键ID</span></span><br><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="keyword">private</span> String categoryName;<span class="comment">//分类名称</span></span><br><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="keyword">private</span> String categoryAlias;<span class="comment">//分类别名</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：在新增文章分类中，已经为categoryName、categoryAlias添加了@NotEmpty注解。通过给id、categoryName、categoryAlias添加注解，以及为控制层方法参数添加@Validated注解，实现了更新文章分类的参数校验，但我们注意到在新增文章分类方法中，也为相同的参数category添加了@Validated参数校验。此时，在执行新增文章分类时，会抛出id 不能为null的错误。为解决此问题，就要用到分组校验。</p><h4 id="分组校验"><strong>分组校验</strong></h4><p>​把校验项进行归类分组，在完成不同的功能的时候，校验指定组中的校验项</p><ol><li><p>定义分组</p><p>在category实体类中定义了两个空接口Add和Update，用于分组校验</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Add</span>{</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">interface</span> <span class="title class_">Update</span>{</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>定义校验项时指定归属的分组</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@NotNull(groups = Update.class)</span></span><br><span class="line"><span class="keyword">private</span> Integer id;<span class="comment">//主键ID</span></span><br><span class="line"><span class="meta">@NotEmpty(groups = {Add.class, Update.class})</span></span><br><span class="line"><span class="keyword">private</span> String categoryName;<span class="comment">//分类名称</span></span><br><span class="line"><span class="meta">@NotEmpty(groups = {Add.class, Update.class})</span></span><br><span class="line"><span class="keyword">private</span> String categoryAlias;<span class="comment">//分类别名</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>校验时指定要校验的分组</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(Category.Update.class)</span> Category category)</span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(Category.Add.class)</span> Category category)</span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>注：</strong></p><ul><li><p>定义校验时，如果没有指定分组，默认属于default组</p></li><li><p>分组之间可以继承，A extends B，那么A用有B中所有的校验项</p><p>上述步骤2.定义校验项时指定归属的分组，可简化如下</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@NotNull(groups = Update.class)</span></span><br><span class="line"><span class="keyword">private</span> Integer id;<span class="comment">//主键ID</span></span><br><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="keyword">private</span> String categoryName;<span class="comment">//分类名称</span></span><br><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="keyword">private</span> String categoryAlias;<span class="comment">//分类别名</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="删除文章分类">删除文章分类</h2><h3 id="三层架构-9">三层架构</h3><p><strong>CategoryController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(Integer id)</span>{</span><br><span class="line">    categoryService.delete(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>CategoryServiceImpl</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> {</span><br><span class="line">    categoryMapper.delete(id);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>CategoryMapper</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Delete("delete from category where id=#{id}")</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="新增文章">新增文章</h2><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240619161039625.png" alt="image-20240619161039625"></p><h3 id="三层架构-10">三层架构</h3><p><strong>ArticleController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/article")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Article article)</span>{</span><br><span class="line">        articleService.add(article);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>ArticleServiceImpl</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ArticleService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleMapper articleMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Article article)</span> {</span><br><span class="line">        Map&lt;String,Object&gt; map = ThreadLocalUtil.get();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> (Integer) map.get(<span class="string">"id"</span>);</span><br><span class="line">        article.setCreateUser(id);</span><br><span class="line">        article.setCreateTime(LocalDateTime.now());</span><br><span class="line">        article.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        articleMapper.add(article);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>ArticleMapper</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ArticleMapper</span> {</span><br><span class="line">    <span class="meta">@Insert("insert into article(title,content,cover_img,state,category_id,create_user,create_time,update_time)" +"" +</span></span><br><span class="line"><span class="meta">            "values (#{title},#{content},#{coverImg},#{state},#{categoryId},#{createUser},#{createTime},#{updateTime})")</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Article article)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="知识要点-7">知识要点</h3><h4 id="参数校验-5"><strong>参数校验</strong></h4><p>新增文章请求参数说明：</p><table><thead><tr><th>参数名称</th><th>说明</th><th>类型</th><th>是否必须</th><th>备注</th><th></th></tr></thead><tbody><tr><td>title</td><td>文章标题</td><td>string</td><td>是</td><td>1~10个非空字符</td><td></td></tr><tr><td>content</td><td>文章正文</td><td>string</td><td>是</td><td></td><td></td></tr><tr><td>coverImg</td><td>封面图像地址</td><td>string</td><td>是</td><td>必须是url地址</td><td></td></tr><tr><td>state</td><td>发布状态</td><td>string</td><td>是</td><td>已发布 | 草稿</td><td></td></tr><tr><td>categoryId</td><td>文章分类ID</td><td>number</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>自定义参数校验</strong><br>已有的注解不能满足所有的校验需求，特殊的情况需要自定义校验 ( 自定义校验注解 )</p><ol><li><p>自定义注解 State</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.anno;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span><span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Target({FIELD})</span><span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span><span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = {StateVlidation.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> State {</span><br><span class="line">    <span class="comment">//提供校验后的提示信息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">"{state参数的值只能是已发布或草稿}"</span>;</span><br><span class="line">    <span class="comment">//指定分组</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> {};</span><br><span class="line">    <span class="comment">//负载 获取到State注解的附加信息</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> {};</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>自定义校验数据的类 StateValidation实现 ConstraintValidator 接口</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.validation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StateVlidation</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;State,String&gt; {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> {</span><br><span class="line">        <span class="keyword">if</span>(value==<span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(value.equals(<span class="string">"已发布"</span>)||value.equals(<span class="string">"草稿"</span>)){</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>在需要校验的地方使用自定义注解</p></li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Article</span> {</span><br><span class="line">    <span class="keyword">private</span> Integer id;<span class="comment">//主键ID</span></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = "^\\S{1,10}$")</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">//文章标题</span></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String content;<span class="comment">//文章内容</span></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="meta">@URL</span></span><br><span class="line">    <span class="keyword">private</span> String coverImg;<span class="comment">//封面图像</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span></span><br><span class="line">    <span class="keyword">private</span> String state;<span class="comment">//发布状态 已发布|草稿</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer categoryId;<span class="comment">//文章分类id</span></span><br><span class="line">    <span class="keyword">private</span> Integer createUser;<span class="comment">//创建人ID</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;<span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;<span class="comment">//更新时间</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="文章列表-条件分页">文章列表 ( 条件分页 )</h2><h3 id="引入pagehelper依赖">引入pagehelper依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="导入PageBean实体">导入PageBean实体</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分页返回结果对象</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageBean</span> &lt;T&gt;{</span><br><span class="line">    <span class="keyword">private</span> Long total;<span class="comment">//总条数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; items;<span class="comment">//当前页数据集合</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="三层架构-11">三层架构</h3><h4 id="ArticleController"><strong>ArticleController</strong></h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="comment">// pageNum参数用于接收请求的页码，pageSize参数用于接收每页显示的记录数；</span></span><br><span class="line"><span class="comment">//@RequestParam(required = false)表示该参数是可选的，可输入也可不输入</span></span><br><span class="line"> <span class="keyword">public</span>  Result&lt;PageBean&lt;Article&gt; &gt; list(Integer pageNum, Integer pageSize, <span class="meta">@RequestParam(required = false)</span> Integer categoryId, <span class="meta">@RequestParam(required = false)</span> String state){</span><br><span class="line">     PageBean&lt;Article&gt; pageBean = articleService.list(pageNum,pageSize,categoryId,state);  <span class="comment">// 获取分页查询的结果，并存储在pageBean对象中</span></span><br><span class="line">     <span class="keyword">return</span> Result.success(pageBean);</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p><strong>ArticleServiceImpl</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重写list方法，以实现分页查询文章列表的功能。</span></span><br><span class="line"><span class="comment"> * 根据传入的页码、每页记录数、分类ID和文章状态来筛选和分页文章。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageNum 请求的页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 每页显示的记录数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> categoryId 文章分类ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> state 文章的状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 包含分页信息和文章列表的PageBean对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageBean&lt;Article&gt; <span class="title function_">list</span><span class="params">(Integer pageNum, Integer pageSize, Integer categoryId, String state)</span> {</span><br><span class="line">    PageBean&lt;Article&gt; pb = <span class="keyword">new</span> <span class="title class_">PageBean</span>&lt;&gt;();    <span class="comment">// 创建PageBean对象，用于存储分页信息和文章列表</span></span><br><span class="line">    PageHelper.startPage(pageNum, pageSize);    <span class="comment">//开启分页查询</span></span><br><span class="line">    Map&lt;String, Object&gt; map = ThreadLocalUtil.get();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> (Integer) map.get(<span class="string">"id"</span>);<span class="comment">//获取用户当前id</span></span><br><span class="line">    List&lt;Article&gt; as = articleMapper.list(categoryId, state, id);    </span><br><span class="line">    <span class="comment">// 将查询结果转换为Page对象</span></span><br><span class="line">    Page&lt;Article&gt; p = (Page&lt;Article&gt;) as;    </span><br><span class="line">    <span class="comment">// 设置PageBean的总记录数，从Page对象中获取</span></span><br><span class="line">    pb.setTotal(p.getTotal());</span><br><span class="line">    <span class="comment">// 设置PageBean的文章列表，从Page对象中获取查询结果</span></span><br><span class="line">    pb.setItems(p.getResult());</span><br><span class="line">    <span class="comment">// 返回包含分页信息和文章列表的PageBean对象</span></span><br><span class="line">    <span class="keyword">return</span> pb;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>ArticleMapper</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;Article&gt; <span class="title function_">list</span><span class="params">(Integer categoryId, String state, Integer id)</span>;</span><br></pre></td></tr></tbody></table></figure><p><strong>ArticleMapper.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zjf.mapper.ArticleMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"com.zjf.pojo.Article"</span>&gt;</span></span><br><span class="line">        select * from article</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"categoryId!=null"</span>&gt;</span></span><br><span class="line">             category_id=#{categoryId}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state!=null and state!=''"</span>&gt;</span></span><br><span class="line">            and state=#{state}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            and create_user=#{id}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="知识要点-8">知识要点</h3><h4 id="RequestParam">@RequestParam</h4><p><strong>@RequestParam</strong>注解是将请求参数绑定到控制器的方法参数上</p><p><strong>1、语法：</strong>@RequestParam(value=”参数名”,required=”true/false”,defaultValue=””)</p><p><strong>2、属性：</strong></p><ul><li><strong>value</strong>：表示参数名，即前端页面传过来的参数名</li><li><strong>defaultValue</strong>：参数默认值，如果设置了该值，required=true将失效，自动为false,如果没有传该参数，就使用默认值</li><li><strong>required</strong>：表示是否要强制包含该参数，默认值为false,表示允许请求中不包含该参数，并且该参数值会为设为null。true表示该请求中必须包含该参数否则报错</li></ul><hr><h4 id="动态SQL">动态SQL</h4><blockquote><p><a href="https://mybatis.net.cn/dynamic-sql.html">动态 SQL_MyBatis中文网</a></p></blockquote><h2 id="获取文章详情">获取文章详情</h2><h3 id="三层架构-12">三层架构</h3><p><strong>ArticleController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/detail")</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">detail</span><span class="params">(Integer id)</span>{</span><br><span class="line">   <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> articleService.findById(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(article);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>ArticleServiceImpl</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Article <span class="title function_">findById</span><span class="params">(Integer id)</span> {</span><br><span class="line"> <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span>  articleMapper.findById(id);</span><br><span class="line"> <span class="keyword">return</span> article;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>ArticleMapper</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Select("select * from article where id=#{id}")</span></span><br><span class="line">Article <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="参数校验-6">参数校验</h3><p>响应参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td>响应码, 0-成功,1-失败</td><td></td></tr><tr><td>message</td><td>string</td><td>非必须</td><td></td><td>提示信息</td><td></td></tr><tr><td>data</td><td>object</td><td>必须</td><td></td><td>返回的数据</td><td></td></tr><tr><td>|-id</td><td>number</td><td>非必须</td><td></td><td>主键ID</td><td></td></tr><tr><td>|-title</td><td>string</td><td>非必须</td><td></td><td>文章标题</td><td></td></tr><tr><td>|-content</td><td>string</td><td>非必须</td><td></td><td>文章正文</td><td></td></tr><tr><td>|-coverImg</td><td>string</td><td>非必须</td><td></td><td>文章封面图像地址</td><td></td></tr><tr><td>|-state</td><td>string</td><td>非必须</td><td></td><td>发布状态</td><td>已发布|草稿</td></tr><tr><td>|-categoryId</td><td>number</td><td>非必须</td><td></td><td>文章分类ID</td><td></td></tr><tr><td>|-createTime</td><td>string</td><td>非必须</td><td></td><td>创建时间</td><td></td></tr><tr><td>|-updateTime</td><td>string</td><td>非必须</td><td></td><td>更新时间</td><td></td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"code"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"message"</span><span class="punctuation">:</span> <span class="string">"操作成功"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"data"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"id"</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"title"</span><span class="punctuation">:</span> <span class="string">"北京旅游攻略"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"content"</span><span class="punctuation">:</span> <span class="string">"天安门,颐和园,鸟巢,长城...爱去哪去哪..."</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"coverImg"</span><span class="punctuation">:</span> <span class="string">"https://big-event-gwd.oss-cn-beijing.aliyuncs.com/9bf1cf5b-1420-4c1b-91ad-e0f4631cbed4.png"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"state"</span><span class="punctuation">:</span> <span class="string">"已发布"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"categoryId"</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"createTime"</span><span class="punctuation">:</span> <span class="string">"2023-09-03 11:35:04"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"updateTime"</span><span class="punctuation">:</span> <span class="string">"2023-09-03 11:40:31"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>使用@JsonIgnore 注解在序列化和反序列化时忽略createUser字段；使用@JsonFormat(pattern = “yyyy-MM-dd HH:mm:ss”) 注解在序列化和反序列化时，按照指定的日期时间格式进行处理。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> Integer createUser;<span class="comment">//创建人ID</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;<span class="comment">//创建时间</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;<span class="comment">//更新时间</span></span><br></pre></td></tr></tbody></table></figure><h2 id="更新文章">更新文章</h2><h3 id="三层架构-13">三层架构</h3><p><strong>ArticleController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(Category.Update.class)</span> Category category)</span>{</span><br><span class="line">    categoryService.update(category);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>ArticleServiceImpl</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Category category)</span> {</span><br><span class="line">    category.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    categoryMapper.update(category);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>ArticleMapper</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Update("update article set title=#{title},content=#{content},cover_img=#{coverImg},state=#{state},category_id=#{categoryId},update_time=now() where id=#{id}")</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Article article)</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="参数校验-7">参数校验</h3><p><strong>请求参数说明：</strong></p><table><thead><tr><th>参数名称</th><th>说明</th><th>类型</th><th>是否必须</th><th>备注</th><th></th></tr></thead><tbody><tr><td>id</td><td>主键ID</td><td>number</td><td>是</td><td></td><td></td></tr><tr><td>title</td><td>文章标题</td><td>string</td><td>是</td><td></td><td></td></tr><tr><td>content</td><td>文章正文</td><td>string</td><td>是</td><td></td><td></td></tr><tr><td>coverImg</td><td>封面图像地址</td><td>string</td><td>是</td><td></td><td></td></tr><tr><td>state</td><td>发布状态</td><td>string</td><td>是</td><td>已发布 | 草稿</td><td></td></tr><tr><td>categoryId</td><td>文章分类ID</td><td>number</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>分组校验：</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Article</span> {</span><br><span class="line">    <span class="meta">@NotNull(groups = Article.update.class)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;<span class="comment">//主键ID</span></span><br><span class="line">    <span class="comment">//新增文章已添加，保持不变</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">add</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">update</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(Article.add.class)</span> Article article)</span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(Article.update.class)</span> Article article)</span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="删除文章">删除文章</h2><h3 id="三层架构-14">三层架构</h3><p><strong>ArticleController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(Integer id)</span>{</span><br><span class="line">      articleService.delete(id);</span><br><span class="line">      <span class="keyword">return</span> Result.success();</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><strong>ArticleServiceImpl</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> {</span><br><span class="line">        articleMapper.delete(id);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p><strong>ArticleMapper</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Delete("delete from article where id=#{id}")</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="文件上传">文件上传</h2><h3 id="本地存储">本地存储</h3><p><strong>FileUploadController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadController</span> {</span><br><span class="line">    <span class="meta">@PostMapping("/upload")</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="comment">// 获取上传文件的原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 生成一个新的文件名，防止文件名冲突</span></span><br><span class="line">        <span class="comment">// 使用UUID生成唯一标识，并保留原始文件的扩展名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将文件保存到本地文件系统的代码</span></span><br><span class="line">         file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\桌面\\大事件\\files\\"</span> + filename));</span><br><span class="line">        <span class="comment">// 返回一个包含文件URL的Result对象，表示文件上传成功</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">"url地址......"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="阿里云-OSS">阿里云 OSS</h3><p>阿里云对象存储 OSS （ Object Storage Service ），是一款海量、安全、低成本、高可靠的云存储服务。使用 OSS ，您<br>可以通过网络随时存储和调用包括文本、图片、音频和视频等在内的各种文件。</p><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240621161522818.png" alt="image-20240621161522818"></p><ul><li>使用操作说明详见 <strong>大事件\04_综合案例资料\05_阿里云oss\AliOSS.pdf</strong></li><li><a href="https://help.aliyun.com/zh/oss/developer-reference/java-installation?spm=a2c4g.11186623.6.919.7c264562C2Fjfs">OSS快速入门官方参考文档</a></li></ul><hr><h4 id="实现步骤">实现步骤</h4><ol><li><p><strong>引入SDK</strong></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>导入 AliOssUtil工具类</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf.bigeventadmin.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOssUtil</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ENDPOINT</span> <span class="operator">=</span> <span class="string">"https://oss-cn-beijing.aliyuncs.com"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESS_KEY_ID</span> <span class="operator">=</span> <span class="string">"LTAI5tQ8e13igWZUMTjMEEQV"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET_ACCESS_KEY</span> <span class="operator">=</span> <span class="string">"MffMJoM24sc59SEBEJQDb0cfBVOAC9"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUCKET_NAME</span> <span class="operator">=</span> <span class="string">"big-event-gwd"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传文件,返回文件的公网访问地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">uploadFile</span><span class="params">(String objectName, InputStream inputStream)</span>{</span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(ENDPOINT,ACCESS_KEY_ID,SECRET_ACCESS_KEY);</span><br><span class="line">        <span class="comment">//公文访问地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 创建存储空间。</span></span><br><span class="line">            ossClient.createBucket(BUCKET_NAME);</span><br><span class="line">            ossClient.putObject(BUCKET_NAME, objectName, inputStream);</span><br><span class="line">            url = <span class="string">"https://"</span>+BUCKET_NAME+<span class="string">"."</span>+ENDPOINT.substring(ENDPOINT.lastIndexOf(<span class="string">"/"</span>)+<span class="number">1</span>)+<span class="string">"/"</span>+objectName;</span><br><span class="line">        } <span class="keyword">catch</span> (OSSException oe) {</span><br><span class="line">            System.out.println(<span class="string">"Caught an OSSException, which means your request made it to OSS, "</span></span><br><span class="line">                    + <span class="string">"but was rejected with an error response for some reason."</span>);</span><br><span class="line">            System.out.println(<span class="string">"Error Message:"</span> + oe.getErrorMessage());</span><br><span class="line">            System.out.println(<span class="string">"Error Code:"</span> + oe.getErrorCode());</span><br><span class="line">            System.out.println(<span class="string">"Request ID:"</span> + oe.getRequestId());</span><br><span class="line">            System.out.println(<span class="string">"Host ID:"</span> + oe.getHostId());</span><br><span class="line">        } <span class="keyword">catch</span> (ClientException ce) {</span><br><span class="line">            System.out.println(<span class="string">"Caught an ClientException, which means the client encountered "</span></span><br><span class="line">                    + <span class="string">"a serious internal problem while trying to communicate with OSS, "</span></span><br><span class="line">                    + <span class="string">"such as not being able to access the network."</span>);</span><br><span class="line">            System.out.println(<span class="string">"Error Message:"</span> + ce.getMessage());</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) {</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><p><em><strong>注意</strong></em>： ENDPOINT ，ACCESS_KEY_ID,ACCESS_KEY_SECRET，BUCKET_NAME根据个人对象存储OSS进行修改</p><ol start="3"><li><p><strong>FileUploadController</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping("/upload")</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> UUID.randomUUID().toString()+originalFilename.substring(originalFilename.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> AliOssUtil.uploadFile(filename, file.getInputStream());</span><br><span class="line">    <span class="keyword">return</span> Result.success(url);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="登陆优化-redis">登陆优化-redis</h2><p>​在原来的登陆实现中，用户登陆系统，当修改密码成功后，那将来用户需要使用新的密码重新登陆系统。重新登录成功后，后台会下发新的令牌，但旧的令牌在之前的程序中没有作废，仍然可以使用旧的令牌访问用户资源。</p><h3 id="SpringBoot-集成-redis">SpringBoot 集成 redis</h3><ul><li>导入 spring-boot-starter-data-redis 起步依赖</li></ul>  <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>在 yml 配置文件中 , 配置 redis 连接信息</li></ul>  <figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></tbody></table></figure><ul><li>调用 API(StringRedisTemplate) 完成字符串的存取操作</li></ul><p>​编写redis测试代码</p>  <figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTest</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span></span><br><span class="line">    {</span><br><span class="line">        ValueOperations&lt;String, String&gt; operations = stringRedisTemplate.opsForValue();</span><br><span class="line">        operations.set(<span class="string">"username"</span>, <span class="string">"zjf"</span>);</span><br><span class="line">        operations.set(<span class="string">"id"</span>,<span class="string">"1"</span>,<span class="number">15</span>, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span></span><br><span class="line">    {</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">"username"</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="令牌主动失效机制">令牌主动失效机制</h3><ul><li>登录成功后，给浏览器响应令牌的同时，把该令牌存储到 redis 中</li></ul>  <figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">/省略无关代码，保持不变/</span><br><span class="line">    </span><br><span class="line">       <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate; </span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping("/login")</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@Pattern(regexp = "^\\S{5,16}$")</span> String username, <span class="meta">@Pattern(regexp = "^\\S{5,16}$")</span> String password)</span> {</span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.findByUserName(username);</span><br><span class="line">    <span class="comment">//判断该用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (loginUser == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">"用户名错误"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断密码是否正确  loginUser对象中的password是密文</span></span><br><span class="line">    <span class="keyword">if</span> (Md5Util.getMD5String(password).equals(loginUser.getPassword())) {</span><br><span class="line">        <span class="comment">//登录成功</span></span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        claims.put(<span class="string">"id"</span>, loginUser.getId());</span><br><span class="line">        claims.put(<span class="string">"username"</span>, loginUser.getUsername());</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.genToken(claims);</span><br><span class="line">         <span class="comment">// 使用stringRedisTemplate操作Redis，将token作为key，token本身作为value存入Redis</span></span><br><span class="line">        <span class="comment">// 设置过期时间为1小时</span></span><br><span class="line">        ValueOperations&lt;String, String&gt; operations = stringRedisTemplate.opsForValue();</span><br><span class="line">        operations.set(token, token, <span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line">        ValueOperations&lt;String, String&gt; operations = stringRedisTemplate.opsForValue();</span><br><span class="line">        operations.set(token, token, <span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line">        <span class="keyword">return</span> Result.success(token);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">"密码错误"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>LoginInterceptor 拦截器中，需要验证浏览器携带的令牌，并同时需要获取到 redis 中存储的与之相同的令牌</li></ul>  <figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        ValueOperations&lt;String, String&gt; operations = stringRedisTemplate.opsForValue();</span><br><span class="line">        <span class="type">String</span> <span class="variable">redisToken</span> <span class="operator">=</span> operations.get(token);</span><br><span class="line">        <span class="keyword">if</span> (redisToken == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; claims = JwtUtil.parseToken(token);</span><br><span class="line">        ThreadLocalUtil.set(claims);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        response.setStatus(<span class="number">401</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>当用户修改密码成功后，删除 redis 中存储的旧令牌</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PatchMapping("/updatePwd")</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updatePwd</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; params,<span class="meta">@RequestHeader("Authorization")</span> String token)</span>{</span><br><span class="line">    <span class="type">String</span> <span class="variable">oldPwd</span> <span class="operator">=</span> params.get(<span class="string">"old_pwd"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">newPwd</span> <span class="operator">=</span> params.get(<span class="string">"new_pwd"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">re_pwd</span> <span class="operator">=</span> params.get(<span class="string">"re_pwd"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.hasLength(oldPwd)||!StringUtils.hasLength(newPwd)||!StringUtils.hasLength(re_pwd)){</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">"参数错误"</span>);</span><br><span class="line">    }</span><br><span class="line">    Map&lt;String,Object&gt; map= ThreadLocalUtil.get();</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) map.get(<span class="string">"username"</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.findByUserName(username);</span><br><span class="line">    <span class="keyword">if</span>(!Md5Util.getMD5String(oldPwd).equals(loginUser.getPassword())){</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">"旧密码错误"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(Md5Util.getMD5String(newPwd).equals(loginUser.getPassword())){</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">"新密码不能与旧密码一致"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(!newPwd.equals(re_pwd)){</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">"两次密码不一致"</span>);</span><br><span class="line">    }</span><br><span class="line">    userService.updatePwd(newPwd);</span><br><span class="line">    ValueOperations&lt;String, String&gt; operations = stringRedisTemplate.opsForValue();</span><br><span class="line">    operations.getOperations().delete(token);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="SpringBoot-项目部署">SpringBoot 项目部署</h2><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240622102014405.png" alt="image-20240622102014405"></p><ol><li><p>引入插件</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>Maven中Lifecycle执行package命令</p></li><li><p>在target目录下，CMD执行命令java -jar big_event-0.0.1-SNAPSHOT.jar</p></li></ol><h2 id="属性配置方式">属性配置方式</h2><h3 id="项目配置文件方式">项目配置文件方式</h3><p>在项目resources文件夹下application.yml文件下配置</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></tbody></table></figure><h3 id="命令行参数方式">命令行参数方式</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">java -jar big_event-0.0.1-SNAPSHOT.jar --server.port=8081</span><br></pre></td></tr></tbody></table></figure><h3 id="环境变量方式">环境变量方式</h3><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240622104358615.png" alt="image-20240622104358615"></p><h3 id="外部配置文件方式">外部配置文件方式</h3><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240622104433560.png" alt="image-20240622104433560"></p><h3 id="配置优先级">配置优先级</h3><ol><li>命令行参数</li><li>操作系统环境变量</li><li>Jar 包所在目录下的 application.yml</li><li>项目中 resources 目录下的 application.yml</li></ol><h2 id="多环境开发-Profiles">多环境开发-Profiles</h2><h3 id="1-单文件配置">1. 单文件配置</h3><p>在实际项目的开发过程中，我们程序往往需要在不同环境中运行。例如：开发环境、测试环境和生产环境。</p><p>每个环境中的配置参数可能都会有所不同，例如数据库连接信息、文件服务器等等。</p><p>SpringBoot 提供的 Profiles 可以用来隔离应用程序配置的各个部分，并在特定环境下指定部分配置生效</p><ul><li><p>如何分隔不同环境的配置？</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>如何指定哪些配置属于哪个环境？</p></li></ul>  <figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">config:</span></span><br><span class="line">  <span class="attr">activate:</span></span><br><span class="line">   <span class="attr">on-profile:</span> <span class="string">环境名称</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>如何指定哪个环境的配置生效？</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">环境名称</span></span><br></pre></td></tr></tbody></table></figure><p>示例：appliction.yml</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 通用信息，指定生生效的环境</span></span><br><span class="line"><span class="comment">#多环境下的共性的属性</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 生产环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 测试环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test</span></span><br><span class="line"><span class="string">server:8083</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>**注：**如果特定环境中的配置和通用信息冲突了，特定环境配置生效</p><h3 id="2-多文件配置">2. 多文件配置</h3></li></ul><p>开发(<code>dev</code>)、测试（<code>test</code>）、生产（<code>prod</code>）分别建立配置文件</p><ul><li><p><code>application.yml</code> 或者<code>application.properties</code> 用于存放所有环境通用的配置，指定激活的环境</p></li><li><p><code>application-dev.yml</code>或者<code>application-dev.properties</code> 存放开发环境的特殊配置</p></li><li><p><code>application-test.yml</code>或者<code>application-test.properties </code>存放测试环境的特殊配置</p></li><li><p><code>application-prod.yml</code>或者<code>application-prod.properties </code>存放生产环境的特殊配置</p><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240623132335188.png" alt="image-20240623132335188"></p><h2 id="多环境开发-Pofiles-分组">多环境开发 -Pofiles- 分组</h2></li></ul><p><img src="/2024/06/03/%E5%AE%9E%E6%88%98%E7%AF%87/%E5%9B%BE%E7%89%87/image-20240623132458051.png" alt="image-20240623132458051"></p><p>示例：</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">"dev":</span> <span class="string">devDB,devServer,devSelf</span></span><br><span class="line">      <span class="attr">"pro":</span> <span class="string">proDB,proServer,proSelf</span></span><br><span class="line">      <span class="attr">"test":</span> <span class="string">testDB,testServer,testself</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>黑马大事件前端代码</title>
      <link href="/2024/06/03/%E9%BB%91%E9%A9%AC%E5%A4%A7%E4%BA%8B%E4%BB%B6%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81/"/>
      <url>/2024/06/03/%E9%BB%91%E9%A9%AC%E5%A4%A7%E4%BA%8B%E4%BB%B6%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1>黑马大事件前端代码</h1><h2 id="一、环境准备">一、环境准备</h2><h3 id="1-1-创建vue工程-big-event">1.1 创建vue工程(big-event)</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">npm init vue@latest</span><br><span class="line"></span><br><span class="line">cd big-event</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-安装插件">1.2 安装插件</h3><ol><li><p>安装element-plus</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.1</span> 执行命令: npm install element-plus --save</span><br><span class="line"><span class="number">1.2</span> 在main.<span class="property">js</span>中做如下配置</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-plus/dist/index.css'</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装axios</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装sass依赖</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">npm install sass -D</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="1-3-目录调整">1.3 目录调整</h3><ol><li><p>删除components目录下的内容</p></li><li><p>删除App.vue中的内容，只保留script和template标签</p></li><li><p>新建如下目录：</p></li></ol><p>​api：存放接口调用的js文件</p><p>​utils：存放工具js文件</p><p>​  拷贝request.js到util目录</p><p>​views：存放页面的.vue文件</p><ol start="4"><li>删除assets目录中的内容， 将资料中的静态资源文件全部拷贝到该目录下</li></ol><h2 id="二、注册">二、注册</h2><h3 id="2-1-页面搭建">2.1 页面搭建</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">User</span>, <span class="title class_">Lock</span> } <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//控制注册与登录表单的显示， 默认显示注册</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isRegister = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">class</span>=<span class="string">"login-page"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"12"</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"6"</span> <span class="attr">:offset</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注册表单 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">"form"</span> <span class="attr">size</span>=<span class="string">"large"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">v-if</span>=<span class="string">"isRegister"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">:prefix-icon</span>=<span class="string">"User"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">:prefix-icon</span>=<span class="string">"Lock"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">:prefix-icon</span>=<span class="string">"Lock"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入再次密码"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 注册按钮 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">auto-insert-space</span>&gt;</span></span><br><span class="line">                        注册</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">"info"</span> <span class="attr">:underline</span>=<span class="string">"false"</span> @<span class="attr">click</span>=<span class="string">"isRegister = false"</span>&gt;</span></span><br><span class="line">                        ← 返回</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 登录表单 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">"form"</span> <span class="attr">size</span>=<span class="string">"large"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">:prefix-icon</span>=<span class="string">"User"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">:prefix-icon</span>=<span class="string">"Lock"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-checkbox</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">:underline</span>=<span class="string">"false"</span>&gt;</span>忘记密码？<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 登录按钮 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">auto-insert-space</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">"info"</span> <span class="attr">:underline</span>=<span class="string">"false"</span> @<span class="attr">click</span>=<span class="string">"isRegister = true"</span>&gt;</span></span><br><span class="line">                        注册 →</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 样式 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.login-page</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.bg</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'@/assets/logo2.png'</span>) no-repeat <span class="number">60%</span> center / <span class="number">240px</span> auto,</span></span><br><span class="line"><span class="language-css">            <span class="built_in">url</span>(<span class="string">'@/assets/login_bg.jpg'</span>) no-repeat center / cover;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.form</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        user-select: none;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.title</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.flex</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-页面数据绑定与事件绑定">2.2 页面数据绑定与事件绑定</h3><h4 id="2-2-1-数据绑定">2.2.1 数据绑定</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//用于注册的数据模型</span></span><br><span class="line"><span class="keyword">const</span> registerData = <span class="title function_">ref</span>({</span><br><span class="line">    <span class="attr">username</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">rePassword</span>: <span class="string">''</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="2-2-2-表单校验">2.2.2 表单校验</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//自定义确认密码的校验函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">rePasswordValid</span> = (<span class="params">rule, value, callback</span>) =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span> || value === <span class="string">''</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'请再次确认密码'</span>))</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (registerData.<span class="property">password</span> !== value) {</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'两次输入密码不一致'</span>))</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//用于注册的表单校验模型</span></span><br><span class="line"><span class="keyword">const</span> registerDataRules = <span class="title function_">ref</span>({</span><br><span class="line">    <span class="attr">username</span>: [</span><br><span class="line">        { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入用户名'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">        { <span class="attr">min</span>: <span class="number">5</span>, <span class="attr">max</span>: <span class="number">16</span>, <span class="attr">message</span>: <span class="string">'用户名的长度必须为5~16位'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">password</span>: [</span><br><span class="line">        { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入密码'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">        { <span class="attr">min</span>: <span class="number">5</span>, <span class="attr">max</span>: <span class="number">16</span>, <span class="attr">message</span>: <span class="string">'密码长度必须为5~16位'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">rePassword</span>: [</span><br><span class="line">        { <span class="attr">validator</span>: rePasswordValid, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span><br><span class="line">    ]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="2-2-3-事件绑定">2.2.3 事件绑定</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//用于注册的事件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">register</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'注册...'</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-3-接口调用">2.3 接口调用</h3><h4 id="2-3-1-在src-api-user-js中提供访问注册接口的函数">2.3.1 在src/api/user.js中提供访问注册接口的函数</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//注册</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">registerService</span> = (<span class="params">registerData</span>) =&gt; {</span><br><span class="line">    <span class="keyword">var</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> registerData) {</span><br><span class="line">        params.<span class="title function_">append</span>(key, registerData[key])</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">post</span>(<span class="string">'/user/register'</span>, params)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-3-2-在Login-vue中完成注册接口调用">2.3.2 在Login.vue中完成注册接口调用</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { registerService} <span class="keyword">from</span> <span class="string">'@/api/user.js'</span></span><br><span class="line"><span class="comment">//用于注册的事件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">register</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="comment">//console.log('注册...');</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">registerService</span>(registerData.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">code</span> == <span class="number">0</span>) {</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">'注册成功!'</span>)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">'注册失败!'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-4-处理跨域问题">2.4 处理跨域问题</h3><p>由于发起ajax请求的域为<a href="http://localhost:5173">http://localhost:5173</a>, 而后台服务器的域为 <a href="http://localhost:8080">http://localhost:8080</a>, 所以浏览器会限制该请求的发送, 这种问题称为跨域问题, 跨域问题可以在服务器端解决,也可以在浏览器端解决, 咱们这一块通过配置代理的方式解决</p><p><strong>request.js中配置统一前缀 /api</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//定制请求的实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入axios  npm install axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="comment">//定义一个变量,记录公共的前缀  ,  baseURL</span></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">'/api'</span>;</span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>({baseURL})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">result</span>=&gt;</span>{</span><br><span class="line">        <span class="keyword">return</span> result.<span class="property">data</span>;</span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="params">err</span>=&gt;</span>{</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">'服务异常'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);<span class="comment">//异步的状态转化成失败的状态</span></span><br><span class="line">    }</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br></pre></td></tr></tbody></table></figure><p><strong>vie.config.js中配置代理</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { fileURLToPath, <span class="variable constant_">URL</span> } <span class="keyword">from</span> <span class="string">'node:url'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { defineConfig } <span class="keyword">from</span> <span class="string">'vite'</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'@vitejs/plugin-vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: {</span><br><span class="line">    <span class="attr">alias</span>: {</span><br><span class="line">      <span class="string">'@'</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">'./src'</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">//配置代理</span></span><br><span class="line">  <span class="attr">server</span>: {</span><br><span class="line">    <span class="attr">proxy</span>: {</span><br><span class="line">      <span class="string">'/api'</span>: {</span><br><span class="line">        <span class="attr">target</span>: <span class="string">'http://localhost:8080'</span>, <span class="comment">// 后端服务器地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 是否改变请求域名</span></span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">''</span>)<span class="comment">//将原有请求路径中的api替换为''</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="三、登录">三、登录</h2><h3 id="3-1页面数据绑定与事件绑定">3.1页面数据绑定与事件绑定</h3><h4 id="3-1-1-绑定数据">3.1.1 绑定数据</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//复用注册表单的数据模型</span></span><br><span class="line"><span class="keyword">const</span> registerData = <span class="title function_">ref</span>({</span><br><span class="line">    <span class="attr">username</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">rePassword</span>: <span class="string">''</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="3-1-2-每次点击注册或者登录，共用数据模型中的数据">3.1.2 每次点击注册或者登录，共用数据模型中的数据</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//清空数据模型的数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clearRegisterData</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    registerData.<span class="property">value</span> = {</span><br><span class="line">        <span class="attr">username</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="attr">rePassword</span>: <span class="string">''</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="3-1-3-事件绑定">3.1.3 事件绑定</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> =  (<span class="params"></span>) =&gt; {</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-接口调用">3.2 接口调用</h3><h4 id="3-2-1-在src-api-user-js中提供访问注册接口的函数">3.2.1 在src/api/user.js中提供访问注册接口的函数</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//登录</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">loginService</span> = (<span class="params">loginData</span>)=&gt;{</span><br><span class="line">    <span class="keyword">var</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> loginData){</span><br><span class="line">        params.<span class="title function_">append</span>(key,loginData[key])</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">post</span>(<span class="string">'/user/login'</span>,params)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="3-2-2-在Login-vue中完成登录接口调用">3.2.2 在Login.vue中完成登录接口调用</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { registerService, loginService } <span class="keyword">from</span> <span class="string">'@/api/user.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用于登录的事件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">loginService</span>(registerData.<span class="property">value</span>)</span><br><span class="line">    <span class="keyword">if</span>(result.<span class="property">code</span>==<span class="number">0</span>){</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">'登录成功!'</span>)</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">'登录失败!'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="四、优化axios响应截器">四、优化axios响应截器</h2><p>在接口调用的API中，我们都需要对业务响应的状态进行判断，从而给用户对应的提示，这个工作不难，但是每个接口的调用，都这样写代码，显然是比较繁琐的，我们可以在axios的相应拦截器中，如果服务器响应成功了，统一判断后台返回的业务状态码code，如果成功了，正常返回数据，如果失败了，则给出用户对应的提示即可</p><p><strong>请求工具request.js</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//添加响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> {</span><br><span class="line">        <span class="comment">//如果业务状态码为0，代表本次操作成功</span></span><br><span class="line">        <span class="keyword">if</span> (result.<span class="property">data</span>.<span class="property">code</span> == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> result.<span class="property">data</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//代码走到这里，代表业务状态码不是0，本次操作失败</span></span><br><span class="line">        <span class="title function_">alert</span>(result.<span class="property">data</span>.<span class="property">message</span> || <span class="string">'服务异常'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(result.<span class="property">data</span>);<span class="comment">//异步的状态转化成失败的状态</span></span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">'服务异常'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);<span class="comment">//异步的状态转化成失败的状态</span></span><br><span class="line">    }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p><strong>接口调用user.js</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//用于注册的事件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">register</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="comment">//console.log('注册...');</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">registerService</span>(registerData.<span class="property">value</span>);</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">'注册成功!'</span>)</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于登录的事件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">loginService</span>(registerData.<span class="property">value</span>)</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">'登录成功!'</span>)</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Element-Plus提示框的使用</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">ElMessage</span> } <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">'服务异常'</span>);</span><br><span class="line"><span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">'登录成功!'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="五、主页面布局">五、主页面布局</h2><p><img src="/2024/06/03/%E9%BB%91%E9%A9%AC%E5%A4%A7%E4%BA%8B%E4%BB%B6%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5C1697857363429.png" alt="1697857363429"></p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> {</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Management</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Promotion</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">UserFilled</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">User</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Crop</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">EditPen</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">SwitchButton</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">CaretBottom</span></span></span><br><span class="line"><span class="language-javascript">} <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">'@/assets/default.png'</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">class</span>=<span class="string">"layout-container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左侧菜单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"el-aside__logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">active-text-color</span>=<span class="string">"#ffd04b"</span> <span class="attr">background-color</span>=<span class="string">"#232323"</span>  <span class="attr">text-color</span>=<span class="string">"#fff"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">router</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Management</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>文章分类<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Promotion</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>文章管理<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-sub-menu</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">UserFilled</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> &gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">User</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>基本资料<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> &gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Crop</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>更换头像<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> &gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">EditPen</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>重置密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-sub-menu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 右侧主区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 头部区域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-header</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>黑马程序员：<span class="tag">&lt;<span class="name">strong</span>&gt;</span>东哥<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-dropdown</span> <span class="attr">placement</span>=<span class="string">"bottom-end"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-dropdown__box"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-avatar</span> <span class="attr">:src</span>=<span class="string">"avatar"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">CaretBottom</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">dropdown</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"profile"</span> <span class="attr">:icon</span>=<span class="string">"User"</span>&gt;</span>基本资料<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"avatar"</span> <span class="attr">:icon</span>=<span class="string">"Crop"</span>&gt;</span>更换头像<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"password"</span> <span class="attr">:icon</span>=<span class="string">"EditPen"</span>&gt;</span>重置密码<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"logout"</span> <span class="attr">:icon</span>=<span class="string">"SwitchButton"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-dropdown</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 中间区域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 1290px; height: 570px;border: 1px solid red;"</span>&gt;</span></span><br><span class="line">                    内容展示区</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 底部区域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-footer</span>&gt;</span>大事件 ©2023 Created by 黑马程序员<span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.layout-container</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.el-aside</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#232323</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &amp;__logo {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'@/assets/logo.png'</span>) no-repeat center / <span class="number">120px</span> auto;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-menu</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-right</span>: none;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.el-header</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-dropdown__box</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.el-icon</span> {</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:active</span>,</span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:focus</span> {</span></span><br><span class="line"><span class="language-css">                <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">            }</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.el-footer</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="六、路由">六、路由</h2><p>在App.vue中，不能同时展示Login.vue和Layout.vue，实际的需求是用户第一次访问程序，先展示登录页面，当用户登录成功后，再展示主页面，如果要达成这个需求，需要用到vue提供的路由相关的知识</p><p>路由，从起点到终点时，决定从起点到终点的路径的进程，在前端工程中，路由指的是根据不同的访问路径，展示不同组件的内容。Vue Router是Vue.js的官方路由，它与Vue.js深度集成，让Vue.js构建单页面应用变得更加轻而易举</p><h3 id="6-1安装路由">6.1安装路由</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">npm install vue-router@<span class="number">4</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6-2创建路由器，并导出">6.2创建路由器，并导出</h3><p>在src/router目录下，定义一个js文件，起名为index.js。这样名字的js文件在导入时，可以不写文件名，只要定位到文件所在的文件夹即可，使用起来很方便</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//导入vue-router</span></span><br><span class="line"><span class="keyword">import</span> { createRouter, createWebHistory } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">//导入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LoginVue</span> <span class="keyword">from</span> <span class="string">'@/views/Login.vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LayoutVue</span> <span class="keyword">from</span> <span class="string">'@/views/Layout.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义路由关系</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    { <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">component</span>: <span class="title class_">LoginVue</span> },</span><br><span class="line">    { <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="title class_">LayoutVue</span> }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>({</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>: routes</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></tbody></table></figure><h3 id="6-3在vue应用实例中使用router">6.3在vue应用实例中使用router</h3><p>在main.js中导入创建应用实力的js文件，并调用实例的use方法使用路由器</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router'</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br></pre></td></tr></tbody></table></figure><h3 id="6-4定义展示路由组件的地方">6.4定义展示路由组件的地方</h3><p>在App.vue文件的template标签中，定义router-view标签</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>将来不管根据路由匹配到的组件内容，会在router-view标签内进行展示</p><h3 id="6-5-测试">6.5 测试</h3><p>在浏览器地址栏分别访问：<a href="http://localhost:5173/">http://localhost:5173/</a>    和   <a href="http://localhost:5173/login">http://localhost:5173/login</a></p><h3 id="6-6-路由API">6.6 路由API</h3><p>在登录成功后，需要通过代码的方式将页面切换到首页，此时就需要调用路由器相关的API</p><p><strong>获取路由器</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { useRouter } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br></pre></td></tr></tbody></table></figure><p><strong>调用API</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">router.<span class="title function_">push</span>(<span class="string">'/'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="七、子路由">七、子路由</h2><p>在咱们的主页面中，当用户点击左侧的菜单时，右侧主区域的内容需要发生变化，将来每切换一个菜单，右侧需要加载对应组件的内容进行展示，像这样的场景咱们也需要使用路由来完成</p><p>由于这些组件都需要在Layout.vue中展示， 而Layout.vue本身已经参与了路由，因此我们需要在Layout.vue中通过子路由的方式来完成组件的切换</p><h3 id="7-1提供菜单对应的组件">7.1提供菜单对应的组件</h3><p>可以复制资料中的文件，也可以自己创建：</p><ul><li>ArticleCategory.vue</li><li>ArticleManage.vue</li><li>UserInfo.vue</li><li>UserAvatar.vue</li><li>UserResetPassword.vue</li></ul><h3 id="7-2配置子路由">7.2配置子路由</h3><p>在src/router/index.js中配置子路由</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//定义路由关系</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    { <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">component</span>: <span class="title class_">LoginVue</span> },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">LayoutVue</span>,</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">'/article/manage'</span>,</span><br><span class="line">        <span class="comment">//子路由</span></span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            { <span class="attr">path</span>: <span class="string">'/article/category'</span>, <span class="attr">component</span>: <span class="title class_">ArticleCategoryVue</span> },</span><br><span class="line">            { <span class="attr">path</span>: <span class="string">'/article/manage'</span>, <span class="attr">component</span>: <span class="title class_">ArticleManageVue</span> },</span><br><span class="line">            { <span class="attr">path</span>: <span class="string">'/user/info'</span>, <span class="attr">component</span>: <span class="title class_">UserInfoVue</span> },</span><br><span class="line">            { <span class="attr">path</span>: <span class="string">'/user/avatar'</span>, <span class="attr">component</span>: <span class="title class_">UserAvatarVUe</span> },</span><br><span class="line">            { <span class="attr">path</span>: <span class="string">'/user/password'</span>, <span class="attr">component</span>: <span class="title class_">UserResetPasswordVue</span> },</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h3 id="7-3-在Layout-vue组件的右侧中间区域，添加router-view标签">7.3 在Layout.vue组件的右侧中间区域，添加router-view标签</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 中间区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 1290px; height: 570px;border: 1px solid red;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7-4-菜单项设置点击后跳转的路由路径">7.4 菜单项设置点击后跳转的路由路径</h3><p>el-menu-item 标签的index属性可以设置点击后的路由路径</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"/article/category"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Management</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>文章分类<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="八、文章分类列表">八、文章分类列表</h2><h3 id="8-1-文章分类组件">8.1 文章分类组件</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> {</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Edit</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Delete</span></span></span><br><span class="line"><span class="language-javascript">} <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> categorys = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryName"</span>: <span class="string">"美食"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryAlias"</span>: <span class="string">"my"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-02 12:06:59"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-02 12:06:59"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryName"</span>: <span class="string">"娱乐"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryAlias"</span>: <span class="string">"yl"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-02 12:08:16"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-02 12:08:16"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryName"</span>: <span class="string">"军事"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryAlias"</span>: <span class="string">"js"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-02 12:08:33"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-02 12:08:33"</span></span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">"page-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>文章分类<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"extra"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>添加分类<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"categorys"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"序号"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"分类名称"</span> <span class="attr">prop</span>=<span class="string">"categoryName"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"分类别名"</span> <span class="attr">prop</span>=<span class="string">"categoryAlias"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"操作"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">"{ row }"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:icon</span>=<span class="string">"Edit"</span> <span class="attr">circle</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">"primary"</span> &gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:icon</span>=<span class="string">"Delete"</span> <span class="attr">circle</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">"danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">empty</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-empty</span> <span class="attr">description</span>=<span class="string">"没有数据"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.page-container</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-2-列表接口调用">8.2 列表接口调用</h3><p>src/api/article.js</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//导入请求工具类</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文章分类列表查询</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleCategoryListService</span> = (<span class="params"></span>)=&gt;{</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">'/category'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ArticleCategory.vue</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//获取所有文章分类数据</span></span><br><span class="line"><span class="keyword">import</span> { articleCategoryListService } <span class="keyword">from</span> <span class="string">'@/api/article.js'</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getAllCategory</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleCategoryListService</span>();</span><br><span class="line">    categorys.<span class="property">value</span> = result.<span class="property">data</span>;</span><br><span class="line">}</span><br><span class="line"><span class="title function_">getAllCategory</span>();</span><br></pre></td></tr></tbody></table></figure><p>但是上述的代码并不能真正的获取到所有文章分类数据，服务器响应状态码为401，因为目前请求头中并没有携带token</p><h2 id="九、Pinia状态管理库">九、Pinia状态管理库</h2><p>Pinia是Vue的专属状态管理库，它允许你跨组件或页面共享状态</p><h3 id="9-1安装">9.1安装</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></tbody></table></figure><h3 id="9-2使用Pinia">9.2使用Pinia</h3><p>在main.js中，引入pinia，创建pinia实例，并调用vue应用实例的use方法使用pinia</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { createPinia } <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br></pre></td></tr></tbody></table></figure><h3 id="9-3-定义Store">9.3 定义Store</h3><p>在src/stores目录下定义token.js</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineStore } <span class="keyword">from</span> <span class="string">"pinia"</span>;</span><br><span class="line"><span class="keyword">import</span> {ref} <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    defineStore参数描述：</span></span><br><span class="line"><span class="comment">        第一个参数：给状态起名，具有唯一性</span></span><br><span class="line"><span class="comment">        第二个参数：函数，可以把定义该状态中拥有的内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    defineStore返回值描述：</span></span><br><span class="line"><span class="comment">        返回的是一个函数，将来可以调用该函数，得到第二个参数中返回的内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTokenStore = <span class="title function_">defineStore</span>(<span class="string">'token'</span>,<span class="function">()=&gt;</span>{</span><br><span class="line">    <span class="comment">//1.定义描述token</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">ref</span>(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.定义修改token的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setToken</span> = (<span class="params">newToken</span>)=&gt;{</span><br><span class="line">        token.<span class="property">value</span> = newToken</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.定义移除token的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">removeToken</span> = (<span class="params"></span>)=&gt;{</span><br><span class="line">        token.<span class="property">value</span>=<span class="string">''</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        token,setToken,removeToken</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="9-4-使用Store">9.4 使用Store</h3><p>在需要使用状态的地方，导入@/stores/*.js , 使用即可</p><p>在Login.vue中导入@/stores/token.js, 并且当用户登录成功后，将token保存pinia中</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//导入token状态</span></span><br><span class="line"><span class="keyword">import</span> { useTokenStore } <span class="keyword">from</span> <span class="string">'@/stores/token.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用useTokenStore得到状态</span></span><br><span class="line"><span class="keyword">const</span> tokenStore = <span class="title function_">useTokenStore</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于登录的事件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">loginService</span>(registerData.<span class="property">value</span>)</span><br><span class="line">    <span class="comment">//保存token</span></span><br><span class="line">    tokenStore.<span class="title function_">setToken</span>(result.<span class="property">data</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">'登录成功!'</span>)</span><br><span class="line">    router.<span class="title function_">push</span>(<span class="string">'/'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在article.js中导入@/stores/token.js, 从pinia中获取到存储的token，在发起查询文章分类列表的时候把token通过请求头的形式携带给服务器</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//导入@/stores/token.js</span></span><br><span class="line"><span class="keyword">import</span> { useTokenStore } <span class="keyword">from</span> <span class="string">'../stores/token'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//文章分类列表查询</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleCategoryListService</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="comment">//获取token状态</span></span><br><span class="line">    <span class="keyword">const</span> tokenStore = <span class="title function_">useTokenStore</span>()</span><br><span class="line">    <span class="comment">//通过请求头Authorization携带token</span></span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">'/category'</span>, { <span class="attr">headers</span>: { <span class="string">'Authorization'</span>: tokenStore.<span class="property">token</span> } })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="十、axios请求拦截器">十、axios请求拦截器</h2><p>当进入主页后，将来要与后台交互，都需要携带token，如果每次请求都写这样的代码，将会比较繁琐，此时可以将携带token的代码通过请求拦截器统一处理</p><p>在 src/util/request.js中</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//导入token状态</span></span><br><span class="line"><span class="keyword">import</span> { useTokenStore } <span class="keyword">from</span> <span class="string">'@/stores/token.js'</span>;</span><br><span class="line"><span class="comment">//添加请求拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">config</span>)=&gt;</span>{</span><br><span class="line">        <span class="comment">//在发送请求之前做什么</span></span><br><span class="line">        <span class="keyword">let</span> tokenStore = <span class="title function_">useTokenStore</span>()</span><br><span class="line">        <span class="comment">//如果token中有值，在携带</span></span><br><span class="line">        <span class="keyword">if</span>(tokenStore.<span class="property">token</span>){</span><br><span class="line">            config.<span class="property">headers</span>.<span class="property">Authorization</span>=tokenStore.<span class="property">token</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    },</span><br><span class="line">    <span class="function">(<span class="params">err</span>)=&gt;</span>{</span><br><span class="line">        <span class="comment">//如果请求错误做什么</span></span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">    }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h2 id="十一、Pinia持久化插件">十一、Pinia持久化插件</h2><p>默认情况下，由于pinia是内存存储，当你刷新页面的时候pinia中的数据会丢失，可以借助于persist插件解决这个问题，persist插件支持将pinia中的数据持久化到sessionStorage和localStorage中</p><h3 id="11-1-安装persist插件">11.1 安装persist插件</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">npm install pinia-persistedstate-plugin</span><br></pre></td></tr></tbody></table></figure><h3 id="11-2-pinia中使用persist插件">11.2 pinia中使用persist插件</h3><p>在main.js中</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { createPinia } <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"><span class="comment">//导入持久化插件</span></span><br><span class="line"><span class="keyword">import</span> {createPersistedState} <span class="keyword">from</span><span class="string">'pinia-persistedstate-plugin'</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> persist = <span class="title function_">createPersistedState</span>()</span><br><span class="line"><span class="comment">//pinia使用持久化插件</span></span><br><span class="line">pinia.<span class="title function_">use</span>(persist)</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br></pre></td></tr></tbody></table></figure><h3 id="11-3-在创建定义状态是配置持久化">11.3 在创建定义状态是配置持久化</h3><p>在src/stores/token.js中</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTokenStore = <span class="title function_">defineStore</span>(<span class="string">'token'</span>,<span class="function">()=&gt;</span>{</span><br><span class="line">    <span class="comment">//1.定义描述token</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">ref</span>(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.定义修改token的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setToken</span> = (<span class="params">newToken</span>)=&gt;{</span><br><span class="line">        token.<span class="property">value</span> = newToken</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.定义移除token的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">removeToken</span> = (<span class="params"></span>)=&gt;{</span><br><span class="line">        token.<span class="property">value</span>=<span class="string">''</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        token,setToken,removeToken</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">,</span><br><span class="line"><span class="comment">//参数持久化</span></span><br><span class="line">{</span><br><span class="line">    <span class="attr">persist</span>:<span class="literal">true</span></span><br><span class="line">}</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h2 id="十二、未登录统一处理">十二、未登录统一处理</h2><p>在后续访问接口时，如果没有登录，则前端不携带token，后台服务器会返回响应状态码401，代表未登录，此时可以在axios的响应拦截器中，统一对未登录的情况做处理</p><p><strong>request.js</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> {</span><br><span class="line">        <span class="comment">//如果业务状态码为0，代表本次操作成功</span></span><br><span class="line">        <span class="keyword">if</span> (result.<span class="property">data</span>.<span class="property">code</span> == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> result.<span class="property">data</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//代码走到这里，代表业务状态码不是0，本次操作失败</span></span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">data</span>.<span class="property">message</span> || <span class="string">'服务异常'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(result.<span class="property">data</span>);<span class="comment">//异步的状态转化成失败的状态</span></span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">        <span class="comment">//如果响应状态码时401，代表未登录，给出对应的提示，并跳转到登录页</span></span><br><span class="line">        <span class="keyword">if</span>(err.<span class="property">response</span>.<span class="property">status</span>===<span class="number">401</span>){</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">'请先登录！'</span>)</span><br><span class="line">            router.<span class="title function_">push</span>(<span class="string">'/login'</span>)</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">'服务异常'</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);<span class="comment">//异步的状态转化成失败的状态</span></span><br><span class="line">    }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h2 id="十三、添加文章分类">十三、添加文章分类</h2><h3 id="13-1-添加分类弹窗页面">13.1 添加分类弹窗页面</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加分类弹窗 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">v-model</span>=<span class="string">"dialogVisible"</span> <span class="attr">title</span>=<span class="string">"添加弹层"</span> <span class="attr">width</span>=<span class="string">"30%"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"categoryModel"</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">label-width</span>=<span class="string">"100px"</span> <span class="attr">style</span>=<span class="string">"padding-right: 30px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"分类名称"</span> <span class="attr">prop</span>=<span class="string">"categoryName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"categoryModel.categoryName"</span> <span class="attr">minlength</span>=<span class="string">"1"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"分类别名"</span> <span class="attr">prop</span>=<span class="string">"categoryAlias"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"categoryModel.categoryAlias"</span> <span class="attr">minlength</span>=<span class="string">"1"</span> <span class="attr">maxlength</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"dialogVisible = false"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span> 确认 <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="13-2-数据模型和校验规则">13.2 数据模型和校验规则</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//控制添加分类弹窗</span></span><br><span class="line"><span class="keyword">const</span> dialogVisible = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加分类数据模型</span></span><br><span class="line"><span class="keyword">const</span> categoryModel = <span class="title function_">ref</span>({</span><br><span class="line">    <span class="attr">categoryName</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">categoryAlias</span>: <span class="string">''</span></span><br><span class="line">})</span><br><span class="line"><span class="comment">//添加分类表单校验</span></span><br><span class="line"><span class="keyword">const</span> rules = {</span><br><span class="line">    <span class="attr">categoryName</span>: [</span><br><span class="line">        { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入分类名称'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">categoryAlias</span>: [</span><br><span class="line">        { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入分类别名'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="13-3-添加分类按钮单击事件">13.3 添加分类按钮单击事件</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"dialogVisible = true"</span>&gt;</span>添加分类<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="13-4-接口调用">13.4 接口调用</h3><p><strong>在article.js中提供添加分类的函数</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//添加文章分类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleCategoryAddService</span> = (<span class="params">categoryModel</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">post</span>(<span class="string">'/category'</span>, categoryModel)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>在页面中调用接口</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//访问后台，添加文章分类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addCategory</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;{</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleCategoryAddService</span>(categoryModel.<span class="property">value</span>);</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span>? result.<span class="property">message</span>:<span class="string">'添加成功'</span>)</span><br><span class="line">    <span class="comment">//隐藏弹窗</span></span><br><span class="line">    dialogVisible.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">    <span class="comment">//再次访问后台接口，查询所有分类</span></span><br><span class="line">    <span class="title function_">getAllCategory</span>()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"addCategory"</span>&gt;</span> 确认 <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="十四、修改文章分类">十四、修改文章分类</h2><h3 id="14-1-修改分类弹窗页面">14.1 修改分类弹窗页面</h3><p>修改分类弹窗和新增文章分类弹窗长的一样，所以可以服用添加分类的弹窗</p><p><strong>弹窗标题显示</strong><br>定义标题</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//弹窗标题</span></span><br><span class="line"><span class="keyword">const</span> title=<span class="title function_">ref</span>(<span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure><p>在弹窗上绑定标题</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">v-model</span>=<span class="string">"dialogVisible"</span> <span class="attr">:title</span>=<span class="string">"title"</span> <span class="attr">width</span>=<span class="string">"30%"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>为添加分类按钮绑定事件</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"title='添加分类';dialogVisible = true"</span>&gt;</span>添加分类<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>为修改分类按钮绑定事件</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:icon</span>=<span class="string">"Edit"</span> <span class="attr">circle</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"title='修改分类';dialogVisible=true"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="14-2-数据回显">14.2 数据回显</h3><p>当点击修改分类按钮时，需要把当前这一条数据的详细信息显示到修改分类的弹窗上，这个叫回显</p><p><strong>通过插槽的方式得到被点击按钮所在行的数据</strong></p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">"{ row }"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:icon</span>=<span class="string">"Edit"</span> <span class="attr">circle</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"updateCategoryEcho(row)"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:icon</span>=<span class="string">"Delete"</span> <span class="attr">circle</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">"danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>回显函数</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//修改分类回显</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateCategoryEcho</span> = (<span class="params">row</span>) =&gt; {</span><br><span class="line">    title.<span class="property">value</span> = <span class="string">'修改分类'</span></span><br><span class="line">    dialogVisible.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">    <span class="comment">//将row中的数据赋值给categoryModel</span></span><br><span class="line">    categoryModel.<span class="property">value</span>.<span class="property">categoryName</span>=row.<span class="property">categoryName</span></span><br><span class="line">    categoryModel.<span class="property">value</span>.<span class="property">categoryAlias</span>=row.<span class="property">categoryAlias</span></span><br><span class="line">    <span class="comment">//修改的时候必须传递分类的id，所以扩展一个id属性</span></span><br><span class="line">    categoryModel.<span class="property">value</span>.<span class="property">id</span>=row.<span class="property">id</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="14-3-接口调用">14.3 接口调用</h3><p><strong>article.js中提供修改分类的函数</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//修改分类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleCategoryUpdateService</span> = (<span class="params">categoryModel</span>)=&gt;{</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">put</span>(<span class="string">'/category'</span>,categoryModel)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>修改确定按钮的绑定事件</strong></p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"dialogVisible = false"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"title==='添加分类'? addCategory():updateCategory()"</span>&gt;</span> 确认 <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>调用接口完成修改的函数</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//修改分类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateCategory</span>=<span class="keyword">async</span> (<span class="params"></span>)=&gt;{</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleCategoryUpdateService</span>(categoryModel.<span class="property">value</span>)</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span>? result.<span class="property">message</span>:<span class="string">'修改成功'</span>)</span><br><span class="line">    <span class="comment">//隐藏弹窗</span></span><br><span class="line">    dialogVisible.<span class="property">value</span>=<span class="literal">false</span></span><br><span class="line">    <span class="comment">//再次访问后台接口，查询所有分类</span></span><br><span class="line">    <span class="title function_">getAllCategory</span>()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由于现在修改和新增共用了一个数据模型，所以在点击添加分类后，有时候会显示数据，此时可以将categoryModel中的数据清空</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//清空模型数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clearCategoryModel</span> = (<span class="params"></span>)=&gt;{</span><br><span class="line">    categoryModel.<span class="property">value</span>.<span class="property">categoryName</span>=<span class="string">''</span>,</span><br><span class="line">    categoryModel.<span class="property">value</span>.<span class="property">categoryAlias</span>=<span class="string">''</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改添加按钮的点击事件</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"title = '添加分类'; dialogVisible = true;clearCategoryModel()"</span>&gt;</span>添加分类<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="十五、删除分类（后台需要补齐）">十五、删除分类（后台需要补齐）</h2><h3 id="15-1-确认框">15.1 确认框</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//删除分类  给删除按钮绑定事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deleteCategory</span> = (<span class="params">row</span>) =&gt; {</span><br><span class="line">    <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(</span><br><span class="line">        <span class="string">'你确认删除该分类信息吗？'</span>,</span><br><span class="line">        <span class="string">'温馨提示'</span>,</span><br><span class="line">        {</span><br><span class="line">            <span class="attr">confirmButtonText</span>: <span class="string">'确认'</span>,</span><br><span class="line">            <span class="attr">cancelButtonText</span>: <span class="string">'取消'</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">'warning'</span>,</span><br><span class="line">        }</span><br><span class="line">    )</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">            <span class="comment">//用户点击了确认</span></span><br><span class="line">            <span class="title class_">ElMessage</span>({</span><br><span class="line">                <span class="attr">type</span>: <span class="string">'success'</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">'删除成功'</span>,</span><br><span class="line">            })</span><br><span class="line">        })</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">            <span class="comment">//用户点击了取消</span></span><br><span class="line">            <span class="title class_">ElMessage</span>({</span><br><span class="line">                <span class="attr">type</span>: <span class="string">'info'</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">'取消删除'</span>,</span><br><span class="line">            })</span><br><span class="line">        })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="15-2-接口调用">15.2 接口调用</h3><p><strong>article.js中提供删除分类的函数</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//删除分类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleCategoryDeleteService</span> = (<span class="params">id</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">delete</span>(<span class="string">'/category?id='</span>+id)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>当用户点击确认后，调用接口删除分类</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//删除分类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deleteCategory</span> = (<span class="params">row</span>) =&gt; {</span><br><span class="line">    <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(</span><br><span class="line">        <span class="string">'你确认删除该分类信息吗？'</span>,</span><br><span class="line">        <span class="string">'温馨提示'</span>,</span><br><span class="line">        {</span><br><span class="line">            <span class="attr">confirmButtonText</span>: <span class="string">'确认'</span>,</span><br><span class="line">            <span class="attr">cancelButtonText</span>: <span class="string">'取消'</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">'warning'</span>,</span><br><span class="line">        }</span><br><span class="line">    )</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">async</span> () =&gt; {</span><br><span class="line">            <span class="comment">//用户点击了确认</span></span><br><span class="line">            <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleCategoryDeleteService</span>(row.<span class="property">id</span>)</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span>?result.<span class="property">message</span>:<span class="string">'删除成功'</span>)</span><br><span class="line">            <span class="comment">//再次调用getAllCategory，获取所有文章分类</span></span><br><span class="line">            <span class="title function_">getAllCategory</span>()</span><br><span class="line">        })</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">            <span class="comment">//用户点击了取消</span></span><br><span class="line">            <span class="title class_">ElMessage</span>({</span><br><span class="line">                <span class="attr">type</span>: <span class="string">'info'</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">'取消删除'</span>,</span><br><span class="line">            })</span><br><span class="line">        })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="十六、文章列表">十六、文章列表</h2><h3 id="16-1-文章列表页面组件">16.1 文章列表页面组件</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> {</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Edit</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Delete</span></span></span><br><span class="line"><span class="language-javascript">} <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//文章分类数据模型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> categorys = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryName"</span>: <span class="string">"美食"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryAlias"</span>: <span class="string">"my"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-02 12:06:59"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-02 12:06:59"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryName"</span>: <span class="string">"娱乐"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryAlias"</span>: <span class="string">"yl"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-02 12:08:16"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-02 12:08:16"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryName"</span>: <span class="string">"军事"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryAlias"</span>: <span class="string">"js"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-02 12:08:33"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-02 12:08:33"</span></span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用户搜索时选中的分类id</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> categoryId=<span class="title function_">ref</span>(<span class="string">''</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用户搜索时选中的发布状态</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> state=<span class="title function_">ref</span>(<span class="string">''</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//文章列表数据模型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> articles = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"title"</span>: <span class="string">"陕西旅游攻略"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"content"</span>: <span class="string">"兵马俑,华清池,法门寺,华山...爱去哪去哪..."</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"coverImg"</span>: <span class="string">"https://big-event-gwd.oss-cn-beijing.aliyuncs.com/9bf1cf5b-1420-4c1b-91ad-e0f4631cbed4.png"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"state"</span>: <span class="string">"草稿"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryId"</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-03 11:55:30"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-03 11:55:30"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"title"</span>: <span class="string">"陕西旅游攻略"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"content"</span>: <span class="string">"兵马俑,华清池,法门寺,华山...爱去哪去哪..."</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"coverImg"</span>: <span class="string">"https://big-event-gwd.oss-cn-beijing.aliyuncs.com/9bf1cf5b-1420-4c1b-91ad-e0f4631cbed4.png"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"state"</span>: <span class="string">"草稿"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryId"</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-03 11:55:30"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-03 11:55:30"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"title"</span>: <span class="string">"陕西旅游攻略"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"content"</span>: <span class="string">"兵马俑,华清池,法门寺,华山...爱去哪去哪..."</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"coverImg"</span>: <span class="string">"https://big-event-gwd.oss-cn-beijing.aliyuncs.com/9bf1cf5b-1420-4c1b-91ad-e0f4631cbed4.png"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"state"</span>: <span class="string">"草稿"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryId"</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-03 11:55:30"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-03 11:55:30"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//分页条数据模型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> pageNum = <span class="title function_">ref</span>(<span class="number">1</span>)<span class="comment">//当前页</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> total = <span class="title function_">ref</span>(<span class="number">20</span>)<span class="comment">//总条数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> pageSize = <span class="title function_">ref</span>(<span class="number">3</span>)<span class="comment">//每页条数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//当每页条数发生了变化，调用此函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onSizeChange</span> = (<span class="params">size</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    pageSize.<span class="property">value</span> = size</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//当前页码发生变化，调用此函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onCurrentChange</span> = (<span class="params">num</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    pageNum.<span class="property">value</span> = num</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">"page-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>文章管理<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"extra"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>添加文章<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 搜索表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">inline</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章分类："</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span> <span class="attr">v-model</span>=<span class="string">"categoryId"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">v-for</span>=<span class="string">"c in categorys"</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">:key</span>=<span class="string">"c.id"</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">:label</span>=<span class="string">"c.categoryName"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">:value</span>=<span class="string">"c.id"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"发布状态："</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span> <span class="attr">v-model</span>=<span class="string">"state"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"已发布"</span> <span class="attr">value</span>=<span class="string">"已发布"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"草稿"</span> <span class="attr">value</span>=<span class="string">"草稿"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文章列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"articles"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"文章标题"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">prop</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"分类"</span> <span class="attr">prop</span>=<span class="string">"categoryId"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"发表时间"</span> <span class="attr">prop</span>=<span class="string">"createTime"</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"状态"</span> <span class="attr">prop</span>=<span class="string">"state"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"操作"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">"{ row }"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:icon</span>=<span class="string">"Edit"</span> <span class="attr">circle</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:icon</span>=<span class="string">"Delete"</span> <span class="attr">circle</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">"danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">empty</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-empty</span> <span class="attr">description</span>=<span class="string">"没有数据"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页条 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">v-model:current-page</span>=<span class="string">"pageNum"</span> <span class="attr">v-model:page-size</span>=<span class="string">"pageSize"</span> <span class="attr">:page-sizes</span>=<span class="string">"[3, 5 ,10, 15]"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">"jumper, total, sizes, prev, pager, next"</span> <span class="attr">background</span> <span class="attr">:total</span>=<span class="string">"total"</span> @<span class="attr">size-change</span>=<span class="string">"onSizeChange"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">current-change</span>=<span class="string">"onCurrentChange"</span> <span class="attr">style</span>=<span class="string">"margin-top: 20px; justify-content: flex-end"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.page-container</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>使用中文语言包，解决分页条中文问题, 在main.js中完成</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> locale <span class="keyword">from</span> <span class="string">'element-plus/dist/locale/zh-cn.js'</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>,{locale})</span><br></pre></td></tr></tbody></table></figure><h3 id="16-2、文章分类数据回显">16.2、文章分类数据回显</h3><p><strong>ArticleMange.vue</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//文章列表查询</span></span><br><span class="line"><span class="keyword">import</span> { articleCategoryListService } <span class="keyword">from</span> <span class="string">'@/api/article.js'</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getArticleCategoryList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="comment">//获取所有分类</span></span><br><span class="line">    <span class="keyword">let</span> resultC = <span class="keyword">await</span> <span class="title function_">articleCategoryListService</span>();</span><br><span class="line">    categorys.<span class="property">value</span> = resultC.<span class="property">data</span></span><br><span class="line">}</span><br><span class="line"><span class="title function_">getArticleCategoryList</span>();</span><br></pre></td></tr></tbody></table></figure><h1></h1><h2 id="十七、-文章列表接口调用">十七、 文章列表接口调用</h2><p><strong>article.js中提供获取文章列表数据的函数</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//文章列表查询</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleListService</span> = (<span class="params">params</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">'/article'</span>, { <span class="attr">params</span>: params })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>ArticleManage.vue中，调用接口获取数据</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//文章列表查询</span></span><br><span class="line"><span class="keyword">import</span> { articleListService } <span class="keyword">from</span> <span class="string">'@/api/article.js'</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getArticles</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">let</span> params = {</span><br><span class="line">        <span class="attr">pageNum</span>: pageNum.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">pageSize</span>: pageSize.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">categoryId</span>: categoryId.<span class="property">value</span> ? categoryId.<span class="property">value</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">state</span>: state.<span class="property">value</span> ? state.<span class="property">value</span> : <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleListService</span>(params);</span><br><span class="line">    <span class="comment">//渲染列表数据</span></span><br><span class="line">    articles.<span class="property">value</span> = result.<span class="property">data</span>.<span class="property">items</span></span><br><span class="line">    <span class="comment">//为列表中添加categoryName属性</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;articles.<span class="property">value</span>.<span class="property">length</span>;i++){</span><br><span class="line">        <span class="keyword">let</span> article = articles.<span class="property">value</span>[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;categorys.<span class="property">value</span>.<span class="property">length</span>;j++){</span><br><span class="line">            <span class="keyword">if</span>(article.<span class="property">categoryId</span>===categorys.<span class="property">value</span>[j].<span class="property">id</span>){</span><br><span class="line">                article.<span class="property">categoryName</span>=categorys.<span class="property">value</span>[j].<span class="property">categoryName</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//渲染总条数</span></span><br><span class="line">    total.<span class="property">value</span>=result.<span class="property">data</span>.<span class="property">total</span></span><br><span class="line">}</span><br><span class="line"><span class="title function_">getArticles</span>()</span><br></pre></td></tr></tbody></table></figure><p><strong>当分页条的当前页和每页条数发生变化，重新发送请求获取数据</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//当每页条数发生了变化，调用此函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onSizeChange</span> = (<span class="params">size</span>) =&gt; {</span><br><span class="line">    pageSize.<span class="property">value</span> = size</span><br><span class="line">    <span class="title function_">getArticles</span>()</span><br><span class="line">}</span><br><span class="line"><span class="comment">//当前页码发生变化，调用此函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onCurrentChange</span> = (<span class="params">num</span>) =&gt; {</span><br><span class="line">    pageNum.<span class="property">value</span> = num</span><br><span class="line">    <span class="title function_">getArticles</span>()</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="十八、搜索和重置">十八、搜索和重置</h2><p>为搜索按钮绑定单击事件，调用getArticles函数即可</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"getArticles"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>为重置按钮绑定单击事件，清除categoryId和state的之即可</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"categoryId='';state=''"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="十九、添加文章">十九、添加文章</h2><h3 id="19-1-添加文章抽屉组件">19.1 添加文章抽屉组件</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> {<span class="title class_">Plus</span>} <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"><span class="comment">//控制抽屉是否显示</span></span><br><span class="line"><span class="keyword">const</span> visibleDrawer = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="comment">//添加表单数据模型</span></span><br><span class="line"><span class="keyword">const</span> articleModel = <span class="title function_">ref</span>({</span><br><span class="line">    <span class="attr">title</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">categoryId</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">coverImg</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">content</span>:<span class="string">''</span>,</span><br><span class="line">    <span class="attr">state</span>:<span class="string">''</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 抽屉 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-drawer</span> <span class="attr">v-model</span>=<span class="string">"visibleDrawer"</span> <span class="attr">title</span>=<span class="string">"添加文章"</span> <span class="attr">direction</span>=<span class="string">"rtl"</span> <span class="attr">size</span>=<span class="string">"50%"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 添加文章表单 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"articleModel"</span> <span class="attr">label-width</span>=<span class="string">"100px"</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章标题"</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"articleModel.title"</span> <span class="attr">placeholder</span>=<span class="string">"请输入标题"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章分类"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span> <span class="attr">v-model</span>=<span class="string">"articleModel.categoryId"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">"c in categorys"</span> <span class="attr">:key</span>=<span class="string">"c.id"</span> <span class="attr">:label</span>=<span class="string">"c.categoryName"</span> <span class="attr">:value</span>=<span class="string">"c.id"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章封面"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">class</span>=<span class="string">"avatar-uploader"</span> <span class="attr">:auto-upload</span>=<span class="string">"false"</span> <span class="attr">:show-file-list</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">"articleModel.coverImg"</span> <span class="attr">:src</span>=<span class="string">"articleModel.coverImg"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"avatar-uploader-icon"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Plus</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章内容"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"editor"</span>&gt;</span>富文本编辑器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"info"</span>&gt;</span>草稿<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-drawer</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 抽屉样式 */</span></span><br><span class="line"><span class="selector-class">.avatar-uploader</span> {</span><br><span class="line">    :<span class="built_in">deep</span>() {</span><br><span class="line">        <span class="selector-class">.avatar</span> {</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">178px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">178px</span>;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.el-upload</span> {</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--el-border-color);</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">            <span class="attribute">cursor</span>: pointer;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            <span class="attribute">transition</span>: <span class="built_in">var</span>(--el-transition-duration-fast);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.el-upload</span><span class="selector-pseudo">:hover</span> {</span><br><span class="line">            <span class="attribute">border-color</span>: <span class="built_in">var</span>(--el-color-primary);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.el-icon</span><span class="selector-class">.avatar-uploader-icon</span> {</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#8c939d</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">178px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">178px</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.editor</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  :<span class="built_in">deep</span>(.ql-editor) {</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">200px</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>为添加文章按钮添加单击事件，展示抽屉</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"visibleDrawer = true"</span>&gt;</span>添加文章<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="19-2-富文本编辑器">19.2 富文本编辑器</h3><p>文章内容需要使用到富文本编辑器，这里咱们使用一个开源的富文本编辑器 Quill</p><p>官网地址： <a href="https://vueup.github.io/vue-quill/">https://vueup.github.io/vue-quill/</a></p><p><strong>安装：</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">npm install @vueup/vue-quill@latest --save</span><br></pre></td></tr></tbody></table></figure><p><strong>导入组件和样式：</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">QuillEditor</span> } <span class="keyword">from</span> <span class="string">'@vueup/vue-quill'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@vueup/vue-quill/dist/vue-quill.snow.css'</span></span><br></pre></td></tr></tbody></table></figure><p><strong>页面长使用quill组件：</strong></p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">quill-editor</span></span></span><br><span class="line"><span class="tag">              <span class="attr">theme</span>=<span class="string">"snow"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-model:content</span>=<span class="string">"articleModel.content"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">contentType</span>=<span class="string">"html"</span></span></span><br><span class="line"><span class="tag">              &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">quill-editor</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>样式美化：</strong></p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.editor</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  :<span class="built_in">deep</span>(.ql-editor) {</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">200px</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="19-3-文章封面图片上传">19.3 文章封面图片上传</h3><p>将来当点击+图标，选择本地图片后，el-upload这个组件会自动发送请求，把图片上传到指定的服务器上，而不需要我们自己使用axios发送异步请求，所以需要给el-upload标签添加一些属性，控制请求的发送</p><p>auto-upload:是否自动上传</p><p>action: 服务器接口路径</p><p>name: 上传的文件字段名</p><p>headers: 设置上传的请求头</p><p>on-success: 上传成功的回调函数</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">import {</span><br><span class="line">    Plus</span><br><span class="line">} from '@element-plus/icons-vue'</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章封面"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">class</span>=<span class="string">"avatar-uploader"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">:show-file-list</span>=<span class="string">"false"</span> </span></span><br><span class="line"><span class="tag">               &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">"articleModel.coverImg"</span> <span class="attr">:src</span>=<span class="string">"articleModel.coverImg"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"avatar-uploader-icon"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Plus</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong></p><ol><li><p>由于这个请求时el-upload自动发送的异步请求，并没有使用咱们的request.js请求工具，所以在请求的路ing上，需要加上/api, 这个时候请求代理才能拦截到这个请求，转发到后台服务器上</p></li><li><p>要携带请求头，还需要导入pinia状态才可以使用</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { useTokenStore } <span class="keyword">from</span> <span class="string">'@/stores/token.js'</span></span><br><span class="line"><span class="keyword">const</span> tokenStore = <span class="title function_">useTokenStore</span>();</span><br></pre></td></tr></tbody></table></figure></li><li><p>在成功的回调函数中，可以拿到服务器响应的数据，其中有一个属性为data，对应的就是图片在阿里云oss上存储的访问地址，需要把它赋值给articleModel的coverImg属性，这样img标签就能显示这张图片了，因为img标签上通过src属性绑定了articleModel.coverImg</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//上传图片成功回调</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">uploadSuccess</span> = (<span class="params">img</span>) =&gt; {</span><br><span class="line">    <span class="comment">//img就是后台响应的数据，格式为：{code:状态码，message：提示信息，data: 图片的存储地址}</span></span><br><span class="line">    articleModel.<span class="property">value</span>.<span class="property">coverImg</span>=img.<span class="property">data</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="19-4-添加文章接口调用">19.4 添加文章接口调用</h3><p><strong>article.js中提供添加文章函数</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//添加文章</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleAddService</span> = (<span class="params">articleModel</span>)=&gt;{</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">post</span>(<span class="string">'/article'</span>,articleModel)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>为已发布和草稿按钮绑定事件</strong></p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"addArticle('已发布')"</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"info"</span> @<span class="attr">click</span>=<span class="string">"addArticle('草稿')"</span>&gt;</span>草稿<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>ArticleManage.vue中提供addArticle函数完成添加文章接口的调用</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//添加文章</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addArticle</span>=<span class="keyword">async</span> (<span class="params">state</span>)=&gt;{</span><br><span class="line">    articleModel.<span class="property">value</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleAddService</span>(articleModel.<span class="property">value</span>);</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span>? result.<span class="property">message</span>:<span class="string">'添加成功'</span>)</span><br><span class="line">    <span class="comment">//再次调用getArticles,获取文章</span></span><br><span class="line">    <span class="title function_">getArticles</span>()</span><br><span class="line">    <span class="comment">//隐藏抽屉</span></span><br><span class="line">    visibleDrawer.<span class="property">value</span>=<span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="二十、顶部导航栏个人信息显示">二十、顶部导航栏个人信息显示</h2><p>在Layout.vue中，页面加载完就发送请求，获取个人信息展示，并存储到pinia中，因为将来在个人中心中修改信息的时候还需要使用</p><p><strong>user.js中提供获取个人信息的函数</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//获取个人信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userInfoGetService</span> = (<span class="params"></span>)=&gt;{</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">'/user/userInfo'</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>src/stores/user.js中，定义个人中心状态</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineStore } <span class="keyword">from</span> <span class="string">"pinia"</span></span><br><span class="line"><span class="keyword">import</span> {ref} <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserInfoStore = <span class="title function_">defineStore</span>(<span class="string">'userInfo'</span>,<span class="function">()=&gt;</span>{</span><br><span class="line">    <span class="comment">//1.定义用户信息</span></span><br><span class="line">    <span class="keyword">const</span> info = <span class="title function_">ref</span>({})</span><br><span class="line">    <span class="comment">//2.定义修改用户信息的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setInfo</span> = (<span class="params">newInfo</span>)=&gt;{</span><br><span class="line">        info.<span class="property">value</span> = newInfo</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//3.定义清空用户信息的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">removeInfo</span> = (<span class="params"></span>)=&gt;{</span><br><span class="line">        info.<span class="property">value</span>={}</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>{info,setInfo,removeInfo}</span><br><span class="line">},{</span><br><span class="line">    <span class="attr">persist</span>:<span class="literal">true</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><strong>Layout.vue中获取个人信息，并存储到pinia中</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//导入接口函数</span></span><br><span class="line"><span class="keyword">import</span> {userInfoGetService} <span class="keyword">from</span> <span class="string">'@/api/user.js'</span></span><br><span class="line"><span class="comment">//导入pinia</span></span><br><span class="line"><span class="keyword">import</span> {useUserInfoStore} <span class="keyword">from</span> <span class="string">'@/stores/user.js'</span></span><br><span class="line"><span class="keyword">const</span> userInfoStore = <span class="title function_">useUserInfoStore</span>();</span><br><span class="line"><span class="keyword">import</span> {ref} <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取个人信息</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUserInf</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;{</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">userInfoGetService</span>();</span><br><span class="line">    <span class="comment">//存储pinia</span></span><br><span class="line">    userInfoStore.<span class="property">info</span> =result.<span class="property">data</span>;</span><br><span class="line">}</span><br><span class="line"><span class="title function_">getUserInf</span>()</span><br></pre></td></tr></tbody></table></figure><p><strong>Layout.vue的顶部导航栏中，展示昵称和头像</strong></p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>黑马程序员：<span class="tag">&lt;<span class="name">strong</span>&gt;</span>{{ userInfoStore.info.nickname ? userInfoStore.info.nickname : userInfoStore.info.usrename }}<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-avatar</span> <span class="attr">:src</span>=<span class="string">"userInfoStore.info.userPic ? userInfoStore.info.userPic : avatar"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="二十一、el-dropdown中功能实现">二十一、el-dropdown中功能实现</h2><p>在el-dropdown中有四个子条目，分别是：</p><ul><li>基本资料</li><li>更换头像</li><li>重置密码</li><li>退出登录</li></ul><p>其中其三个起到路由功能，跟左侧菜单中【个人中心】下面的二级菜单是同样的功能，退出登录需要删除本地pinia中存储的token以及userInfo</p><p><strong>路由实现：</strong></p><p>在el-dropdown-item标签上添加command属性，属性值和路由表中/user/xxx保持一致</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"info"</span> <span class="attr">:icon</span>=<span class="string">"User"</span>&gt;</span>基本资料<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"avatar"</span> <span class="attr">:icon</span>=<span class="string">"Crop"</span>&gt;</span>更换头像<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"password"</span> <span class="attr">:icon</span>=<span class="string">"EditPen"</span>&gt;</span>重置密码<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"logout"</span> <span class="attr">:icon</span>=<span class="string">"SwitchButton"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dropdown-menu</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在el-dropdown标签上绑定command事件,当有条目被点击后，会触发这个事件</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dropdown</span> <span class="attr">placement</span>=<span class="string">"bottom-end"</span> @<span class="attr">command</span>=<span class="string">"handleCommand"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>提供handleCommand函数，参数为点击条目的command属性值</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//dropDown条目被点击后，回调的函数</span></span><br><span class="line"><span class="keyword">import</span> {useRouter} <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleCommand</span> = (<span class="params">command</span>)=&gt;{</span><br><span class="line">    <span class="keyword">if</span>(command===<span class="string">'logout'</span>){</span><br><span class="line">        <span class="comment">//退出登录</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">'退出登录'</span>)</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="comment">//路由</span></span><br><span class="line">        router.<span class="title function_">push</span>(<span class="string">'/user/'</span>+command)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>退出登录实现：</strong></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> {<span class="title class_">ElMessage</span>,<span class="title class_">ElMessageBox</span>} <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> { useTokenStore } <span class="keyword">from</span> <span class="string">'@/stores/token.js'</span></span><br><span class="line"><span class="keyword">const</span> tokenStore = <span class="title function_">useTokenStore</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleCommand</span> = (<span class="params">command</span>) =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (command === <span class="string">'logout'</span>) {</span><br><span class="line">        <span class="comment">//退出登录</span></span><br><span class="line">        <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(</span><br><span class="line">            <span class="string">'你确认退出登录码？'</span>,</span><br><span class="line">            <span class="string">'温馨提示'</span>,</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">confirmButtonText</span>: <span class="string">'确认'</span>,</span><br><span class="line">                <span class="attr">cancelButtonText</span>: <span class="string">'取消'</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">'warning'</span>,</span><br><span class="line">            }</span><br><span class="line">        )</span><br><span class="line">            .<span class="title function_">then</span>(<span class="keyword">async</span> () =&gt; {</span><br><span class="line">                <span class="comment">//用户点击了确认</span></span><br><span class="line">                <span class="comment">//清空pinia中的token和个人信息</span></span><br><span class="line">                userInfoStore.<span class="property">info</span>={}</span><br><span class="line">                tokenStore.<span class="property">token</span>=<span class="string">''</span></span><br><span class="line">                <span class="comment">//跳转到登录页</span></span><br><span class="line">                router.<span class="title function_">push</span>(<span class="string">'/login'</span>)</span><br><span class="line">            })</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">                <span class="comment">//用户点击了取消</span></span><br><span class="line">                <span class="title class_">ElMessage</span>({</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">'info'</span>,</span><br><span class="line">                    <span class="attr">message</span>: <span class="string">'取消退出'</span>,</span><br><span class="line">                })</span><br><span class="line">            })</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">//路由</span></span><br><span class="line">        router.<span class="title function_">push</span>(<span class="string">'/user/'</span> + command)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="二十二、基本资料修改">二十二、基本资料修改</h2><h3 id="22-1-基本资料页面组件">22.1 基本资料页面组件</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> userInfo = <span class="title function_">ref</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">id</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">username</span>: <span class="string">'zhangsan'</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">nickname</span>: <span class="string">'zs'</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">email</span>: <span class="string">'zs@163.com'</span>,</span></span><br><span class="line"><span class="language-javascript">})</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> rules = {</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">nickname</span>: [</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入用户昵称'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span></span><br><span class="line"><span class="language-javascript">        {</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">pattern</span>: <span class="regexp">/^\S{2,10}$/</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">'昵称必须是2-10位的非空字符串'</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">trigger</span>: <span class="string">'blur'</span></span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">email</span>: [</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入用户邮箱'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">type</span>: <span class="string">'email'</span>, <span class="attr">message</span>: <span class="string">'邮箱格式不正确'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">"page-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>基本资料<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"12"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"userInfo"</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">label-width</span>=<span class="string">"100px"</span> <span class="attr">size</span>=<span class="string">"large"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"登录名称"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"userInfo.username"</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"用户昵称"</span> <span class="attr">prop</span>=<span class="string">"nickname"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"userInfo.nickname"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"用户邮箱"</span> <span class="attr">prop</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"userInfo.email"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>提交修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="22-2-表单数据回显">22.2 表单数据回显</h3><p>个人信息之前已经存储到了pinia中，只需要从pinia中获取个人信息，替换模板数据即可</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { useUserInfoStore } <span class="keyword">from</span> <span class="string">'@/stores/user.js'</span>;</span><br><span class="line"><span class="keyword">const</span> userInfoStore = <span class="title function_">useUserInfoStore</span>()</span><br><span class="line"><span class="keyword">const</span> userInfo = <span class="title function_">ref</span>({...userInfoStore.<span class="property">info</span>})</span><br></pre></td></tr></tbody></table></figure><h3 id="22-3-接口调用">22.3 接口调用</h3><p>在src/api/user.js中提供修改基本资料的函数</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//修改个人信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userInfoUpdateService</span> = (<span class="params">userInfo</span>)=&gt;{</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">put</span>(<span class="string">'/user/update'</span>,userInfo)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>为修改按钮绑定单击事件</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"updateUserInfo"</span>&gt;</span>提交修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>提供updateUserInfo函数</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//修改用户信息</span></span><br><span class="line"><span class="keyword">import</span> {userInfoUpdateService} <span class="keyword">from</span> <span class="string">'@/api/user.js'</span></span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">ElMessage</span> } <span class="keyword">from</span> <span class="string">'element-plus'</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateUserInfo</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;{</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">userInfoUpdateService</span>(userInfo.<span class="property">value</span>)</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span>? result.<span class="property">message</span>:<span class="string">'修改成功'</span>)</span><br><span class="line">    <span class="comment">//更新pinia中的数据</span></span><br><span class="line">    userInfoStore.<span class="property">info</span>.<span class="property">nickname</span>=userInfo.<span class="property">value</span>.<span class="property">nickname</span></span><br><span class="line">    userInfoStore.<span class="property">info</span>.<span class="property">email</span> = userInfo.<span class="property">value</span>.<span class="property">email</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="二十三、修改头像">二十三、修改头像</h2><h3 id="23-1-修改头像页面组件">23.1 修改头像页面组件</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">Plus</span>, <span class="title class_">Upload</span> } <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> {ref} <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">'@/assets/default.png'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> uploadRef = <span class="title function_">ref</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用户头像地址</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> imgUrl= avatar</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">"page-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>更换头像<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"12"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-upload</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">ref</span>=<span class="string">"uploadRef"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">"avatar-uploader"</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">:show-file-list</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                    &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">"imgUrl"</span> <span class="attr">:src</span>=<span class="string">"imgUrl"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-else</span> <span class="attr">src</span>=<span class="string">"avatar"</span> <span class="attr">width</span>=<span class="string">"278"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">:icon</span>=<span class="string">"Plus"</span> <span class="attr">size</span>=<span class="string">"large"</span>  @<span class="attr">click</span>=<span class="string">"uploadRef.$el.querySelector('input').click()"</span>&gt;</span></span><br><span class="line">                    选择图片</span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"success"</span> <span class="attr">:icon</span>=<span class="string">"Upload"</span> <span class="attr">size</span>=<span class="string">"large"</span>&gt;</span></span><br><span class="line">                    上传头像</span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.avatar-uploader</span> {</span></span><br><span class="line"><span class="language-css">    :<span class="built_in">deep</span>() {</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.avatar</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">278px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">278px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-upload</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--el-border-color);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: <span class="built_in">var</span>(--el-transition-duration-fast);</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-upload</span><span class="selector-pseudo">:hover</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: <span class="built_in">var</span>(--el-color-primary);</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-icon</span><span class="selector-class">.avatar-uploader-icon</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#8c939d</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">278px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">278px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="23-2-头像回显">23.2 头像回显</h3><p>从pinia中读取用户的头像数据</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//读取用户信息</span></span><br><span class="line"><span class="keyword">import</span> {ref} <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> {useUserInfoStore} <span class="keyword">from</span> <span class="string">'@/stores/user.js'</span></span><br><span class="line"><span class="keyword">const</span> userInfoStore = <span class="title function_">useUserInfoStore</span>()</span><br><span class="line"><span class="keyword">const</span> imgUrl=<span class="title function_">ref</span>(userInfoStore.<span class="property">info</span>.<span class="property">userPic</span>)</span><br></pre></td></tr></tbody></table></figure><p>img标签上绑定图片地址</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">"imgUrl"</span> <span class="attr">:src</span>=<span class="string">"imgUrl"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-else</span> <span class="attr">src</span>=<span class="string">"@/assets/avatar.jpg"</span> <span class="attr">width</span>=<span class="string">"278"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="23-3-头像上传">23.3 头像上传</h3><p>为el-upload指定属性值，分别有：</p><ul><li>​action: 服务器接口路径</li><li>​headers: 设置请求头，需要携带token</li><li>​on-success: 上传成功的回调函数</li><li>​name: 上传图片的字段名称</li></ul><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">class</span>=<span class="string">"avatar-uploader"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">:show-file-list</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:auto-upload</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">action</span>=<span class="string">"/api/upload"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">name</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:headers</span>=<span class="string">"{'Authorization':tokenStore.token}"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:on-success</span>=<span class="string">"uploadSuccess"</span></span></span><br><span class="line"><span class="tag">           &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">"imgUrl"</span> <span class="attr">:src</span>=<span class="string">"imgUrl"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-else</span> <span class="attr">src</span>=<span class="string">"@/assets/avatar.jpg"</span> <span class="attr">width</span>=<span class="string">"278"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>提供上传成功的回调函数</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//读取token信息</span></span><br><span class="line"><span class="keyword">import</span> {useTokenStore} <span class="keyword">from</span> <span class="string">'@/stores/token.js'</span></span><br><span class="line"><span class="keyword">const</span> tokenStore = <span class="title function_">useTokenStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//图片上传成功的回调</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">uploadSuccess</span> = (<span class="params">result</span>)=&gt;{</span><br><span class="line">    <span class="comment">//回显图片</span></span><br><span class="line">    imgUrl.<span class="property">value</span> = result.<span class="property">data</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>外部触发图片选择</p><p>​需要获取到el-upload组件，然后再通过$el.querySelector(‘input’)获取到el-upload对应的元素，触发click事件</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">//获取el-upload元素</span><br><span class="line">const uploadRef = ref()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">:icon</span>=<span class="string">"Plus"</span> <span class="attr">size</span>=<span class="string">"large"</span>  @<span class="attr">click</span>=<span class="string">"uploadRef.$el.querySelector('input').click()"</span>&gt;</span></span><br><span class="line">    选择图片</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="24-4-接口调用">24.4 接口调用</h3><p>在user.js中提供修改头像的函数</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//修改头像</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userAvatarUpdateService</span>=(<span class="params">avatarUrl</span>)=&gt;{</span><br><span class="line">    <span class="keyword">let</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>();</span><br><span class="line">    params.<span class="title function_">append</span>(<span class="string">'avatarUrl'</span>,avatarUrl)</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">patch</span>(<span class="string">'/user/updateAvatar'</span>,params)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>为【上传头像】按钮绑定单击事件</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"success"</span> <span class="attr">:icon</span>=<span class="string">"Upload"</span> <span class="attr">size</span>=<span class="string">"large"</span> @<span class="attr">click</span>=<span class="string">"updateAvatar"</span>&gt;</span></span><br><span class="line">    上传头像</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>提供updateAvatar函数，完成头像更新</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//调用接口，更新头像url</span></span><br><span class="line"><span class="keyword">import</span> {userAvatarUpdateService} <span class="keyword">from</span> <span class="string">'@/api/user.js'</span></span><br><span class="line"><span class="keyword">import</span> {<span class="title class_">ElMessage</span>} <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateAvatar</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;{</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">userAvatarUpdateService</span>(imgUrl.<span class="property">value</span>)</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span>? result.<span class="property">message</span>:<span class="string">'修改成功'</span>)</span><br><span class="line">    <span class="comment">//更新pinia中的数据</span></span><br><span class="line">    userInfoStore.<span class="property">info</span>.<span class="property">userPic</span>=imgUrl.<span class="property">value</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1>前端源代码</h1><p><img src="/2024/06/03/%E9%BB%91%E9%A9%AC%E5%A4%A7%E4%BA%8B%E4%BB%B6%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81/D:%5CUsers%5C30638%5CTypora%5C%E5%9B%BE%E7%89%87%5CQQ%E6%88%AA%E5%9B%BE20240703193714.png" alt=""></p><h2 id="一-api">一. api</h2><h3 id="article-js">article.js</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request.js'</span></span><br><span class="line"><span class="comment">//导入@/stores/token.js</span></span><br><span class="line"><span class="keyword">import</span> { useTokenStore } <span class="keyword">from</span> <span class="string">'@/stores/token.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleCategoryListService</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="comment">//获取token状态</span></span><br><span class="line">    <span class="comment">// const tokenStore = useTokenStore()</span></span><br><span class="line">    <span class="comment">// //通过请求头Authorization携带token</span></span><br><span class="line">    <span class="comment">// return request.get('/category', { headers: { 'Authorization': tokenStore.token } })</span></span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">'/category'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加文章分类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleCategoryAddService</span> = (<span class="params">categoryModel</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">post</span>(<span class="string">'/category'</span>, categoryModel)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改分类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleCategoryUpdateService</span> = (<span class="params">categoryModel</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">put</span>(<span class="string">'/category'</span>, categoryModel)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除分类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleCategoryDeleteService</span> = (<span class="params">id</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">delete</span>(<span class="string">'/category?id='</span> + id)</span><br><span class="line">}</span><br><span class="line"><span class="comment">//文章列表查询</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleListService</span> = (<span class="params">params</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">'/article'</span>, { <span class="attr">params</span>: params })</span><br><span class="line">}</span><br><span class="line"><span class="comment">//添加文章</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleAddService</span> = (<span class="params">articleModel</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">post</span>(<span class="string">'/article'</span>, articleModel)</span><br><span class="line">}</span><br><span class="line"><span class="comment">//修改文章</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleEditService</span> = (<span class="params">articleModel</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">put</span>(<span class="string">'/article'</span>, articleModel)</span><br><span class="line">}</span><br><span class="line"><span class="comment">//删除文章</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleDeleteService</span> = (<span class="params">id</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">delete</span>(<span class="string">'/article?id='</span> + id)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="user-js">user.js</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userRegisterService</span> = (<span class="params">registerData</span>)=&gt;{</span><br><span class="line">    <span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> registerData) {</span><br><span class="line">        params.<span class="title function_">append</span>(key, registerData[key])</span><br><span class="line">    }</span><br><span class="line">   <span class="keyword">return</span>  request.<span class="title function_">post</span>(<span class="string">'/user/register'</span>,params)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userLoginService</span> = (<span class="params">loginData</span>)=&gt;{</span><br><span class="line">    <span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> loginData) {</span><br><span class="line">        params.<span class="title function_">append</span>(key, loginData[key])</span><br><span class="line">    }</span><br><span class="line">   <span class="keyword">return</span>  request.<span class="title function_">post</span>(<span class="string">'/user/login'</span>,params)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userInfoService</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">'/user/userInfo'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改个人信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userInfoUpdateService</span> = (<span class="params">userInfo</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">put</span>(<span class="string">'/user/update'</span>, userInfo)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改头像</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userAvatarUpdateService</span> = (<span class="params">avatarUrl</span>) =&gt; {</span><br><span class="line">    <span class="keyword">let</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>();</span><br><span class="line">    params.<span class="title function_">append</span>(<span class="string">'avatarUrl'</span>, avatarUrl)</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">patch</span>(<span class="string">'/user/updateAvatar'</span>, params)</span><br><span class="line">}</span><br><span class="line"><span class="comment">//修改密码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userUpdatePasswordService</span> = (<span class="params">pwdModel</span>) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> params = {</span><br><span class="line">        <span class="attr">old_pwd</span>: pwdModel.<span class="property">oldPwd</span>,</span><br><span class="line">        <span class="attr">new_pwd</span>: pwdModel.<span class="property">newPwd</span>,</span><br><span class="line">        <span class="attr">re_pwd</span>: pwdModel.<span class="property">rePwd</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">patch</span>(<span class="string">'/user/updatePwd'</span>, params)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="二-router">二. router</h2><h3 id="index-js">index.js</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//导入vue-router</span></span><br><span class="line"><span class="keyword">import</span> { createRouter, createWebHistory } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">//导入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LoginVue</span> <span class="keyword">from</span> <span class="string">'@/views/Login.vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LayoutVue</span> <span class="keyword">from</span> <span class="string">'@/views/Layout.vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ArticleCategoryVue</span> <span class="keyword">from</span> <span class="string">'@/views/article/ArticleCategory.vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ArticleManageVue</span> <span class="keyword">from</span> <span class="string">'@/views/article/ArticleManage.vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserAvatarVUe</span> <span class="keyword">from</span> <span class="string">'@/views/user/UserAvatar.vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserInfoVue</span> <span class="keyword">from</span> <span class="string">'@/views/user/UserInfo.vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserResetPasswordVue</span> <span class="keyword">from</span> <span class="string">'@/views/user/UserResetPassword.vue'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义路由关系</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    { <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">component</span>: <span class="title class_">LoginVue</span> },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="title class_">LayoutVue</span>, <span class="attr">children</span>:[</span><br><span class="line">     {<span class="attr">path</span>: <span class="string">'/article/category'</span>, <span class="attr">component</span>: <span class="title class_">ArticleCategoryVue</span> },</span><br><span class="line">    { <span class="attr">path</span>: <span class="string">'/article/manage'</span>, <span class="attr">component</span>: <span class="title class_">ArticleManageVue</span> },</span><br><span class="line">    { <span class="attr">path</span>: <span class="string">'/user/info'</span>, <span class="attr">component</span>: <span class="title class_">UserInfoVue</span> },</span><br><span class="line">    { <span class="attr">path</span>: <span class="string">'/user/avatar'</span>, <span class="attr">component</span>: <span class="title class_">UserAvatarVUe</span> },</span><br><span class="line">    { <span class="attr">path</span>: <span class="string">'/user/resetpassword'</span>, <span class="attr">component</span>: <span class="title class_">UserResetPasswordVue</span> },</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>({</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>: routes</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></tbody></table></figure><h2 id="三-stores">三. stores</h2><h3 id="token-js">token.js</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineStore } <span class="keyword">from</span> <span class="string">"pinia"</span>;</span><br><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    defineStore参数描述：</span></span><br><span class="line"><span class="comment">        第一个参数：给状态起名，具有唯一性</span></span><br><span class="line"><span class="comment">        第二个参数：函数，可以把定义该状态中拥有的内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    defineStore返回值描述：</span></span><br><span class="line"><span class="comment">        返回的是一个函数，将来可以调用该函数，得到第二个参数中返回的内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTokenStore = <span class="title function_">defineStore</span>(<span class="string">'token'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="comment">//1.定义描述token</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">ref</span>(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.定义修改token的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setToken</span> = (<span class="params">newToken</span>) =&gt; {</span><br><span class="line">        token.<span class="property">value</span> = newToken</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.定义移除token的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">removeToken</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">        token.<span class="property">value</span> = <span class="string">''</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        token, setToken, removeToken</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">    ,</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">persist</span>: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h3 id="userInfo-js">userInfo.js</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineStore } <span class="keyword">from</span> <span class="string">"pinia"</span></span><br><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserInfoStore = <span class="title function_">defineStore</span>(<span class="string">'userInfo'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="comment">//1.定义用户信息</span></span><br><span class="line">    <span class="keyword">const</span> info = <span class="title function_">ref</span>({})</span><br><span class="line">    <span class="comment">//2.定义修改用户信息的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setInfo</span> = (<span class="params">newInfo</span>) =&gt; {</span><br><span class="line">        info.<span class="property">value</span> = newInfo</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//3.定义清空用户信息的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">removeInfo</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">        info.<span class="property">value</span> = {}</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> { info, setInfo, removeInfo }</span><br><span class="line">}, {</span><br><span class="line">    <span class="attr">persist</span>: <span class="literal">true</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="四-utils">四. utils</h2><h3 id="request-js">request.js</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//定制请求的实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入axios  npm install axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">ElMessage</span> } <span class="keyword">from</span> <span class="string">'element-plus'</span>;</span><br><span class="line"><span class="comment">//定义一个变量,记录公共的前缀  ,  baseURL</span></span><br><span class="line"><span class="comment">// const baseURL = 'http://localhost:8080';</span></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">'/api'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>({baseURL})</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入token状态</span></span><br><span class="line"><span class="keyword">import</span> { useTokenStore } <span class="keyword">from</span> <span class="string">'@/stores/token.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router/index.js'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加请求拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">config</span>) =&gt;</span> {</span><br><span class="line">        <span class="comment">//在发送请求之前做什么</span></span><br><span class="line">        <span class="keyword">let</span> tokenStore = <span class="title function_">useTokenStore</span>()</span><br><span class="line">        <span class="comment">//如果token中有值，在携带</span></span><br><span class="line">        <span class="keyword">if</span> (tokenStore.<span class="property">token</span>) {</span><br><span class="line">            config.<span class="property">headers</span>.<span class="property">Authorization</span> = tokenStore.<span class="property">token</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    },</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">        <span class="comment">//如果请求错误做什么</span></span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">    }</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">if</span> (result.<span class="property">data</span>.<span class="property">code</span> === <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> result.<span class="property">data</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// alert(result.msg?result.msg:'服务异常')</span></span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(result.<span class="property">data</span>.<span class="property">message</span> ? result.<span class="property">data</span>.<span class="property">message</span> : <span class="string">'服务异常'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(result.<span class="property">data</span>);<span class="comment">//异步的状态转化成失败的状态</span></span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">        <span class="comment">//如果响应状态码时401，代表未登录，给出对应的提示，并跳转到登录页</span></span><br><span class="line">        <span class="keyword">if</span> (err.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) {</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">'请先登录！'</span>)</span><br><span class="line">            router.<span class="title function_">push</span>(<span class="string">'/login'</span>)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">'服务异常'</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);<span class="comment">//异步的状态转化成失败的状态</span></span><br><span class="line">    }</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br></pre></td></tr></tbody></table></figure><h2 id="五-views-article">五. views/article</h2><h3 id="ArticleCategory-vue">ArticleCategory.vue</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> {</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Edit</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Delete</span></span></span><br><span class="line"><span class="language-javascript">} <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> categorys = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryName"</span>: <span class="string">"美食"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryAlias"</span>: <span class="string">"my"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-02 12:06:59"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-02 12:06:59"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryName"</span>: <span class="string">"娱乐"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryAlias"</span>: <span class="string">"yl"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-02 12:08:16"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-02 12:08:16"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryName"</span>: <span class="string">"军事"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryAlias"</span>: <span class="string">"js"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-02 12:08:33"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-02 12:08:33"</span></span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> {articleCategoryListService, articleCategoryAddService, articleCategoryUpdateService,articleCategoryDeleteService} <span class="keyword">from</span> <span class="string">'@/api/article.js'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">articleCategoryList</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleCategoryListService</span>();</span></span><br><span class="line"><span class="language-javascript">    categorys.<span class="property">value</span> = result.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">articleCategoryList</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//控制添加分类弹窗</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> dialogVisible = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//添加分类数据模型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> categoryModel = <span class="title function_">ref</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">categoryName</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">categoryAlias</span>: <span class="string">''</span></span></span><br><span class="line"><span class="language-javascript">})</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//添加分类表单校验</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> rules = {</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">categoryName</span>: [</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入分类名称'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">categoryAlias</span>: [</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入分类别名'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">ElMessage</span> } <span class="keyword">from</span> <span class="string">'element-plus'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">addCategory</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleCategoryAddService</span>(categoryModel.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span>?result.<span class="property">message</span>:<span class="string">'添加成功'</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">articleCategoryList</span>();</span></span><br><span class="line"><span class="language-javascript">        dialogVisible.<span class="property">value</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> title = <span class="title function_">ref</span>(<span class="string">''</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">showDialog</span> = (<span class="params">row</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    dialogVisible.<span class="property">value</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    title.<span class="property">value</span> = <span class="string">'编辑分类'</span></span></span><br><span class="line"><span class="language-javascript">    categoryModel.<span class="property">value</span>.<span class="property">categoryName</span> = row.<span class="property">categoryName</span></span></span><br><span class="line"><span class="language-javascript">    categoryModel.<span class="property">value</span>.<span class="property">categoryAlias</span> = row.<span class="property">categoryAlias</span></span></span><br><span class="line"><span class="language-javascript">    categoryModel.<span class="property">value</span>.<span class="property">id</span> = row.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//修改分类</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">updateCategory</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleCategoryUpdateService</span>(categoryModel.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span> ? result.<span class="property">message</span> : <span class="string">'修改成功'</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//隐藏弹窗</span></span></span><br><span class="line"><span class="language-javascript">    dialogVisible.<span class="property">value</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//再次访问后台接口，查询所有分类</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">articleCategoryList</span>()</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//清空模型数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">clearCategoryModel</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    categoryModel.<span class="property">value</span>.<span class="property">categoryName</span> = <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">        categoryModel.<span class="property">value</span>.<span class="property">categoryAlias</span> = <span class="string">''</span></span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//删除分类  给删除按钮绑定事件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">ElMessageBox</span> } <span class="keyword">from</span> <span class="string">'element-plus'</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//删除分类</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">deleteCategory</span> = (<span class="params">row</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">'你确认删除该分类信息吗？'</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">'温馨提示'</span>,</span></span><br><span class="line"><span class="language-javascript">        {</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">confirmButtonText</span>: <span class="string">'确认'</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cancelButtonText</span>: <span class="string">'取消'</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">'warning'</span>,</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="keyword">async</span> () =&gt; {</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//用户点击了确认</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleCategoryDeleteService</span>(row.<span class="property">id</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span> ? result.<span class="property">message</span> : <span class="string">'删除成功'</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//再次调用getAllCategory，获取所有文章分类</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">articleCategoryList</span>()</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        })</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> {</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//用户点击了取消</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">ElMessage</span>({</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">'info'</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>: <span class="string">'取消删除'</span>,</span></span><br><span class="line"><span class="language-javascript">            })</span></span><br><span class="line"><span class="language-javascript">        })</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">"page-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>文章分类<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"extra"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">click</span>=<span class="string">"title = '添加分类'; dialogVisible = true; clearCategoryModel()"</span>&gt;</span>添加分类<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"categorys"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"序号"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"分类名称"</span> <span class="attr">prop</span>=<span class="string">"categoryName"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"分类别名"</span> <span class="attr">prop</span>=<span class="string">"categoryAlias"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"操作"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">"{ row }"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:icon</span>=<span class="string">"Edit"</span> <span class="attr">circle</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"showDialog(row)"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:icon</span>=<span class="string">"Delete"</span> <span class="attr">circle</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">"danger"</span> @<span class="attr">click</span>=<span class="string">"deleteCategory(row)"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">empty</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-empty</span> <span class="attr">description</span>=<span class="string">"没有数据"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 添加分类弹窗 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">v-model</span>=<span class="string">"dialogVisible"</span> <span class="attr">:title</span>=<span class="string">"title"</span> <span class="attr">width</span>=<span class="string">"30%"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"categoryModel"</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">label-width</span>=<span class="string">"100px"</span> <span class="attr">style</span>=<span class="string">"padding-right: 30px"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"分类名称"</span> <span class="attr">prop</span>=<span class="string">"categoryName"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"categoryModel.categoryName"</span> <span class="attr">minlength</span>=<span class="string">"1"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"分类别名"</span> <span class="attr">prop</span>=<span class="string">"categoryAlias"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"categoryModel.categoryAlias"</span> <span class="attr">minlength</span>=<span class="string">"1"</span> <span class="attr">maxlength</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"dialogVisible = false"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"title==='添加分类'?addCategory():updateCategory()"</span>&gt;</span> 确认 <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.page-container</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="ArticleManage-vue">ArticleManage.vue</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> {</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Edit</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Delete</span></span></span><br><span class="line"><span class="language-javascript">} <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//文章分类数据模型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> categorys = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryName"</span>: <span class="string">"美食"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryAlias"</span>: <span class="string">"my"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-02 12:06:59"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-02 12:06:59"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryName"</span>: <span class="string">"娱乐"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryAlias"</span>: <span class="string">"yl"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-02 12:08:16"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-02 12:08:16"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryName"</span>: <span class="string">"军事"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryAlias"</span>: <span class="string">"js"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-02 12:08:33"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-02 12:08:33"</span></span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用户搜索时选中的分类id</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> categoryId = <span class="title function_">ref</span>(<span class="string">''</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用户搜索时选中的发布状态</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> state = <span class="title function_">ref</span>(<span class="string">''</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//文章列表数据模型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> articles = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"title"</span>: <span class="string">"陕西旅游攻略"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"content"</span>: <span class="string">"兵马俑,华清池,法门寺,华山...爱去哪去哪..."</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"coverImg"</span>: <span class="string">"https://big-event-gwd.oss-cn-beijing.aliyuncs.com/9bf1cf5b-1420-4c1b-91ad-e0f4631cbed4.png"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"state"</span>: <span class="string">"草稿"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryId"</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-03 11:55:30"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-03 11:55:30"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"title"</span>: <span class="string">"陕西旅游攻略"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"content"</span>: <span class="string">"兵马俑,华清池,法门寺,华山...爱去哪去哪..."</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"coverImg"</span>: <span class="string">"https://big-event-gwd.oss-cn-beijing.aliyuncs.com/9bf1cf5b-1420-4c1b-91ad-e0f4631cbed4.png"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"state"</span>: <span class="string">"草稿"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryId"</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-03 11:55:30"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-03 11:55:30"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    {</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"id"</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"title"</span>: <span class="string">"陕西旅游攻略"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"content"</span>: <span class="string">"兵马俑,华清池,法门寺,华山...爱去哪去哪..."</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"coverImg"</span>: <span class="string">"https://big-event-gwd.oss-cn-beijing.aliyuncs.com/9bf1cf5b-1420-4c1b-91ad-e0f4631cbed4.png"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"state"</span>: <span class="string">"草稿"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"categoryId"</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"createTime"</span>: <span class="string">"2023-09-03 11:55:30"</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">"updateTime"</span>: <span class="string">"2023-09-03 11:55:30"</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//分页条数据模型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> pageNum = <span class="title function_">ref</span>(<span class="number">1</span>)<span class="comment">//当前页</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> total = <span class="title function_">ref</span>(<span class="number">20</span>)<span class="comment">//总条数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> pageSize = <span class="title function_">ref</span>(<span class="number">3</span>)<span class="comment">//每页条数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//当每页条数发生了变化，调用此函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onSizeChange</span> = (<span class="params">size</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    pageSize.<span class="property">value</span> = size</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">articleList</span>()</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//当前页码发生变化，调用此函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onCurrentChange</span> = (<span class="params">num</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    pageNum.<span class="property">value</span> = num</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">articleList</span>()</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//文章列表查询</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { articleCategoryListService, articleListService, articleAddService, articleEditService, articleDeleteService } <span class="keyword">from</span> <span class="string">'@/api/article.js'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">articleCategoryList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取所有分类</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> resultC = <span class="keyword">await</span> <span class="title function_">articleCategoryListService</span>();</span></span><br><span class="line"><span class="language-javascript">    categorys.<span class="property">value</span> = resultC.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">articleList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> params = {</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pageNum</span>: pageNum.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pageSize</span>: pageSize.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">categoryId</span>: categoryId.<span class="property">value</span> ? categoryId.<span class="property">value</span> : <span class="literal">null</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">state</span>: state.<span class="property">value</span> ? state.<span class="property">value</span> : <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleListService</span>(params);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//渲染总条数</span></span></span><br><span class="line"><span class="language-javascript">    total.<span class="property">value</span> = result.<span class="property">data</span>.<span class="property">total</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//渲染列表数据</span></span></span><br><span class="line"><span class="language-javascript">    articles.<span class="property">value</span> = result.<span class="property">data</span>.<span class="property">items</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//为列表中添加categoryName属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; articles.<span class="property">value</span>.<span class="property">length</span>; i++) {</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> article = articles.<span class="property">value</span>[i];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; categorys.<span class="property">value</span>.<span class="property">length</span>; j++) {</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (article.<span class="property">categoryId</span> === categorys.<span class="property">value</span>[j].<span class="property">id</span>) {</span></span><br><span class="line"><span class="language-javascript">                article.<span class="property">categoryName</span> = categorys.<span class="property">value</span>[j].<span class="property">categoryName</span></span></span><br><span class="line"><span class="language-javascript">            }</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">articleCategoryList</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">articleList</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">QuillEditor</span> } <span class="keyword">from</span> <span class="string">'@vueup/vue-quill'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">'@vueup/vue-quill/dist/vue-quill.snow.css'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">Plus</span> } <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//控制抽屉是否显示</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> visibleDrawer = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//添加表单数据模型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> articleModel = <span class="title function_">ref</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">categoryId</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">coverImg</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">content</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">state</span>: <span class="string">''</span></span></span><br><span class="line"><span class="language-javascript">})</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useTokenStore } <span class="keyword">from</span> <span class="string">'@/stores/token.js'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> tokenStore = <span class="title function_">useTokenStore</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//上传图片成功回调</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">uploadSuccess</span> = (<span class="params">result</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//img就是后台响应的数据，格式为：{code:状态码，message：提示信息，data: 图片的存储地址}</span></span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">coverImg</span> = result.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> title = <span class="title function_">ref</span>(<span class="string">'新增文章'</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//添加文章</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">ElMessage</span> } <span class="keyword">from</span> <span class="string">'element-plus'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">addArticle</span> = <span class="keyword">async</span> (<span class="params">state</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">state</span> = state</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleAddService</span>(articleModel.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span> ? result.<span class="property">message</span> : <span class="string">'添加成功'</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//隐藏抽屉</span></span></span><br><span class="line"><span class="language-javascript">    visibleDrawer.<span class="property">value</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//再次调用articleList方法获取文章</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">articleList</span>();</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">showForm</span> = (<span class="params">row</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    title.<span class="property">value</span> = <span class="string">'编辑文章'</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//将文章数据渲染到表单中</span></span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">title</span> = row.<span class="property">title</span></span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">categoryId</span> = row.<span class="property">categoryId</span></span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">coverImg</span> = row.<span class="property">coverImg</span></span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">content</span> = row.<span class="property">content</span></span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">state</span> = row.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 确保编辑器的内容也渲染</span></span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">id</span> = row.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">editArticle</span> = <span class="keyword">async</span> (<span class="params">state</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">state</span> = state</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleEditService</span>(articleModel.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">'修改成功'</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//隐藏抽屉</span></span></span><br><span class="line"><span class="language-javascript">    visibleDrawer.<span class="property">value</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//再次调用articleList方法获取文章</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">articleList</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">clearArticelForm</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    title.<span class="property">value</span> = <span class="string">'新增文章'</span></span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">title</span> = <span class="string">''</span>;</span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">categoryId</span> = <span class="string">''</span>;</span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">coverImg</span> = <span class="string">''</span>;</span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">content</span> = <span class="string">''</span>;</span></span><br><span class="line"><span class="language-javascript">    articleModel.<span class="property">value</span>.<span class="property">state</span> = <span class="string">''</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 确保编辑器的内容也清空</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'.ql-editor'</span>)) {</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'.ql-editor'</span>).<span class="property">innerHTML</span> = <span class="string">''</span>; <span class="comment">// 清空编辑器的内容</span></span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">deleteArticle</span> = <span class="keyword">async</span> (<span class="params">row</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">articleDeleteService</span>(row.<span class="property">id</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span> ? result.<span class="property">message</span> : <span class="string">'删除成功'</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">articleList</span>()</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">"page-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>文章管理<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"extra"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"visibleDrawer = true; clearArticelForm()"</span>&gt;</span>添加文章<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 搜索表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">inline</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">" 文章分类："</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span> <span class="attr">v-model</span>=<span class="string">"categoryId"</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">"c in categorys"</span> <span class="attr">:key</span>=<span class="string">"c.id"</span> <span class="attr">:label</span>=<span class="string">"c.categoryName"</span> <span class="attr">:value</span>=<span class="string">"c.id"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"发布状态："</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span> <span class="attr">v-model</span>=<span class="string">"state"</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">" 已发布"</span> <span class="attr">value</span>=<span class="string">"已发布"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"草稿"</span> <span class="attr">value</span>=<span class="string">"草稿"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"articleList"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"categoryId = ''; state = ''; articleList()"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文章列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"articles"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"文章标题"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">prop</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"分类"</span> <span class="attr">prop</span>=<span class="string">"categoryName"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"发表时间"</span> <span class="attr">prop</span>=<span class="string">"createTime"</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"状态"</span> <span class="attr">prop</span>=<span class="string">"state"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"操作"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">"{ row }"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:icon</span>=<span class="string">"Edit"</span> <span class="attr">circle</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">click</span>=<span class="string">"visibleDrawer = true; showForm(row);"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:icon</span>=<span class="string">"Delete"</span> <span class="attr">circle</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">"danger"</span> @<span class="attr">click</span>=<span class="string">"deleteArticle(row)"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">empty</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-empty</span> <span class="attr">description</span>=<span class="string">"没有数据"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页条 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">v-model:current-page</span>=<span class="string">"pageNum"</span> <span class="attr">v-model:page-size</span>=<span class="string">"pageSize"</span> <span class="attr">:page-sizes</span>=<span class="string">"[3, 5, 10, 15]"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">"jumper, total, sizes, prev, pager, next"</span> <span class="attr">background</span> <span class="attr">:total</span>=<span class="string">"total"</span> @<span class="attr">size-change</span>=<span class="string">"onSizeChange"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">current-change</span>=<span class="string">"onCurrentChange"</span> <span class="attr">style</span>=<span class="string">"margin-top: 20px; justify-content: flex-end"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 抽屉 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-drawer</span> <span class="attr">v-model</span>=<span class="string">"visibleDrawer"</span> <span class="attr">:title</span>=<span class="string">"title"</span> <span class="attr">direction</span>=<span class="string">"rtl"</span> <span class="attr">size</span>=<span class="string">"50%"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 添加文章表单 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"articleModel"</span> <span class="attr">label-width</span>=<span class="string">"100px"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章标题"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"articleModel.title"</span> <span class="attr">placeholder</span>=<span class="string">"请输入标题"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章分类"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span> <span class="attr">v-model</span>=<span class="string">"articleModel.categoryId"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">"c in categorys"</span> <span class="attr">:key</span>=<span class="string">"c.id"</span> <span class="attr">:label</span>=<span class="string">"c.categoryName"</span> <span class="attr">:value</span>=<span class="string">"c.id"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章封面"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">class</span>=<span class="string">"avatar-uploader"</span> <span class="attr">:auto-upload</span>=<span class="string">"true"</span> <span class="attr">:show-file-list</span>=<span class="string">"false"</span> <span class="attr">action</span>=<span class="string">"/api/upload"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">:headers</span>=<span class="string">"{ 'Authorization': tokenStore.token }"</span> <span class="attr">:on-success</span>=<span class="string">"uploadSuccess"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">"articleModel.coverImg"</span> <span class="attr">:src</span>=<span class="string">"articleModel.coverImg"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"avatar-uploader-icon"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Plus</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章内容"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"editor"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">quill-editor</span> <span class="attr">theme</span>=<span class="string">"snow"</span> <span class="attr">v-model:content</span>=<span class="string">"articleModel.content"</span> <span class="attr">contentType</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">quill-editor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">click</span>=<span class="string">"title === '编辑文章' ? editArticle('已发布') : addArticle('已发布')"</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"info"</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">click</span>=<span class="string">"title === '编辑文章' ? editArticle('草稿') : addArticle('草稿')"</span>&gt;</span>草稿<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-drawer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.page-container</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 抽屉样式 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.avatar-uploader</span> {</span></span><br><span class="line"><span class="language-css">    :<span class="built_in">deep</span>() {</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.avatar</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">178px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">178px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-upload</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--el-border-color);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: <span class="built_in">var</span>(--el-transition-duration-fast);</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-upload</span><span class="selector-pseudo">:hover</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: <span class="built_in">var</span>(--el-color-primary);</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-icon</span><span class="selector-class">.avatar-uploader-icon</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#8c939d</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">178px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">178px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.editor</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    :<span class="built_in">deep</span>(.ql-editor) {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="六-views-user">六. views/user</h2><h3 id="UserAvatar-vue">UserAvatar.vue</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">Plus</span>, <span class="title class_">Upload</span> } <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">'@/assets/default.png'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> uploadRef = <span class="title function_">ref</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useTokenStore } <span class="keyword">from</span> <span class="string">'@/stores/token.js'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> tokenStore = <span class="title function_">useTokenStore</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useUserInfoStore } <span class="keyword">from</span> <span class="string">'@/stores/userInfo.js'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> userInfoStore = <span class="title function_">useUserInfoStore</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用户头像地址</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> imgUrl = <span class="title function_">ref</span>(userInfoStore.<span class="property">info</span>.<span class="property">userPic</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">uploadSuccess</span> = (<span class="params">result</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">   imgUrl.<span class="property">value</span> = result.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//调用接口，更新头像url</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { userAvatarUpdateService } <span class="keyword">from</span> <span class="string">'@/api/user.js'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">ElMessage</span> } <span class="keyword">from</span> <span class="string">'element-plus'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">updateAvatar</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">userAvatarUpdateService</span>(imgUrl.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span> ? result.<span class="property">message</span> : <span class="string">'修改成功'</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//更新pinia中的数据</span></span></span><br><span class="line"><span class="language-javascript">    userInfoStore.<span class="property">info</span>.<span class="property">userPic</span> = imgUrl.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">"page-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>更换头像<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"12"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">ref</span>=<span class="string">"uploadRef"</span> <span class="attr">class</span>=<span class="string">"avatar-uploader"</span> <span class="attr">:show-file-list</span>=<span class="string">"false"</span> <span class="attr">:auto-upload</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">action</span>=<span class="string">"/api/upload"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">:headers</span>=<span class="string">"{'Authorization': tokenStore.token}"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:on-success</span>=<span class="string">"uploadSuccess"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">"imgUrl"</span> <span class="attr">:src</span>=<span class="string">"imgUrl"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-else</span> <span class="attr">:src</span>=<span class="string">"avatar"</span> <span class="attr">width</span>=<span class="string">"278"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">:icon</span>=<span class="string">"Plus"</span> <span class="attr">size</span>=<span class="string">"large"</span></span></span><br><span class="line"><span class="tag">                    @<span class="attr">click</span>=<span class="string">"uploadRef.$el.querySelector('input').click()"</span>&gt;</span></span><br><span class="line">                    选择图片</span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"success"</span> <span class="attr">:icon</span>=<span class="string">"Upload"</span> <span class="attr">size</span>=<span class="string">"large"</span> @<span class="attr">click</span>=<span class="string">"updateAvatar"</span>&gt;</span></span><br><span class="line">                    上传头像</span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.avatar-uploader</span> {</span></span><br><span class="line"><span class="language-css">    :<span class="built_in">deep</span>() {</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.avatar</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">278px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">278px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-upload</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--el-border-color);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: <span class="built_in">var</span>(--el-transition-duration-fast);</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-upload</span><span class="selector-pseudo">:hover</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: <span class="built_in">var</span>(--el-color-primary);</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-icon</span><span class="selector-class">.avatar-uploader-icon</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#8c939d</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">278px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">278px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="UserInfo-vue">UserInfo.vue</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useUserInfoStore } <span class="keyword">from</span> <span class="string">'@/stores/userInfo.js'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> userInfoStore = <span class="title function_">useUserInfoStore</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> userInfo = <span class="title function_">ref</span>({ ...userInfoStore.<span class="property">info</span> })</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> rules = {</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">nickname</span>: [</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入用户昵称'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span></span><br><span class="line"><span class="language-javascript">        {</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">pattern</span>: <span class="regexp">/^\S{2,10}$/</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">'昵称必须是2-10位的非空字符串'</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">trigger</span>: <span class="string">'blur'</span></span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">email</span>: [</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入用户邮箱'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">type</span>: <span class="string">'email'</span>, <span class="attr">message</span>: <span class="string">'邮箱格式不正确'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { userInfoUpdateService } <span class="keyword">from</span> <span class="string">'@/api/user.js'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">ElMessage</span> } <span class="keyword">from</span> <span class="string">'element-plus'</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//修改个人信息</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">updateUserInfo</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">userInfoUpdateService</span>(userInfo.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span> ? result.<span class="property">message</span> : <span class="string">'修改成功'</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//修改pinia用户信息</span></span></span><br><span class="line"><span class="language-javascript">    userInfoStore.<span class="title function_">setInfo</span>(userInfo.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">"page-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>基本资料<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"12"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"userInfo"</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">label-width</span>=<span class="string">"100px"</span> <span class="attr">size</span>=<span class="string">"large"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"登录名称"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"userInfo.username"</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"用户昵称"</span> <span class="attr">prop</span>=<span class="string">"nickname"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"userInfo.nickname"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"用户邮箱"</span> <span class="attr">prop</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"userInfo.email"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"updateUserInfo"</span>&gt;</span>提交修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="UserResetPassword-vue">UserResetPassword.vue</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-card</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">style</span>=<span class="string">"max-width: 600px"</span> <span class="attr">:model</span>=<span class="string">"pwdModel"</span> <span class="attr">status-icon</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">label-width</span>=<span class="string">"auto"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">"demo-ruleForm"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"原密码"</span> <span class="attr">prop</span>=<span class="string">"oldPwd"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"pwdModel.oldPwd"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"新密码"</span> <span class="attr">prop</span>=<span class="string">"newPwd"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"pwdModel.newPwd"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"确认新密码"</span> <span class="attr">prop</span>=<span class="string">"rePwd"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"pwdModel.rePwd"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"submitForm()"</span> <span class="attr">style</span>=<span class="string">"margin-left: 30%;"</span>&gt;</span></span><br><span class="line">                        确认</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"resetForm()"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> {ref } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">validateRePwd</span> = (<span class="params">rule, value, callback</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (value === <span class="string">''</span>) {</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'请再次输入新密码'</span>))</span></span><br><span class="line"><span class="language-javascript">    } <span class="keyword">else</span> <span class="keyword">if</span> (value !== pwdModel.<span class="property">value</span>.<span class="property">newPwd</span>) {</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">"确认密码与新密码不匹配"</span>))</span></span><br><span class="line"><span class="language-javascript">    } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">callback</span>()</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> pwdModel= <span class="title function_">ref</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">oldPwd</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">newPwd</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">rePwd</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">})</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> rules = {</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">oldPwd</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入原密码'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">pattern</span>: <span class="regexp">/^\S{6,16}$/</span>, <span class="attr">message</span>: <span class="string">'密码长度必须是6-16位的非空字符串'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">newPwd</span>: [{ <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入新密码'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">pattern</span>: <span class="regexp">/^\S{6,16}$/</span>, <span class="attr">message</span>: <span class="string">'密码长度必须是6-16位的非空字符串'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">rePwd</span>: [{ <span class="attr">validator</span>: validateRePwd, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span></span><br><span class="line"><span class="language-javascript">    { <span class="attr">pattern</span>: <span class="regexp">/^\S{6,16}$/</span>, <span class="attr">message</span>: <span class="string">'密码长度必须是6-16位的非空字符串'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">ElMessage</span> } <span class="keyword">from</span> <span class="string">'element-plus'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useUserInfoStore } <span class="keyword">from</span> <span class="string">'@/stores/userInfo.js'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useRouter } <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> userInfoStore = <span class="title function_">useUserInfoStore</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { userUpdatePasswordService } <span class="keyword">from</span> <span class="string">'@/api/user.js'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">submitForm</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">userUpdatePasswordService</span>(pwdModel.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">'修改成功,即将跳转登录页'</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//修改pinia用户信息</span></span></span><br><span class="line"><span class="language-javascript">    userInfoStore.<span class="title function_">setInfo</span>(pwdModel.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">resetForm</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span></span><br><span class="line"><span class="language-javascript">        router.<span class="title function_">push</span>(<span class="string">'/login'</span>)</span></span><br><span class="line"><span class="language-javascript">    }, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">resetForm</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    pwdModel.<span class="property">value</span> = {</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">oldPwd</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">newPwd</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">rePwd</span>: <span class="string">''</span></span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="七-Layout-vue">七. Layout.vue</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> {</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Management</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Promotion</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">UserFilled</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">User</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Crop</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">EditPen</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">SwitchButton</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">CaretBottom</span></span></span><br><span class="line"><span class="language-javascript">} <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">'@/assets/default.png'</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { userInfoService } <span class="keyword">from</span> <span class="string">'@/api/user.js'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useUserInfoStore } <span class="keyword">from</span> <span class="string">'@/stores/userInfo'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useTokenStore } <span class="keyword">from</span> <span class="string">'@/stores/token'</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">TokenStore</span>= <span class="title function_">useTokenStore</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> userInfoStore = <span class="title function_">useUserInfoStore</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取用户详细信息</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">getUserInfo</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">userInfoService</span>();</span></span><br><span class="line"><span class="language-javascript">    userInfoStore.<span class="title function_">setInfo</span>(result.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">getUserInfo</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">ElMessageBox</span>, <span class="title class_">ElMessage</span> } <span class="keyword">from</span> <span class="string">'element-plus'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useRouter } <span class="keyword">from</span> <span class="string">'vue-router'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handleCommand</span> = (<span class="params">command</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (command === <span class="string">'logout'</span>) {</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="string">'你确认退出登录吗？'</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">'温馨提示'</span>,</span></span><br><span class="line"><span class="language-javascript">            {</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">confirmButtonText</span>: <span class="string">'确认'</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">cancelButtonText</span>: <span class="string">'取消'</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">'warning'</span>,</span></span><br><span class="line"><span class="language-javascript">            }</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="keyword">async</span> () =&gt; {</span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">TokenStore</span>.<span class="title function_">removeToken</span>();</span></span><br><span class="line"><span class="language-javascript">                userInfoStore.<span class="title function_">removeInfo</span>();</span></span><br><span class="line"><span class="language-javascript">                router.<span class="title function_">push</span>(<span class="string">'/login'</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//用户点击了确认</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">'退出登录成功'</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            })</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> {</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//用户点击了取消</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">ElMessage</span>({</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">'info'</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>: <span class="string">'取消登录'</span>,</span></span><br><span class="line"><span class="language-javascript">                })</span></span><br><span class="line"><span class="language-javascript">            })</span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">    } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="language-javascript">        router.<span class="title function_">push</span>(<span class="string">`/user/<span class="subst">${command}</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">class</span>=<span class="string">"layout-container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左侧菜单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"el-aside__logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">active-text-color</span>=<span class="string">"#ffd04b"</span> <span class="attr">background-color</span>=<span class="string">"#232323"</span> <span class="attr">text-color</span>=<span class="string">"#fff"</span> <span class="attr">router</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"/article/category"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Management</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>文章分类<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"/article/manage"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Promotion</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>文章管理<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-sub-menu</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">UserFilled</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"/user/info"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">User</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>基本资料<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"/user/avatar"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Crop</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>更换头像<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"/user/resetpassword"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">EditPen</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>重置密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-sub-menu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 右侧主区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 头部区域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-header</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>黑马程序员：<span class="tag">&lt;<span class="name">strong</span>&gt;</span>{{ userInfoStore.info.nickname }}<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-dropdown</span> <span class="attr">placement</span>=<span class="string">"bottom-end"</span> @<span class="attr">command</span>=<span class="string">"handleCommand"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-dropdown__box"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-avatar</span> <span class="attr">:src</span>=<span class="string">"userInfoStore.info.userPic? userInfoStore.info.userPic : avatar"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">CaretBottom</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">dropdown</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"info"</span> <span class="attr">:icon</span>=<span class="string">"User"</span>&gt;</span>基本资料<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"avatar"</span> <span class="attr">:icon</span>=<span class="string">"Crop"</span>&gt;</span>更换头像<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"resetpassword"</span> <span class="attr">:icon</span>=<span class="string">"EditPen"</span>&gt;</span>重置密码<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"logout"</span> <span class="attr">:icon</span>=<span class="string">"SwitchButton"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-dropdown</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 中间区域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;div style="width: 1290px; height: 570px;border: 1px solid red;"&gt;</span></span><br><span class="line"><span class="comment">                    内容展示区</span></span><br><span class="line"><span class="comment">                &lt;/div&gt; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 底部区域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-footer</span>&gt;</span>大事件 ©2023 Created by 黑马程序员<span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.layout-container</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.el-aside</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#232323</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &amp;__logo {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'@/assets/logo.png'</span>) no-repeat center / <span class="number">120px</span> auto;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-menu</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-right</span>: none;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.el-header</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-dropdown__box</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.el-icon</span> {</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:active</span>,</span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:focus</span> {</span></span><br><span class="line"><span class="language-css">                <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">            }</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.el-footer</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="八-Login-vue">八. Login,vue</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">User</span>, <span class="title class_">Lock</span> } <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//控制注册与登录表单的显示， 默认显示注册</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isRegister = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> registerData = <span class="title function_">ref</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">username</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">password</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">rePassword</span>: <span class="string">''</span></span></span><br><span class="line"><span class="language-javascript">})</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//自定义确认密码的校验函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">rePasswordValid</span> = (<span class="params">rule, value, callback</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (value == <span class="literal">null</span> || value === <span class="string">''</span>) {</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'请再次确认密码'</span>))</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (registerData.<span class="property">value</span>.<span class="property">password</span> !== value) {</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'两次输入密码不一致'</span>))</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用于注册的表单校验模型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> registerDataRules = {</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">username</span>: [</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入用户名'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">min</span>: <span class="number">5</span>, <span class="attr">max</span>: <span class="number">16</span>, <span class="attr">message</span>: <span class="string">'用户名的长度必须为5~16位'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">password</span>: [</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入密码'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">min</span>: <span class="number">5</span>, <span class="attr">max</span>: <span class="number">16</span>, <span class="attr">message</span>: <span class="string">'密码长度必须为5~16位'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">rePassword</span>: [</span></span><br><span class="line"><span class="language-javascript">        { <span class="attr">validator</span>: rePasswordValid, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用于注册的事件函数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { userRegisterService, userLoginService } <span class="keyword">from</span> <span class="string">'@/api/user.js'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { <span class="title class_">ElMessage</span> } <span class="keyword">from</span> <span class="string">'element-plus'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">register</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">userRegisterService</span>(registerData.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// if (result.code === 0) {</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     alert(result.msg?result.msg:'注册成功')</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// }else{</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     alert(result.msg?result.msg:'注册失败')</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// }</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// alert(result.msg ? result.msg : '注册成功')</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(result.<span class="property">message</span> ? result.<span class="property">message</span> : <span class="string">'注册成功'</span>)</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useTokenStore } <span class="keyword">from</span> <span class="string">'@/stores/token.js'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useRouter } <span class="keyword">from</span> <span class="string">'vue-router'</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//调用useTokenStore得到状态</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> tokenStore = <span class="title function_">useTokenStore</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用于登陆事件函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">userLoginService</span>(registerData.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//保存token</span></span></span><br><span class="line"><span class="language-javascript">    tokenStore.<span class="title function_">setToken</span>(result.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// if (result.code === 0) {</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     alert(result.msg?result.msg:'登录成功')</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// }else{</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     alert(result.msg?result.msg:'登录失败')</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// }</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// alert(result.msg ? result.msg : '登录成功')</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">'登录成功'</span>)</span></span><br><span class="line"><span class="language-javascript">    router.<span class="title function_">push</span>(<span class="string">'/'</span>)</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">clearRegisterData</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    registerData.<span class="property">value</span> = {</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">password</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">rePassword</span>: <span class="string">''</span></span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">class</span>=<span class="string">"login-page"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"12"</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"6"</span> <span class="attr">:offset</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注册表单 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">"form"</span> <span class="attr">size</span>=<span class="string">"large"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">v-if</span>=<span class="string">"isRegister"</span> <span class="attr">:model</span>=<span class="string">"registerData"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:rules</span>=<span class="string">"registerDataRules"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">:prefix-icon</span>=<span class="string">"User"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">v-model</span>=<span class="string">"registerData.username"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">:prefix-icon</span>=<span class="string">"Lock"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">v-model</span>=<span class="string">"registerData.password"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">"rePassword"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">:prefix-icon</span>=<span class="string">"Lock"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入再次密码"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">v-model</span>=<span class="string">"registerData.rePassword"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 注册按钮 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"register(registerData)"</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">auto-insert-space</span>&gt;</span></span><br><span class="line">                        注册</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">"info"</span> <span class="attr">:underline</span>=<span class="string">"false"</span> @<span class="attr">click</span>=<span class="string">"isRegister = false; clearRegisterData()"</span>&gt;</span></span><br><span class="line">                        ← 返回</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 登录表单 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">"form"</span> <span class="attr">size</span>=<span class="string">"large"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">v-else</span> <span class="attr">:model</span>=<span class="string">"registerData"</span> <span class="attr">:rules</span>=<span class="string">"registerDataRules"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">:prefix-icon</span>=<span class="string">"User"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">v-model</span>=<span class="string">"registerData.username"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">:prefix-icon</span>=<span class="string">"Lock"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">v-model</span>=<span class="string">"registerData.password"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-checkbox</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">:underline</span>=<span class="string">"false"</span>&gt;</span>忘记密码？<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 登录按钮 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">auto-insert-space</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">click</span>=<span class="string">"login(registerData)"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">"info"</span> <span class="attr">:underline</span>=<span class="string">"false"</span> @<span class="attr">click</span>=<span class="string">"isRegister = true; clearRegisterData()"</span>&gt;</span></span><br><span class="line">                        注册 →</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 样式 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.login-page</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.bg</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'@/assets/logo2.png'</span>) no-repeat <span class="number">60%</span> center / <span class="number">240px</span> auto,</span></span><br><span class="line"><span class="language-css">            <span class="built_in">url</span>(<span class="string">'@/assets/login_bg.jpg'</span>) no-repeat center / cover;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.form</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        user-select: none;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.title</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.flex</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="九-App-vue">九. App.vue</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RouterView</span>&gt;</span><span class="tag">&lt;/<span class="name">RouterView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="十-main-js">十. main.js</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { createApp } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-plus/dist/index.css'</span></span><br><span class="line"><span class="keyword">import</span> locale <span class="keyword">from</span> <span class="string">'element-plus/dist/locale/zh-cn.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router'</span></span><br><span class="line"><span class="keyword">import</span> { createPinia } <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"><span class="comment">//导入持久化插件</span></span><br><span class="line"><span class="keyword">import</span> { createPersistedState } <span class="keyword">from</span> <span class="string">'pinia-persistedstate-plugin'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> persist = <span class="title function_">createPersistedState</span>()</span><br><span class="line"><span class="comment">//pinia使用持久化插件</span></span><br><span class="line">pinia.<span class="title function_">use</span>(persist)</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>, { locale })</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
